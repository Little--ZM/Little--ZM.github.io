<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>待葡萄嗖透</title>
  <subtitle>你说啥？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-01T17:35:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>朱老师&amp;敏哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《学会提问》读书笔记：批判性思考何其难</title>
    <link href="http://yoursite.com/2018/05/02/%E3%80%8A%E5%AD%A6%E4%BC%9A%E6%8F%90%E9%97%AE%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E8%80%83%E4%BD%95%E5%85%B6%E9%9A%BE/"/>
    <id>http://yoursite.com/2018/05/02/《学会提问》读书笔记：批判性思考何其难/</id>
    <published>2018-05-01T17:34:16.000Z</published>
    <updated>2018-05-01T17:35:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>而通往合理的道路上往往从问题开始，并且由问题相伴</strong></p>
</blockquote>
<p>这是一本实用书籍，书名是《学会提问》，但却不仅仅是告诉你如何提出好问题。更多的是告诉我们批判性思维的重要性，指导我们如何通过提问去理解一个人的观点和论述，以及如何通过提出一些问题，避免被欺骗。贯穿全书的始终的是批判的理性思维。即使你看过我的笔记。我仍然建议你去读一下这本书。</p>
<a id="more"></a>
<blockquote>
<p>用心读，一周可以读完，分散一些的话两周。</p>
</blockquote>
<p>整本书分为三个部分：</p>
<ul>
<li>1 批判性思考，提出好问题的前提（1章）</li>
<li>2 如何理解一个观点或论述（2-5章）</li>
<li>3 如何避免被误导（6-12章）</li>
</ul>
<p>下面先看第一部分，</p>
<h2 id="批判性思维是提出好问题的前提"><a href="#批判性思维是提出好问题的前提" class="headerlink" title="批判性思维是提出好问题的前提"></a>批判性思维是提出好问题的前提</h2><p>但是，为什么要学会提出好问题呢？</p>
<p>因为我们并不想做观点的奴隶。是否接受别人和自己的观点，取决于观点有多大价值，是否合理。</p>
<p><strong>而通往合理的道路上往往从问题开始，并且由问题相伴</strong></p>
<p>这就需要我们具有批判性思维。</p>
<h3 id="批判性思维"><a href="#批判性思维" class="headerlink" title="批判性思维"></a>批判性思维</h3><p>本书中批判性思维包含下面三个方面的内容：</p>
<ul>
<li>有一套相互关联、环环相扣的关键问题的意识</li>
<li>恰如其分的提出关键问题的能力</li>
<li>积极主动地利用关键问题的强烈愿望</li>
</ul>
<p>也是本书作者希望引导的方向。</p>
<h3 id="进行批判性思考的要点"><a href="#进行批判性思考的要点" class="headerlink" title="进行批判性思考的要点"></a>进行批判性思考的要点</h3><p>首先，问问自己这件事和自己是否有关系，作者提示我们，别为与我们无关的事儿去浪费时间。</p>
<p>第二，记住每个人的价值观都有所不同，要记住问问你自己，“我有没有可能是错误的呢？”，而不是对价值观不同的人一棒子打死。</p>
<p>第三，记住拥有批判性思考的人需要拥有自主性，拥有淘金式思维。需要能够主动的进行选择，而不是来着皆收。</p>
<p>第四，如果你想对一个人的观点有深入的了解，你需要将对话不断进行下去。你需要让对方感觉到你是好奇，而不是挑战，你需要报纸谦逊。要有耐心的倾听与与我们意见相反的人话。不要感情用事。更不要做人生攻击式的一厢情愿的思考。</p>
<blockquote>
<p>“这个人之前就有过小偷的行为，所以这一次一定也是他干的”<br>你看，这样的人你一定很讨厌吧。</p>
</blockquote>
<p>这是批判性思考的大敌。这是一种情绪化，当我们无法理解或者改变我们的境遇的时候，这种情况就会发生。</p>
<p>批判性思考何其难，会有种种困难一直伴随我们，但是凭借好奇心和对批判性原则的尊重，绝对可以抵制他们。</p>
<p>要想做到对一个提出的观点做批判性思考，知道真正理解这个观点是首要任务。</p>
<h2 id="如何去理解一个观点？"><a href="#如何去理解一个观点？" class="headerlink" title="如何去理解一个观点？"></a>如何去理解一个观点？</h2><p>理解一个人对你表达的观点，你需要以下有外到内的三个步骤：</p>
<ul>
<li>1 <strong>是什么？= 结论</strong> 论题和结论是什么</li>
<li>2 <strong>凭什么？= 理由</strong> 理由是什么？一些细节的词有没有暴露他们的思考路径？</li>
<li>3 <strong>为什么？= 价值观和假设</strong> 他们的此刻拥有的价值观是什么？</li>
</ul>
<p>翻译成大白话就是 1，他到底想说什么？ 2 他凭什么这么说？ 3 他为什么会的得出这样的结论</p>
<p>下面还是一个一个来看。</p>
<h3 id="首先要明白论题和结论到底是什么"><a href="#首先要明白论题和结论到底是什么" class="headerlink" title="首先要明白论题和结论到底是什么"></a>首先要明白论题和结论到底是什么</h3><p>要去客观评价一个人的分析和推理，第一步就是要找准论题的结论。</p>
<p>这里有两种论题：<strong>描述性论题</strong> 和 <strong>规定性论题</strong></p>
<ul>
<li><strong>描述性论题 ： 是什么？</strong></li>
</ul>
<blockquote>
<p>音乐 <strong>是不是</strong> 有助于提高一个人的数学成绩？<br>日夜百服宁 <strong>是不是</strong> 治疗感冒的特效药<br>北京大学科研水平 <strong>怎么样</strong>？</p>
</blockquote>
<p>这些都在描述世界万物过去，现在或者将来的存在方式。都属于描述性论题</p>
<ul>
<li><strong>规定性论题： 应不应该？</strong></li>
</ul>
<blockquote>
<p>公司应不应该强制打卡？<br>学校应不应该补课？<br>xxx 应不应该立法解决？</p>
</blockquote>
<p>这些都是有关世界应该是什么样的问题。</p>
<p>知道这两种分类，有助于你缕清论题的思路。但是有时候，那些论题不是很清晰的表达出来。那么，找准 <strong>结论</strong> 就是找到论题的方法之一。</p>
<p>作者或者演讲者希望你相信的，就是他的结论。而只有知道了结论你才能进行客观的评价。</p>
<p>然后，你要做的，就是找到理由，解决 ：</p>
<h3 id="他凭什么这么说？"><a href="#他凭什么这么说？" class="headerlink" title="他凭什么这么说？"></a>他凭什么这么说？</h3><p>一个完整的论证有两个明显的组成部分，<strong>一个结论</strong> 和 <strong>支撑结论的理由</strong>。</p>
<p>理由是我们为什么要相信某个结论的解释说明或者逻辑依据。<br><strong>只有找到支撑的理由，才能判断一个结论的价值</strong></p>
<p>例子书里很多。不一一列举，但对理由有几个关键的点：</p>
<ul>
<li><p>找到好理由首先要对每个论证有一个怀疑的态度</p>
</li>
<li><p>避免逆向思维，现有理由再有结论。理由是模具，结论因此而形成，而不是倒过来</p>
</li>
<li><p>最后一定很重要，就是注意论证中的那些意义不明确的关键词</p>
</li>
</ul>
<p>比如一些广告词，“胃疼就用xxx; 30分钟见效”<br>那么：<br>结论是： 胃疼用xxx<br>理由是： 30分钟见效<br>但是，<strong>见效</strong> 是什么意思呢？ 是稍微缓解？ 还是彻底解决？这是不明确的。</p>
<p>另外，我们关注上下文去理解词的意思，因为字典里的意思不一定在文章中是适用的。同时还要注意一些包含感情色彩的词。</p>
<p>所以对这些可能歧义的词，我们要养成不断提问的习惯：“<strong>请问你这是什么意思呢</strong>” ，而且那些想要说服你的人，就有义务去讲这些模棱两可的词语解释清楚。</p>
<blockquote>
<p>但是需要注意的是，要把注意力放在找准论题，结论 ，和理由上。然后在最后的分析推理中，关键词才最为关键。不要一开始就陷入细节之中</p>
</blockquote>
<h3 id="为什么说？"><a href="#为什么说？" class="headerlink" title="为什么说？"></a>为什么说？</h3><p>一个论证表面可见的部分可能穿着最华丽的外衣。</p>
<p>而当你听完了完整的论证过程，了解了论题，结论，理由，与关键词。并且知道关键词的意思。作为一个批判性思考的人，我们需要再深一步，看清楚作者没有说出来，或者不想让你看到的部分。只有理解了这个部分，理由和结论的逻辑才能自洽。</p>
<p>藏在背后的东西是什么呢？ 是一种假设。</p>
<blockquote>
<p>假设就是一个看法; 通常没有说出来，而作者认为理所应当，并用来证明其表面的推理论证。</p>
</blockquote>
<h4 id="两种假设"><a href="#两种假设" class="headerlink" title="两种假设"></a>两种假设</h4><ul>
<li><strong>价值观假设</strong></li>
</ul>
<blockquote>
<p>表达了作者希望这个世界变成什么样</p>
</blockquote>
<p>这里的价值观假设，更多是一种场景下的比较。是一种场景化的价值观倾向。</p>
<p>价值观可能人人都有，比如竞争和合作，效率，隐私。只是在不同场合下，人们的取舍不同，就造成了不同的价值观假设。</p>
<p>比如 ： <strong>每周开总统新闻发布会是否合适？</strong> 这种规范性论述（应不应该的问题），牵扯到的是 媒体自由和国家安全的冲突。这个时候，赞成与反对的人，就是基于在这种情况下，哪一种价值观更加重要。</p>
<p>以下四条线索可以帮助我们找到一个人在辩论中的价值观倾向。</p>
<ol>
<li>作者或者表述人的背景</li>
<li>可能发生的结果，受益方是谁？</li>
<li>寻找类似的辩论，查看同类的价值观假设</li>
<li>采取相反的立场，看看反对的人关心的是什么</li>
</ol>
<p>但是别忘了，你找到价值观假设的目的是为了更好判断推理的过程和价值。价值取向也有一定的原因，作为理性思考的人也好考虑到。（当然这并不容易，所以一开始就让你想清楚这件事是否和你有关）</p>
<ul>
<li><strong>描述性假设</strong></li>
</ul>
<blockquote>
<p>描述性假设是作者对世界的认知。是他认为世界应该是什么样的那些想法</p>
<hr>
<p>和价值观假设比，一个理想，一个现实。</p>
<p>举个例子：有了这辆车你想去哪里就去哪里，因为这种型号的车表现一直很好。</p>
</blockquote>
<p>这里，理由中，就有一个假设，这种型号的车质量始终如一。推荐的这辆车和以前的一样好。<br>这就是他的描述性假设。他认为世界就应该是这样的。</p>
<p>以下几点在寻找描述性假设的时候要注意：</p>
<ol>
<li>思考结论和理由之间的鸿沟。也就是你怎么能从这个理由得到这个结论的？</li>
<li>寻找没有说出来的那些支撑其理由的想法。</li>
<li>将自己变成作者，再变成反对者，去感受。</li>
<li>认识到有其他理由，可以代替作者给出的理由，来获取结论的好处。</li>
</ol>
<p>但是我们在寻找的时候，要记得，找到<strong>有争议而缺失</strong>的假设，而不是那些无意义的。</p>
<p>至此，我们就完整了解了一个论证的过程。以及如何理解他们。<br>具体就是：</p>
<ol>
<li>论题和结论是什么</li>
<li>理由是什么</li>
<li>哪些关键词意思不明确</li>
<li>是什么价值观或者描述性假设</li>
</ol>
<p>可是，这些理由，可靠么？什么样的理由才可靠， 如何才能避免被误导呢？ </p>
<h2 id="如何避免被误导"><a href="#如何避免被误导" class="headerlink" title="如何避免被误导"></a>如何避免被误导</h2><h3 id="小心那些习以为常的谬误："><a href="#小心那些习以为常的谬误：" class="headerlink" title="小心那些习以为常的谬误："></a>小心那些习以为常的谬误：</h3><p>批判性聆听和主要目标就是判定这些结论的可接受程度或者价值的大小。<br>首先，我们就要当心推理中的谬误。就是那些尝试欺骗你的逻辑。</p>
<p>常见的有一下三种：</p>
<p>1 结论提供的推理需要你无法接受的假设。<br>2 用与结论无关的信息来分散你的注意力<br>3 提供的证据需要结论成立为前提</p>
<p>当然，这些情况在现实生活中的有很多种形式出现，然后书中将它们都总结成一个个谬误。这里说几个让我感同身受的。</p>
<ul>
<li><strong>人身攻击谬误</strong>： 对个人进行人身攻击，而不直接反驳其提供的理由。</li>
</ul>
<blockquote>
<p>不管你说什么我都不会相信你，因为你就是个白痴。你不适合做这件事。</p>
</blockquote>
<ul>
<li><strong>追求完美解决方案谬误</strong>：因为尝试某种方案会有一些后遗症，于是这种方案就根本不应该被采用。</li>
</ul>
<blockquote>
<p>政府不应该禁止播放酒的广告。因为这么做根本不能完全解决酒类消费<br>（这里就是追求完美主义谬论。不完美就不该采用是谬误）<br><strong>能提出解决方案比一筹莫展、束手无策高明百倍</strong><br><strong>比如：</strong> 防盗门不能完全防止小偷，就不用装了？</p>
</blockquote>
<ul>
<li><strong>偷换概念谬误</strong></li>
</ul>
<blockquote>
<p>这个最常见，<br><strong>白马非马</strong>： 替换了“是” 这个概念。<br>你算什么男人，和男人会长胡子。“男人”概念也不同。</p>
</blockquote>
<ul>
<li><strong>诉诸公众谬误</strong> and <strong>诉诸权威谬误</strong></li>
</ul>
<blockquote>
<p><strong>从重：</strong>这个最让人无奈。是一种 <strong>错误的假设</strong>，大部分人喜欢的一切就是有道理的，可接受的。<br><strong>权威：</strong> 权威到底有没有相关专业的知识？ 老板说某种行为不违法不代表真的不违法。</p>
</blockquote>
<ul>
<li><strong>诉诸感情谬误</strong> ： 强烈的感情词来干扰注意力</li>
</ul>
<blockquote>
<p>爱国，害怕，可怜， 恐惧 都是常常被利用的点</p>
</blockquote>
<ul>
<li><strong>虚假两难谬误</strong> ： 显示中的情况多余两种，却只假设有两种</li>
</ul>
<blockquote>
<p>不是。。。就是。。。<br>唯一的可能性就是。。。<br>你不行，所以只有他可以。。（烦）</p>
</blockquote>
<ul>
<li><strong>光环效应谬误</strong>： 用各种美德词包装，而逃避细致检查</li>
</ul>
<blockquote>
<p>他从来都是充满爱心的，信心百倍不遗余力的为xxx做贡献。所以你应该偷他一票。（但其实什么都没说，没有实质性理由）</p>
</blockquote>
<h4 id="几个步骤让你提高对谬误的判断能力"><a href="#几个步骤让你提高对谬误的判断能力" class="headerlink" title="几个步骤让你提高对谬误的判断能力"></a>几个步骤让你提高对谬误的判断能力</h4><p>1 首先找出结论和理由，这是第一步<br>2 如果结论支撑某个行为，想一想理由有没有表明某个具体的有点和不足？如果没有，就要当心<br>3 问一下自己，如果理由成立，需要什么样的假设？而这个假设是否合理。<br>4 注意那些想引起你情感共鸣的细节。情绪会毁了你的判断。</p>
<h3 id="理解各类证据的有效性"><a href="#理解各类证据的有效性" class="headerlink" title="理解各类证据的有效性"></a>理解各类证据的有效性</h3><h4 id="个人观察，专家意见，研究报告可信么？"><a href="#个人观察，专家意见，研究报告可信么？" class="headerlink" title="个人观察，专家意见，研究报告可信么？"></a>个人观察，专家意见，研究报告可信么？</h4><p>人们偏向于相信自己亲眼看见的事物。但是我们看到的记得的，都是我们想我们看见的想听见的。很难完全公正与没有偏好。要向个人观察稍微正规，那就需要观察的时间很近，而且是几个人对观察事件没有期望和偏好。</p>
<p>对于专家意见，也要看专家的背景。</p>
<p>能做到 <code>可复制</code>，<code>可控性</code>，<code>描述精确</code>的科学研究的结果，可信度还是比较高的。</p>
<h4 id="警惕证据替代的可能性"><a href="#警惕证据替代的可能性" class="headerlink" title="警惕证据替代的可能性"></a>警惕证据替代的可能性</h4><p>找出更多支撑结论的可替代性的理由，就说明断言的确定性更少（成反比）<br>有相关性不能表示推到出因果关系。</p>
<h4 id="警惕标题党，警惕数据的欺骗性"><a href="#警惕标题党，警惕数据的欺骗性" class="headerlink" title="警惕标题党，警惕数据的欺骗性"></a>警惕标题党，警惕数据的欺骗性</h4><p>总结以下几点：</p>
<ul>
<li><p>看到数据的分析，多问一句，数据是怎么来的，你的得到的细节越多越好。</p>
</li>
<li><p>平均数陷阱：是平均数，还是中位数，还是众数</p>
</li>
</ul>
<blockquote>
<p><strong>平均数：</strong>  和马云一起，我们平均身价1000亿美元<br><strong>中位数：</strong> 1 - 100 的中位数是50<br><strong>众数：</strong> 数字排好序，区域端内出现次数最高的数字是众数</p>
</blockquote>
<p>这里有一个例子，一个20岁患癌症的年轻人，医生说，这个病平均寿命是35岁。这个时候，35这个平均值是 <strong>众数</strong> 的时候是才是有效的。否则常常就 <strong>被平均</strong></p>
<p>就医的时候，也要挑数值分布最乐观的那一家。</p>
<ul>
<li>当你听到动听的比例和百分数 ， <code>一定要当心</code></li>
</ul>
<blockquote>
<p>但你也要学习到，换一个说法，说服力会强很多。 1% 和 100BP; 从1%到0.5%; 换句话说就是50%的提升啊</p>
</blockquote>
<h3 id="警惕那些隐藏的信息"><a href="#警惕那些隐藏的信息" class="headerlink" title="警惕那些隐藏的信息"></a>警惕那些隐藏的信息</h3><p>记住，<strong>你遇到的每一个信息都有一个目的</strong>。而有些信息为了对自己的结论更为有利，会影藏掉一部分信息。而这部分信息就是对你推理结论最为重要的那部分信息。</p>
<p>一切都是为了目标为了利益。找一找可能存在的负面效果以及谁会获益，会帮助我们更好的理解那些没有说完的理由。</p>
<p>或是因为不需要解释，也可能是因为就是刻意想要骗我们。</p>
<h2 id="朱老师的总结："><a href="#朱老师的总结：" class="headerlink" title="朱老师的总结："></a>朱老师的总结：</h2><p>这一本书核心分为两块，一块是理论，一块是实例。两者交叉，贯穿始终。告诉我们批判性思考的重要性，一个完整的论证应该怎样批判性的理解。提问出正确的好的问题是核心方法。</p>
<p>但我读下来更多的感受是，开拓了思维。那么多实例要记住很难。但是却记住了要时刻保持开放的怀疑心态，不总非黑即白，思考与推理不同的角度和场景下，不同的价值观下，会有不同的结论。世界丰富多彩，保持好奇持续探寻总是没错。</p>
<p>而作为会批判性思考的人，我们也总可以识别出最强有力的推理。</p>
<p>(困了，晚安)</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;而通往合理的道路上往往从问题开始，并且由问题相伴&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一本实用书籍，书名是《学会提问》，但却不仅仅是告诉你如何提出好问题。更多的是告诉我们批判性思维的重要性，指导我们如何通过提问去理解一个人的观点和论述，以及如何通过提出一些问题，避免被欺骗。贯穿全书的始终的是批判的理性思维。即使你看过我的笔记。我仍然建议你去读一下这本书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="认知提升" scheme="http://yoursite.com/tags/%E8%AE%A4%E7%9F%A5%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>《增长黑客》读书笔记（上篇）：你应该有的理论基础</title>
    <link href="http://yoursite.com/2018/04/19/%E3%80%8A%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89%EF%BC%9A%E4%BD%A0%E5%BA%94%E8%AF%A5%E6%9C%89%E7%9A%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/04/19/《增长黑客》读书笔记（上篇）：你应该有的理论基础/</id>
    <published>2018-04-18T16:16:50.000Z</published>
    <updated>2018-04-18T16:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>If you are not growing, then you are dying!</strong></p>
</blockquote>
<p>一句话道出了<code>增长</code>这一企业的永恒真理。增长黑客的职业因此慢慢发展。虽说国内第一本增长黑客的书是大佬 <strong>范冰</strong> 的《增长黑客》，但是真正的增长黑客之父是在2010提出<code>增长黑客</code>概念的 <strong>肖恩·艾丽斯</strong>。也就是这一本《增长黑客》的作者。所以这本书应该更加值得一读。</p>
<a id="more"></a>
<p>fackbook 有单独的增长部门，头条的200人增长团队支撑了头条系列app近几年来的飞速增长。滴滴也开始组建增长部门，各个创业公司拼多多，小红书，即刻都在招用户增长的产品经理（别问我怎么知道），这个职业可能是目前比较火的职业。</p>
<p>但是到底是什么是增长黑客？可能你是通过各种增长黑客的文章了解到各类看上去很轻松的四两拨千千的策略使得产品获得爆发式的增长，内心澎湃不已。</p>
<p>但这都是你观察的表面现象，就像我们不能只按表面需求做产品一样，在我们应用各种增长方法之前，我们首先要理解他的起源，适用场景。而不是看了皮毛就以为自己已经修炼的心法。（别对号入座，说的是我，不过欢迎你加入我）</p>
<p>作者写这本书的目标，也是系统的介绍增长黑客的起源，多年实践下来的理论，以及实战经验。<br>全书分为我划分为三个部分：</p>
<ol>
<li>理论部分，1-4 章。增长理论。</li>
<li>实战部分，5-8 章节。获客，激活，留存，和变现</li>
<li>良性循环，</li>
</ol>
<p>第一部分包括如何搭建增长团队，好产品的对于增长的重要性，如何确定增长杠杆，以及快节奏的实验</p>
<p>下面一块一块来看。</p>
<h3 id="1-搭建增长团队"><a href="#1-搭建增长团队" class="headerlink" title="1 搭建增长团队"></a>1 搭建增长团队</h3><p>想要更好的执行增长策略，很重要的一点就是 <code>打破筒仓</code>。<strong>搭建跨职能的增长团队</strong>，让各个部门之间可以进行合作。</p>
<p>因为工程师和产品设计师能找到满足用户喜好的方式，但是他们远离用户。不知道他们喜欢什么。</p>
<p>而如果你想要较为顺利执行你的增长计划，一些必要高层支持就非常必要。（你懂得）<br>一般有两种团队模式：</p>
<ul>
<li>公司有一个专门增长团队，有专门的增长副总裁，增长团队都向副总裁汇报</li>
<li>增长负责人由产品负责人兼任，增长由产品部门负责</li>
</ul>
<p>团队推进一些事情的时候一定会遇到资源问题的阻力。公司管理得当，利益共享，在很大程度上是可以减少一些阻力的。</p>
<p><strong>一个合个的增长团队应该有以下角色：</strong></p>
<ul>
<li><strong>增长负责人</strong>：理解战略，懂得增长方法论，懂得如何管理团队</li>
<li><strong>产品经理</strong>：监督产品以及功能的实现过程。一般由增长团队所负责的产品的产品经理加入</li>
<li><strong>软件工程师</strong>：实现构想。同时也是团队中重要的意见来源。</li>
<li><strong>数据分析师</strong>：懂得确保数据的严密性并且在统计上有效果。</li>
</ul>
<p><strong>大体上的工作流程分为以下四个步骤：</strong></p>
<ol>
<li>分析数据&amp;洞察�收集</li>
<li>想法产生</li>
<li>排定优先级</li>
<li>试验执行</li>
</ol>
<p>但是在做增长团队之前，有几点需要注意：首先增长不是一簇而就，一开始做的时候可以从某一个小的点开始，不断向外延展。如果你希望尝试一下增长黑客，也最好先能获得一定的支持。因为过程中难免会犯错，这是试验的必经之路，这个时候有人的支持就会很不一样。</p>
<p>最最重要的一点是，如果你的产品被喜爱，花再多心思都无济于事。因为：<strong>好产品是增长的根本</strong></p>
<h3 id="2-好产品是增长的根本"><a href="#2-好产品是增长的根本" class="headerlink" title="2 好产品是增长的根本"></a>2 好产品是增长的根本</h3><p>要记住无论营销的投入有多大，用户都不可能爱上一款不合格的产品。一味的追逐增长，可能会让你灰飞烟灭。BranchOut 就是一个过早展开增长攻势但产品却一般，最终到导致被低价收购的反面例子。</p>
<p>所以增长黑客在着手工作前要明白：</p>
<ul>
<li>你的产品对用户是否不可获取</li>
<li>目标用户什么，核心价值是什么</li>
<li>最终的产品的核心价值可能不一定是最初的愿景，而你<strong>必须找到</strong></li>
<li>是爱创造的增长，不是增长创造了爱</li>
</ul>
<p>而要赢得用户的喜爱，就要创造产品的  <strong>Aha moment</strong> 。</p>
<h4 id="找到产品的“-Aha-moment-”"><a href="#找到产品的“-Aha-moment-”" class="headerlink" title="找到产品的“ Aha moment ”"></a>找到产品的“ <strong>Aha moment</strong> ”</h4><blockquote>
<p><strong>Aha moment</strong> ： 就是用户真正发现了他们能从产品中获得什么（核心价值）的时刻。</p>
</blockquote>
<p>淘宝的 <strong>Aha moment</strong> 是能够买到各种想要的东西。微信的 <strong>Aha moment</strong> 是可以联系到看到好久不见的朋友。点评的 <strong>Aha moment</strong> 是可以找想要去的店。优步的则是点一下手机，8分钟之内有车来接你。</p>
<p>你要问问自己的是，你是否知道用户的 <strong>Aha moment</strong> 的点在哪里？</p>
<p>而这些点可能难以确定，所以挖掘用户数据和反馈就很重要。这可以帮助你找到那些真正热爱你的产品的人的相似之处，找到他们已经获得而其他用户还未获得的价值。就像推特通过分析发现“关注了30个人用户活跃度很高”。</p>
<p>但是如何找到或者实现自己产品的 <strong>Aha moment</strong> 呢？作者给出了自己答案：我总结为三点：<strong>调研</strong>，<strong>分析</strong>，<strong>实验</strong>。</p>
<p>（其实做产品的大致流程也如此。只不过大部分人在做没有调研的数据分析，或者没有分析的实验。）</p>
<p><strong>第一步调研</strong>，首先你需要在你的活跃用户中进行调研，确认你的产品是否对用户来说不可或缺。如果问卷调研的结果超过40%，则算合格。<br>调研的对象最好是<strong>活跃用户</strong>，因为从不怎么使用产品的用户那里获得的反馈往往没什么作用。</p>
<p><strong>第二步分析</strong>，线上去获取用户的基础数据，线下深入用户群体去和用户进行更加深层次的交流。<strong>以便获取用户真正需要的是什么，阻碍你产品成功的因素和障碍是什么</strong> （大部分时间，我们都是在拍脑袋，不是么。）</p>
<p>展开调研和分析是为了<strong>获取洞见</strong>，有些人觉得浪费时间，但其实这是误区。首先你不去调研做产品就有些本末倒置，其次，调研有时候根本不需要花费很多时间。也许几百分问卷，也许和几个用户深度交流就可以伴你找到在数据分析中发现的用户行为 <strong> 背后的动机</strong></p>
<p><strong>第三步试验</strong>，在大版本试验之前，快节奏小成本的不断的进行AB测试，或者多变量测试是增长黑客的基本原则。我们通过不断的测试可以知道那些改动是真正有效的。但是这些测试都有<strong>数据表面性</strong> 的问题，因为他们只能告诉你某种行为的转化率高，但是不代表最终是否成功黏住了用户，所以数据需要最终测试用户的生命周期。</p>
<p>通过调研分析和试验的过程，我们最终会构建一个完整的数据仓库，最终分析师要通过这些数据找到活跃用户最常使用的功能以及他们使用产品的逻辑，发现产品的 <strong>Aha moment</strong>，然后让更多的人体验到，从而提高其他用户转化成活跃用户的概率。</p>
<blockquote>
<p>我们做的所有工作，都是为了找到你能够给客户提供的 <strong>Aha moment</strong> 。在这个过程中，我们还是要记住，在找到之前，我们和客户都不知道他们需要什么。</p>
</blockquote>
<h3 id="3-确定增长的杠杆"><a href="#3-确定增长的杠杆" class="headerlink" title="3 确定增长的杠杆"></a>3 确定增长的杠杆</h3><p>通过一系列方法找到了 <strong>Aha moment</strong> 后，剩下的就是制定明确的增长战略，然后严密的执行。因为如果没有全力的增长，那么即使真正出色的产品也会面临失败。（警示）</p>
<p><strong>聚焦战略在影响力最大的因素上</strong><br>增长初期，通过快速实验找到并优化 <code>最具有潜力的增长因素</code>。因为初期增长团队必须专注于高影响力的目标。如果不确定是否有高影响力，那也需要非常有说服力的说明。初期的增长实验的机会成本很高，所以一定要想办法获得高影响力，对小公司来说就是要获得大幅提升，因为用户量上去之后，才可能测试更多的<code>利基领域</code>。</p>
<p>聚焦战略我们需要做到以下几点</p>
<ul>
<li>1 确定核心指标，列出基本增长公式</li>
</ul>
<blockquote>
<p>这其实是最难的一个部分。也是最重要的一步。因为后面的所有操作都会围绕着核心指标开展。</p>
</blockquote>
<p>要确定核心指标首先要知道用户对产品价值体验最直观的行为在哪里。<strong>我们需要跟踪用户达到 </strong>Aha moment<strong> 之前每一个步骤，以及这些步骤的频率。</strong></p>
<p>明确产品的相关的特殊指标非常关键。每个产品都有自己共同的增长因素，比如获得新客，高转化和留存。但是每个产品可能更具自己的 <strong>Aha moment</strong> 的不同有着特定的因素组合。比如uber是司机的数量和乘客的数量。yelp是被评价的商家和商家的评价数。</p>
<p>基本增长公式就是所有重要因素的体现。比如ebay的可能是：</p>
<blockquote>
<p>发布商品的卖家 <em> 发布物品的数量 </em> 买家数量 * 成功交易数量 = 总商品增长数量</p>
</blockquote>
<p>虽然他很简单，但是在数据爆炸时代，跟踪到对你而言最为重要的指标会防止你在数据中迷失。</p>
<p>比如Arbnb，他重要的是订房率，每日虚高的日活对他而言意义不大。ylep 每个人每周打开一次就已经很高的，有些产品在用户使用的频率上本身就有局限性。但是对于facebook来说，日活就非常重要。</p>
<ul>
<li>2 确定北极星指标，</li>
</ul>
<p>然后我们要做的就是选择一个关键的能够决定成败的指标，以此指导所有增长活动。这应该是产品和企业为用户创造的核心价值的体现。</p>
<p>比如Arbnb的订房率。北极星指标让我们开展实验的时候不会走偏方向。不会为了提高某个指标而做实验，最终都要以 “北极星指标” 作为依据。</p>
<ul>
<li>3 数据分析和定性研究同样重要</li>
</ul>
<p>数据的收集统计和分析，是我们找到增长因素的关键。所以优秀的团队已经会花时间做好数据的手机和分析。但是数据只能告诉你表面原因，用户不会通过数据告诉你为什么，所以线下的定性分析依旧很重要。</p>
<p>最后别忘了用简单明了的趋势图，向公司和团队展示工作进展，监控核心指标的变化。</p>
<h3 id="4-快节奏实验"><a href="#4-快节奏实验" class="headerlink" title="4 快节奏实验"></a>4 快节奏实验</h3><p>增长黑客的巨大成功往往来源于一连串小成功的积累。复利的效果是很惊人。快节奏的学习和实验就显得非常重要。高效的团队每周可能有20-30次的试验。</p>
<p>但一开始，团队应该放缓步调，遵循流程站稳脚跟在起步，不要陷入无止境的头脑风暴中。</p>
<p>增长黑客的循环：1  分析数据，2 形成想法，3 排定优先级，4 运行实验，就此循环。</p>
<p>具体描述下来是这样，一个团队开始快速实验之前要和团队明确的是之前的数据分析，核心指标，北极星指标，用户的 <strong>Aha moment</strong> 到底是怎么样的。然后设定每周的实验的节奏，每个人的分工，然后就可以开始有条不紊的开展实验</p>
<p><strong>首先是分析</strong>：剖析用户路径，对用户进行分组，找到核心用户的路径与其他用户的不同，线下用户的使用习惯，他们里体会到 <strong>Aha moment</strong> 还有多远，什么阻碍了他们体验到这种时刻。</p>
<blockquote>
<p>比如假设京东的 <strong>Aha moment</strong> 是当天定时送达，体验到这个点的用户的复购率显著高于其他用户，那么通过调研和分析得到：阻碍用户体验到这一点的可能是运费门槛。然后可能要分析接近活跃用户的那群人的平均客单价如何，用来决定后续的策略</p>
</blockquote>
<p><strong>第二根据分析提出想法</strong>：这里很关键的一点是<code>建立想法库</code>，团队所有成员都可以像里面填充想法。但是每个想法都要很明确，可以是如下模板：</p>
<blockquote>
<p>1 名称：根据场景给用户推送商场相关的美食优惠的套餐可以增加用户访问场景和频次<br>2 描述：如何产生，可能如何发挥作用<br>3 假设：简要说明预期的因果关系，以及预期的结果。<br>4 待测指标：需要追踪那些指标</p>
</blockquote>
<p>这个提出想法的阶段参与的人越多越好，目标就是提出尽可能多的想法。而且不要局限于本团队，外部成员有时候会提供很好的洞见。</p>
<blockquote>
<p>但是在接受意见之前，我们要确保我们已经告诉了他们<code>增长杠杆和核心指标到底是什么</code> ，否则我们可能收到很多模糊的请求。</p>
</blockquote>
<p><strong>第三就是排定优先级</strong>，作者给出了ICE原则用于排列。分别是 <strong>impact(影响力)</strong>，<strong>confidence（信心）</strong>，<strong>ease(简易性)</strong><br>然后团队就可以在在关注的<strong>核心领域</strong>知道得分最高的一批想法进行试验。<br>其中核心关注领域的分类作用很关键。比如一段时间内我们关注的核心指标是<code>留存率</code>，那么即使某一个实验能在拉新的领域有更好的ICE得分，我们也不会采用。</p>
<p>但是这个得分可能不是最终的执行顺序。实际情况可能比预判的要复杂，但是这可以给我们一个大致范围的筛选。</p>
<p>这些流程，可以通过每周一次的增长例会进行协同选择。</p>
<p><strong>第四就是测试</strong>了，每次测试的机会都要珍惜，因为一次糟糕的实验就浪费了一次学习的机会，因此作者指出每个实验都能产生统计上的效果。并给出了两个意见：</p>
<p>a. 采用99%的置信区间。以的降低假阳性的影响。</p>
<blockquote>
<ul>
<li>假阳性（第一类错误）： 把不具备特征的对象当成了具备特征的对象<br>捉错了好人</li>
<li>假阴性（第二类错误）：把具备特征的对象，当做不具备特征 对象<br>错放了坏人<br>一般情况下，第一类错误的影响是超过第二种的。你看看那么些冤案的社会影响就知道了。</li>
</ul>
</blockquote>
<p>b. 坚持用对照组作为依据。差的情况很快可以反映，而好的不是很明显的情况下，为了不让辛苦的实验白费，对照组就很重要了。</p>
<p>最后，要再回到第一阶段，进行分析和学习。要写下完整的实验分析，关键指标，假设与结果，可能的干扰因素等等。也要记得将成功的实验告诉团队，帮助公司的了解增长的工作进展。（你如果想分享失败的经验也不是不可以）</p>
<p>这一章节的最后，作者给出了一个完整增长会议的流程，帮助我们在会议的时候注意思路的梳理。记录如下</p>
<blockquote>
<ul>
<li>每周二召开会议（周一留给数据整理）</li>
<li>15分钟：回顾指标，并更新关注领域（核心指标，北极星指标的变化，下面要关注哪一个增长杠杆，短期目标是否有变化）</li>
<li>10分钟：回顾上一周工作</li>
<li>15分钟：从结果分析中获得主要收获</li>
<li>15分钟：选择下一周的增长实验（大家可以提名，然后根据ICE筛选，讨论达成共识，负责人拍板）</li>
<li>5分钟：检查增长想法储备库（确保有有源源不断的想法）</li>
</ul>
</blockquote>
<h3 id="5-朱老师的废话总结"><a href="#5-朱老师的废话总结" class="headerlink" title="5 朱老师的废话总结"></a>5 朱老师的废话总结</h3><p>全书的上半部通过四个章节有条理的讲述了完整的增长黑客的流程。总结起来就是，首先搭建一个团队，然后找到产品对用户增长，提升活跃度最为核心的价值点（ <strong>Aha moment</strong> ），然后通过一个严格执行的增长实验流程，让更多的人体验到 <strong>Aha moment</strong> ，从而获得增长。</p>
<p>但是，我们做的似乎总是丢掉了最重要的东西。</p>
<p>有一句印象深刻：“<strong>记住是爱创造的增长，而不是增长创造了爱</strong>”</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>“转发点赞表示期待吧”</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you are not growing, then you are dying!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一句话道出了&lt;code&gt;增长&lt;/code&gt;这一企业的永恒真理。增长黑客的职业因此慢慢发展。虽说国内第一本增长黑客的书是大佬 &lt;strong&gt;范冰&lt;/strong&gt; 的《增长黑客》，但是真正的增长黑客之父是在2010提出&lt;code&gt;增长黑客&lt;/code&gt;概念的 &lt;strong&gt;肖恩·艾丽斯&lt;/strong&gt;。也就是这一本《增长黑客》的作者。所以这本书应该更加值得一读。&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="增长黑客" scheme="http://yoursite.com/tags/%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>《游戏化思维》读书笔记： 如果没有外部激励你还会不会继续玩下去</title>
    <link href="http://yoursite.com/2018/04/12/%E3%80%8A%E6%B8%B8%E6%88%8F%E5%8C%96%E6%80%9D%E7%BB%B4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A-%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%A4%96%E9%83%A8%E6%BF%80%E5%8A%B1%E4%BD%A0%E8%BF%98%E4%BC%9A%E4%B8%8D%E4%BC%9A%E7%BB%A7%E7%BB%AD%E7%8E%A9%E4%B8%8B%E5%8E%BB/"/>
    <id>http://yoursite.com/2018/04/12/《游戏化思维》读书笔记：-如果没有外部激励你还会不会继续玩下去/</id>
    <published>2018-04-12T15:39:41.000Z</published>
    <updated>2018-04-12T15:42:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>这本书读起来真的很巧。前一天我听说这本书，然后我下了单。第二天书到了，然后我去看了《头号玩家》，我觉得我对游戏的认知总是差一些。感知不到那份乐趣，让我有一些失落。在我的小时候基本和游戏绝缘，我也一直认为游戏没什么用。浪费时间而已。而这本书改变了我的认识，游戏是一门很深的学问，游戏化的作用也超乎我的想象。</p>
<p>当时我的不屑一顾，我现在反思起来，只是自我保护：1 我玩不到， 2 我玩不好。 （打脸承认这些事儿）</p>
<a id="more"></a>
<p>如果用三个关键字来提炼出我感受最深的三个点，那就是<code>目标</code>，<code>动机</code>，<code>有趣</code>。</p>
<p>这是一本实用类型的书，作者强调游戏化的核心是“帮助人们从必须做的事情中发现乐趣，通过流程有趣而产生吸引力”，同时也系统的告诉我们游戏化的关键元素，以及通过一些通过实践证明过的将游戏化应用到商业中和我们日常的项目中的方法论。</p>
<p>为此，像游戏升级一样，通过leve1-level6，作者循序渐进的与我们分享了他的游戏化思维。</p>
<ul>
<li><code>level1</code> : 了解游戏化的基本感念</li>
<li><code>level2</code> : 想游戏设计师一样去思考，学会判断场景是否适用</li>
<li><code>level3</code> : 了解用户的动机，如何最有效的去驱动用户</li>
<li><code>level4</code> : PBL 与游戏的动机、机制、组件等基本元素</li>
<li><code>level5</code> : 如何整合元素使得游戏化更加有效</li>
<li><code>level6</code> : 理性思考：游戏化的风险</li>
</ul>
<blockquote>
<p>下面一个个认识与颠覆。你觉得你理解的，其实都是零碎的感觉。</p>
</blockquote>
<h3 id="leve1-什么是游戏化"><a href="#leve1-什么是游戏化" class="headerlink" title="leve1 什么是游戏化"></a>leve1 什么是游戏化</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>游戏化的目标不是建立一个完备的游戏，他主要是指： “在非游戏情景中使用游戏元素和游戏设计技术” 。</p>
<p>这里有三个重要感念，<code>游戏元素</code>， <code>游戏设计技术</code>， <code>非游戏场景</code>。一个个来看~</p>
<ul>
<li><strong>游戏元素</strong>：</li>
</ul>
<p>一个游戏有很多元素组成。一般分为对象，关系，和规则。这里还有很多细分属性。我们可以把它当做我们我们设计游戏的一个工具箱。这些工具很重要。因为游戏化的关键就是将游戏元素应用到非游戏的活动之中。</p>
<blockquote>
<p>比如排行榜，是一个现在几乎被每个社交平台都使用的元素，良好的场景可以更好的激发员工的工作积极性。这个后面有更详细的描述。</p>
</blockquote>
<ul>
<li><strong>游戏设计技术</strong>：</li>
</ul>
<p>游戏设计技术要解决的是， <strong>改如何决定哪些游戏元素应用在哪里，如何使得整个游戏化体验大于各个元素之和</strong></p>
<blockquote>
<p>首先要明确的观点是，游戏化设计真的很难，否则世界大型游戏公司如索尼也不会时不时的损失几百万美金去开发一款失败的游戏。</p>
</blockquote>
<p>在别的场景适用的游戏元素，不是搬到另外一个地方就会变成自己的游戏化场景。游戏设计师需要接解决 <code>为何做</code> 和 <code>如何做</code> 这两个关键问题（其实做产品不就是要解决这两个问题么~）。除了需要一些技巧和技术，那些来之不易的关键失败经验，也会给我们提供宝贵的提示。</p>
<ul>
<li><strong>非游戏场景</strong></li>
</ul>
<p>游戏化有基本三大实践类型：内部游戏化，外部游戏化，行为改变游戏。</p>
<blockquote>
<p><strong>内部游戏化</strong>：企业内部实行，员工就是你的玩家，目标是提高生产效率，企业创新等等。<br><strong>外部游戏化</strong>：玩家是你的顾客，你希望通过游戏化提升客户的参与度，对产品的认同度，并最终提升盈利。<br><strong>行为改变游戏</strong>：旨在帮助大家养成更好的习惯</p>
</blockquote>
<p>我们做游戏化一定会有一些商业目的和社会目的。而用户也有自己的需求。所以在游戏化的过程中如何平衡这两者，对游戏元素进行合理的利用就显得尤为重要。</p>
<h4 id="为什么游戏化很有意义"><a href="#为什么游戏化很有意义" class="headerlink" title="为什么游戏化很有意义"></a>为什么游戏化很有意义</h4><p>游戏化的意义体现在以下三点核心价值：</p>
<ul>
<li><strong>提高参与</strong>：</li>
</ul>
<p>游戏化可以通过激励等游戏元素满足人们的被看见，被反馈的渴求，提升人们的参与度。而参与度的提升会存成消费。</p>
<blockquote>
<p>这里有个一很相关的概念叫做 <code>鸡蛋理论</code> or <code>宜家效应</code><br>源于消费者的一种行为特征，我们对于一个物品付出的劳动或者情感越多,,就越容易高估该物品的价值。</p>
</blockquote>
<ul>
<li><strong>实验</strong>：</li>
</ul>
<p>游戏化中人们可能因为激励开展出游戏设计的时候根本无法想象的可能性。</p>
<ul>
<li><strong>成果</strong>：好的游戏化是会带来很好的效果。</li>
</ul>
<h3 id="level2-游戏化思维，像游戏设计师一样思考"><a href="#level2-游戏化思维，像游戏设计师一样思考" class="headerlink" title="level2 游戏化思维，像游戏设计师一样思考"></a>level2 游戏化思维，像游戏设计师一样思考</h3><blockquote>
<p>这里出现一个很关键的点 <code>乐趣</code></p>
</blockquote>
<h4 id="什么是游戏和游戏化思维"><a href="#什么是游戏和游戏化思维" class="headerlink" title="什么是游戏和游戏化思维"></a>什么是游戏和游戏化思维</h4><p>不知道你是否记得一度在有土鳖上很火的楼梯钢琴，人们为了这种乐趣会放弃做电梯。这就是有趣的力量。甚至还有一个理论就叫 <code>乐趣理论</code></p>
<p>而游戏化思维就是：<strong>以一种有计划，有方向的方式来获得乐趣的思维</strong></p>
<p>而我们要做的利用这种思维，创造出引人入胜的体验，<strong>从而驱动玩家做出你想要的行为</strong></p>
<p>游戏能做很多事：</p>
<ul>
<li>鼓励你解决问题问题</li>
<li>保持用户进阶路上的兴趣</li>
<li>促进团队合作的乐趣</li>
<li>给玩家带来现实中很难有的掌控感</li>
</ul>
<p>但就和做产品一样，你需要像了解你的用户一样了解玩家，知道他们<code>使用购买你的产品的根本原因是什么</code> </p>
<blockquote>
<p>我们要避免玩家思维，因为两者是完全不同的。</p>
<ul>
<li>玩家思维是为了<strong>赢</strong></li>
<li>设计者是为了吸引玩家去玩<br>就想一个有限的游戏和无限的游戏。推荐阅读（《有限和无限的游戏》）</li>
</ul>
</blockquote>
<p>对我们来说，因为游戏是一个过程，而不是一个结果。在游戏的过程中要去把控玩家的心理，要在游戏中赋予他们掌控感，因为这是他们选择游戏的很重要的原因之一。</p>
<p>但游戏化并不能解决所有问题，所以我们在决定是否使用游戏化的时候要考虑下面四个问题：</p>
<h4 id="四个问题"><a href="#四个问题" class="headerlink" title="四个问题"></a>四个问题</h4><ul>
<li>1 动机： 如何从被激励的行为中获取价值？</li>
</ul>
<p>这个问题很关键，要学会去判断该不该使用游戏化思维，比如苹果的顾客已经很有热情的情况下使用游戏化机制，可能会降低品牌销售</p>
<ul>
<li>2 有意义的选择：你设置的目标活动都是有趣的么？</li>
</ul>
<p>选择是否给玩家带来乐趣。他们是否有掌控感，能发挥自主意识，感受到参与感。用户得到了自己想要的反馈才会在新鲜感过去之后努力继续玩下去。</p>
<ul>
<li>3 结构：预期的行为可以被固定的程序模式化么？</li>
</ul>
<p>游戏需要有量化的指标衡量游戏的质量和用户的行为。</p>
<ul>
<li>4 潜在的冲突：游戏可以避免与现有激励机制之前的矛盾么？</li>
</ul>
<p>你现在的游戏化排行榜，与公司内部的会员奖励机制冲突么？</p>
<p>理想的游戏化是需要上面四个因素同时生效，但其中最重要的<code>是给用户更加有意义的选择</code></p>
<p>同时我们要学会区分哪些事情可以做游戏化，哪些不可以。强加游戏化可能适得其反。要多问问自己 <strong>游戏化能达到什么需求，为什么要达到这种需求</strong></p>
<h3 id="level3-内部动机和外部动机"><a href="#level3-内部动机和外部动机" class="headerlink" title="level3 内部动机和外部动机"></a>level3 内部动机和外部动机</h3><blockquote>
<p>这里有另外一个关键词 <code>动机</code>; 到底是什么在东西在驱动这人们开始去做一些事？</p>
</blockquote>
<h4 id="两种动机"><a href="#两种动机" class="headerlink" title="两种动机"></a>两种动机</h4><p>动机是一个活动产生的基础。可以很直白的分为两种：内在动机和外在动机。</p>
<ul>
<li>想做某件事儿的冲动，是内在动机</li>
<li>不得不做莫一件事儿的感觉，是外在动机</li>
</ul>
<p>这是两种截然不同的态度，决定了你对一件事儿的热情，参与程度与忠诚度。</p>
<p>行为主义心理学家认为增强外部动机是激励人们行动的途径。而自我决定理论则专注于则将将行为归咎于人们的内在需求。</p>
<p>自我决定理论将人们的需求分为3类：</p>
<ol>
<li><strong>能力需求</strong>：又被成为掌控力。意味着积极处理与外部环境关系的能力</li>
<li><strong>关系需求</strong>：希望与其他人构建关系，沟通的渴望</li>
<li><strong>自主需求</strong>：想一想做的是自己喜欢的事情的那种发自内心的愉悦感</li>
</ol>
<p>（这总让我想起马斯洛的层次需求理论。反思的点是，我只是听过，从没看过）</p>
<p>想想我们为什么玩游戏，没有人强迫，我们自愿参加。因为游戏给到我们一段过程，让我们满足到我们的自主决定系统。</p>
<p>当然不是说外部动机不重要。想想《头号玩家》中为了彩蛋激励而疯狂的玩家，再比如游戏比赛中的奖金。这些都是强大的外部动机。</p>
<p>问题在于，<strong>游戏设计者需要决定激励哪里一个层次的动机，以及如何激励</strong>。</p>
<p>我们需要认识到游戏不仅仅应该是一堆苍白激励的组合。他要能够满足玩家的需求，让他们感到愉悦，以此形成一种内在动机，驱动这他完成我们的想要他完成的动作。</p>
<blockquote>
<p>我不玩微博，因为没人搭理我，满足不了我的关系需求，自主需求。他给我钱，我会玩（当然不可能）。但是一旦停止给钱，我就会离开。这也是我为什么会放弃朋友圈去玩即刻。所以我觉得即刻的产品对人性的洞察绝对是很高的水平。很多事他们看破不说破，看着我们逐渐产生粘性，丰富社区。</p>
</blockquote>
<p>外在激励可能会让内在动机失效，我们要做的始终是让参与度提高，这一点几乎没有捷径可以走。正如下面五个游戏化的经验教训说的那样。</p>
<h4 id="五个游戏化的教训"><a href="#五个游戏化的教训" class="headerlink" title="五个游戏化的教训"></a>五个游戏化的教训</h4><ul>
<li><strong>1 奖励会挤出乐趣</strong></li>
</ul>
<p>不要盲目的将外在动机附着在内在动机上。</p>
<p>挤出效应：外在奖励会显著降低玩家的内在动机。（有一本书很好的总结了过分奖励的现象《奖励的惩罚》）</p>
<p>在做一件有趣的事情的时候，如果外在奖励可预期，实实在在，内在动机就会慢慢消失。</p>
<blockquote>
<p>举个例子：当你读书是为了获取某些外部奖励，钱，点赞，认可，吹捧。你在读书的时候，就只是想着这些事情。慢慢感受不到读书的乐趣。当外部奖励一旦停止，你就不愿意再去读一本书。</p>
</blockquote>
<ul>
<li><strong>2 外在动机适合本质上不有趣的项目</strong></li>
</ul>
<p>用户从事漫无目的的工作的时候，外在动机可以产生积极的效果。</p>
<ul>
<li><strong>3 协调你的反馈</strong></li>
</ul>
<p>反馈是成功游戏的必要不充分条件，但有三条经验。</p>
<p>1 变量奖励方案：用户喜欢意想不到的惊喜。<br>2 用户希望在他自己表现如何上得到反馈。<br>3 用户可以根据提供的标准调整自己的行为。<br>如果你将标准定为用户满意度而不是销售额，那么员工也会开始重视用户满意度。</p>
<ul>
<li><strong>4 整合内外动机</strong></li>
</ul>
<p>外在动机可以被整合成内在动机。</p>
<p>不得不去做的游戏任务，可以因为排行榜或者徽章的存在变成可以炫耀，可以融入更大社群的一部分而内化成内在动机系统的一部分。</p>
<p>不得不完成的作业，也会以为想登上学校的排行榜，获取同学的羡慕而逐渐内化为内部动机。</p>
<ul>
<li><strong>5 不作恶</strong></li>
</ul>
<p>想起谷歌。游戏化是一种通过为人们提供真正意义上愉快的方式来是想自己的目标思维。</p>
<p>不要忘了自己的初衷。</p>
<h3 id="level4-游戏元素：你知道的PBL只是很小的部分"><a href="#level4-游戏元素：你知道的PBL只是很小的部分" class="headerlink" title="level4 游戏元素：你知道的PBL只是很小的部分"></a>level4 游戏元素：你知道的PBL只是很小的部分</h3><h4 id="熟悉的PBL"><a href="#熟悉的PBL" class="headerlink" title="熟悉的PBL"></a>熟悉的PBL</h4><p>点数（points）、徽章（badges）、排行榜（leaderboards）几乎是现在游戏的标配。如果使用得当当然可以发挥巨大潜能。前提是了解他们的优缺点。</p>
<ul>
<li><p><strong>点数</strong>： 给用户体用反馈，积分，成就，构建和外在奖励之间的关系，同时也可以给游戏设计师提供玩家行为数据。</p>
</li>
<li><p><strong>徽章</strong>： 点数的集合，具有很大的灵活性。可以给用户提供游戏方向，也可以传达玩家关心什么，可以给玩家一种虚拟的认同感。</p>
</li>
</ul>
<p>不同的徽章代表着想要你完成的不同任务。所以徽章几乎是无限灵活的。</p>
<ul>
<li><strong>榜单</strong>：榜单是最好也最难应用的。可以是激励机制，也可能是打击机制。但是排行榜也可以多中多样，可以在不同维度去鼓励玩家去进行竞争。</li>
</ul>
<p>PBL很容易想到，有巨大的价值，但也不是唯一途径。超越PBL ，才可以获得游戏化的最大价值。</p>
<h4 id="DMC-动力、机制与组件。"><a href="#DMC-动力、机制与组件。" class="headerlink" title="DMC: 动力、机制与组件。"></a>DMC: 动力、机制与组件。</h4><p>三个层面的概念。组件形成机制，机制影响动力。我们刚刚说的PBL，只是组件的一部分而已。</p>
<ul>
<li><strong>动力</strong>：<code>约束</code>，<code>情感</code>，<code>叙事</code>，<code>进展</code>，<code>关系</code>。使我们需要考虑的抽象的概念。但是没法直接应用在游戏中。但却是游戏的顶层设计。</li>
<li><strong>机制</strong>: 是推进游戏进程的基本流程。有以下十种常用机制。<br><code>挑战</code>， <code>机会</code>，<code>竞争</code>，<code>合作</code>，<code>反馈</code>，<code>资源获取</code>，<code>奖励</code>，<code>交易</code>，<code>回合</code>，<code>获胜状态</code>。<br>每个机制都是对一个或者多个动力系统的实现。比如随机的奖励（情感），比如合作（<code>关系</code>）</li>
<li><strong>组件</strong>：PBL只是其中的一部分。每个组件也会都与一个或者多个机制元素相关联。下面是15个重要的组件元素：<code>成就</code>，<code>头像</code>，<code>徽章</code>，<code>打怪</code>，<code>收集</code>，<code>战斗</code>，<code>内容解锁</code>，<code>赠予</code>，<code>排行榜</code>，<code>等级</code>，<code>点数</code>，<code>任务</code>，<code>社交图谱</code>， <code>团队</code>，<code>虚拟商品</code></li>
</ul>
<p>他们其实是一个金字塔的分层关系，我们要更具自己想要实现的目标，采用合适的组件，组合创造一个引人入胜的游戏服务。PBL不是所有在所有的工作任务都适用。</p>
<p>但是要如何组合？就是下一层级作者要告诉我们的。建立游戏的6个步骤。</p>
<h3 id="level5-构建游戏化系统的6大步骤"><a href="#level5-构建游戏化系统的6大步骤" class="headerlink" title="level5 构建游戏化系统的6大步骤"></a>level5 构建游戏化系统的6大步骤</h3><h4 id="1-明确商业目标"><a href="#1-明确商业目标" class="headerlink" title="1 明确商业目标"></a>1 明确商业目标</h4><p>这其实是告诉我们要<code>以终为始</code>。我们必须明白游戏化的特定目标。这个其实和产品的思维一致。在《用户体验要素》一书中就是 <code>战略层</code>的内容。指定目标的流程如下如四个步骤。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/jrs72o6pw7fblgbgn2yt7hhq/image_1cat06ucc1kov127g1tt27tm1a2l9.png" alt="image_1cat06ucc1kov127g1tt27tm1a2l9.png-18.4kB"><br>删除机制是为了更加重要的基础的目标必须确保完成。<br>明确目标之后<strong>请在每个目标后加上如何让你的企业or产品收益</strong></p>
<h4 id="2-规划目标行为"><a href="#2-规划目标行为" class="headerlink" title="2 规划目标行为"></a>2 规划目标行为</h4><p>我们要为我们要达成的目标设定<strong>明确的</strong>用户的<code>目标行为</code>。<br>这些行为最好可以通过一些有些组件，如点数，进行量化。</p>
<p>同时要确保用户可以不断的玩下去，而不是因为摸个获胜状态就结束游戏。等级一级难度的不断提升是一个值得考虑的方式。</p>
<p>最后我们要学会如何分析这些用户数据用于不断改进游戏的设计。比如DAU; GMV等等，这还是要看你的目标。要相互匹配。</p>
<h4 id="3-描述你的用户"><a href="#3-描述你的用户" class="headerlink" title="3 描述你的用户"></a>3 描述你的用户</h4><p>明确你的目标用户，为不同的而用户心理可以设置不同的游戏化功能。拿魔兽世界距离，有人喜欢组队打怪，有人喜欢一个人探索。</p>
<p>有人将用户区分成：<code>成就者</code>（收集徽章)，<code>探险家</code>(独自探寻) ，<code>社交家</code>（在线互动），<code>杀手</code>（取胜）。我们多多少少都有这些特质在身上，好的游戏化产品要给这些人以空间。</p>
<p>另外在游戏化中，我们要考虑到玩家的生命周期，要给 <code>新手</code>，<code>熟练玩家</code>，<code>专家</code> 以不同的兴奋点。</p>
<h4 id="4-制定活动周期"><a href="#4-制定活动周期" class="headerlink" title="4 制定活动周期"></a>4 制定活动周期</h4><p>游戏化的发展有两种模式，一种是参与回路，一种是进阶。</p>
<p>参与回路中最重要就是反馈，例如在社交中，人们发出行为如果获得反馈，然后会继续这么做。朋友圈的每次的红点都值得期待，即刻中的每次黄色信封也令人期待。这里 <strong>反馈的随机性很重还要</strong><br>但游戏中不能这样，如果第1次反馈和第100次都一样，玩家就会失去兴趣。</p>
<p>所以就有了第二种，进阶。一级一级增加难度。每一关都不一样。每一层的奖励也随机。惊喜不断。参与度就会很高。</p>
<h4 id="5-不要忘了乐趣"><a href="#5-不要忘了乐趣" class="headerlink" title="5 不要忘了乐趣"></a>5 不要忘了乐趣</h4><p>游戏最重要的那一点，你应该没有忘记，要有趣。<br>你问问自己，当你的游戏没有激励的时候，你还会不会去玩。</p>
<h4 id="6-部署适当工具"><a href="#6-部署适当工具" class="headerlink" title="6 部署适当工具"></a>6 部署适当工具</h4><p>你需要有工具，有拥有不同技能的伙伴帮你去分析游戏化的有效性，帮助你不断提升对玩家行为的理解。不断优化的你系统。也就是说你要不断去分析游戏化产生的反馈。</p>
<h3 id="level6-避免那些让游戏失败的陷阱"><a href="#level6-避免那些让游戏失败的陷阱" class="headerlink" title="level6 避免那些让游戏失败的陷阱"></a>level6 避免那些让游戏失败的陷阱</h3><p>前面废话太多，最后一章就是三点总结~</p>
<ul>
<li>注意让游戏真正有趣，而不是只靠外在激励。那样游戏可能昙花一现。无法帮你达成目标。</li>
</ul>
<p>不要把游戏化当成一个简单的营销工具。想办法让用户因为内在动机而持续的玩下去。</p>
<ul>
<li>不要违反法律，隐私，知识产权等，在中国，你还需要。。。。</li>
<li>要记住让你玩家有掌控感</li>
</ul>
<h3 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h3><p>整本书在告诉我们如何使用游戏化思维，来使我们玩家能够更多由于自己的内在动机的驱使，完成我们想让他完成的任务。</p>
<p>全书的重点我觉得在前四章。前四章的重点在前两章。因为重点是理解什么是游戏化思维。后面介绍的是实用的工具与方法。</p>
<p>当然不是说方法不重要，但是思路对了，才有可能作对事情。毕竟做产品，还是问问，你为什么要做这件事。</p>
<p>玩游戏最重要就是，你找到了自己想要的乐趣。（也许我错了）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本书读起来真的很巧。前一天我听说这本书，然后我下了单。第二天书到了，然后我去看了《头号玩家》，我觉得我对游戏的认知总是差一些。感知不到那份乐趣，让我有一些失落。在我的小时候基本和游戏绝缘，我也一直认为游戏没什么用。浪费时间而已。而这本书改变了我的认识，游戏是一门很深的学问，游戏化的作用也超乎我的想象。&lt;/p&gt;
&lt;p&gt;当时我的不屑一顾，我现在反思起来，只是自我保护：1 我玩不到， 2 我玩不好。 （打脸承认这些事儿）&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="个人提升" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%8F%90%E5%8D%87/"/>
    
      <category term="产品思维" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>2018 读书进度更新</title>
    <link href="http://yoursite.com/2018/04/08/2018-%E8%AF%BB%E4%B9%A6%E8%BF%9B%E5%BA%A6%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2018/04/08/2018-读书进度更新/</id>
    <published>2018-04-08T09:44:39.000Z</published>
    <updated>2018-04-12T15:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在读图书："><a href="#在读图书：" class="headerlink" title="在读图书："></a>在读图书：</h3><h4 id="A-认知提升-："><a href="#A-认知提升-：" class="headerlink" title="A 认知提升 ："></a>A 认知提升 ：</h4><p>这一些书有一些共同性；交叉阅读；体验更加深刻</p>
<p>《学会提问》 ： 进度 1/2</p>
<p>《有限与无线的游戏》：进度 2/3</p>
<p>《增长黑客》2本： 进度 2/5<br>《影响力》：进度 5/6</p>
<a id="more"></a>
<h4 id="B-睡前读物"><a href="#B-睡前读物" class="headerlink" title="B 睡前读物"></a>B 睡前读物</h4><p>睡前半小时读物：</p>
<p>《千面英雄》<br>《禅与摩托车的维修艺术》<br>《设计中的设计》<br>《乔布斯专》</p>
<h3 id="读书笔记账本："><a href="#读书笔记账本：" class="headerlink" title="读书笔记账本："></a>读书笔记账本：</h3><p>《投资中不简单的事》 </p>
<h3 id="已经完成"><a href="#已经完成" class="headerlink" title="已经完成"></a>已经完成</h3><p>《游戏化思维》<br>《高效能人士的7个习惯》<br>《原则》<br>《需求》<br>《用户体验要素》<br>《习惯的力量》<br>《如何阅读一本书》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在读图书：&quot;&gt;&lt;a href=&quot;#在读图书：&quot; class=&quot;headerlink&quot; title=&quot;在读图书：&quot;&gt;&lt;/a&gt;在读图书：&lt;/h3&gt;&lt;h4 id=&quot;A-认知提升-：&quot;&gt;&lt;a href=&quot;#A-认知提升-：&quot; class=&quot;headerlink&quot; title=&quot;A 认知提升 ：&quot;&gt;&lt;/a&gt;A 认知提升 ：&lt;/h4&gt;&lt;p&gt;这一些书有一些共同性；交叉阅读；体验更加深刻&lt;/p&gt;
&lt;p&gt;《学会提问》 ： 进度 1/2&lt;/p&gt;
&lt;p&gt;《有限与无线的游戏》：进度 2/3&lt;/p&gt;
&lt;p&gt;《增长黑客》2本： 进度 2/5&lt;br&gt;《影响力》：进度 5/6&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="个人提升" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>《高效能人士的7个习惯》读书笔记：被书名毁了的书</title>
    <link href="http://yoursite.com/2018/04/06/%E3%80%8A%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%847%E4%B8%AA%E4%B9%A0%E6%83%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%A2%AB%E4%B9%A6%E5%90%8D%E6%AF%81%E4%BA%86%E7%9A%84%E4%B9%A6/"/>
    <id>http://yoursite.com/2018/04/06/《高效能人士的7个习惯》读书笔记：被书名毁了的书/</id>
    <published>2018-04-06T10:53:38.000Z</published>
    <updated>2018-04-08T15:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>
<p>如果要我评选我看过的书中；被书名毁掉的好书排名，《7个习惯》应该是首当其中了；排名第二的我推荐《把时间当朋友》。这两本书的道理简单而深刻。坚持应用；一定会产生很好效果。无奈很多人都是只听过书名而已，然后就判断这是鸡汤文学。</p>
<a id="more"></a>
<p>说到鸡汤文学，我看过不少，大多数是在缓解你的焦虑；但这并不是我们将其视作是无用文章的理由。之所以鸡汤无用，只是你只喝汤而没有行动而已。</p>
<p>说回这本书；柯维博士这本书卖了25年依旧畅销，我想一定是有他的理由的。我记得刘润老师在他的《5分钟商学院》中说到，这是他此生参加过的最重要的培训；没有之一。也足够说明这本书的优点。</p>
<p>虽然我听过别人解读过很多遍；但是我现在越来越有一种感觉，别人解读的虽然好，但那都不是我的东西。我现在理解那些解读，都是推荐而已，别人的解读在你真的看过这本书之前，就是书的腰封而已。</p>
<p>所以；我决定认真的阅读这一本书；并且写下这些读书笔记。</p>
<h3 id="1-前言：-别为了更多金蛋去杀下金蛋的鹅"><a href="#1-前言：-别为了更多金蛋去杀下金蛋的鹅" class="headerlink" title="1 前言： 别为了更多金蛋去杀下金蛋的鹅"></a>1 前言： 别为了更多金蛋去杀下金蛋的鹅</h3><p>其实前言部分给我触动最大。因为他指出你要想达到自己的目标；你就必须要找到一些原则。并依据个人特点；应用好这些原则。</p>
<p>同时指出了我们都面对的痛苦的表现形式（而这正是我有的感觉）《原则》中也有提到相似的描述：</p>
<ul>
<li>我们从常常觉得恐惧和不安；</li>
<li>也总是缺乏耐心，想要急切的得到一件东西；</li>
<li>总是喜欢抱怨环境</li>
<li>容易绝望和无助</li>
<li>缺乏生活的平衡；总是处理不好家庭关系。</li>
<li>渴望理解；渴望被重视；但却不愿理解他人。只想表达自己。</li>
<li>最终导致分歧；并让自己停滞不前。</li>
</ul>
<p>但是如果要改变；也只能自己打开那扇“只能向内打开的” 改变之门。我们有能力改变自己的习惯（《习惯的力量》是很好的教材）<br>但是改变必须付出痛苦；因为“得之太易者必不珍惜”</p>
<p>作者告诫我们由内而外的改造自己的品德成功论，是通往成功正确的道路。我们要改变自己希望速成的思维定式。<br>首先是承认自己的无知；然后才能学习去改变自己对问题的看法；才能改变自己；才能改变环境。</p>
<p>同时我们要认识到效能原则；注意产能与产出的平衡；提醒我们我们要平衡短期与长期利益。这个效能原则是后面7个习惯的基础。</p>
<p>“不要为了金蛋而去杀鹅”</p>
<h3 id="2-习惯一：积极主动；你可以改变那些你认为你无法改变的"><a href="#2-习惯一：积极主动；你可以改变那些你认为你无法改变的" class="headerlink" title="2 习惯一：积极主动；你可以改变那些你认为你无法改变的"></a>2 习惯一：积极主动；你可以改变那些你认为你无法改变的</h3><p>人与动物之间的差别就是我们可以“思考自己思考的过程”；他帮助我们客观的看待自己的行为；进而更好的了解他人。</p>
<p>积极主动的可以分开看： “积极” 和 “主动”；<br>我的理解就是；<code>主动选择积极的态度与做事方式</code>。</p>
<blockquote>
<p>真正的伤害；不是伤害本身；而是我们回应这些伤害的方式。<br> 积极主动的人对刺激理性的做出符合价值观的选择；不受外部环境的影响。<br>因为“除非你愿意没有人能伤害你”；我们有主动权；有能力选择出更加积极处理方式。</p>
</blockquote>
<p>多从自身的问题出发；积极主动的思考和解决问题。警惕平时我们言语透露出来的消极与被动。<br>我们要听听自己平时说的话；看看自己是否总是将选择归咎于环境与他人，而不是自己主动做出选择。<br>比如；要是老板真的懂就好了；要是我有时间就好了。都是在推卸责任给外部；而不是主动承担。</p>
<p>积极主动不是胆大妄为；而是像“斯多葛派的哲学”那样；更加切合实际，懂得在在自己可以控制的范围内积极的面对；做到最好。<br>而对于不能改变的泰然处之。</p>
<h3 id="3-习惯二：以始为终；没有目标，你的焦虑无处安放"><a href="#3-习惯二：以始为终；没有目标，你的焦虑无处安放" class="headerlink" title="3 习惯二：以始为终；没有目标，你的焦虑无处安放"></a>3 习惯二：以始为终；没有目标，你的焦虑无处安放</h3><blockquote>
<p>以始为终；先就是确定方向与目标；然后依据你的价值观和原则坚持做下去。</p>
</blockquote>
<p>时刻要记住；我们希望成为什么样的人。因此当务之急是什么。如果你先确定了目标；你的洞察力会大大改善。你会忽略当前环境的干扰。</p>
<p>任何事物都需要两次创造；一次头脑；一次行为上的。做事如此；创业如此；教育子女也是如此。人生也是如此。我们要成为自己的第一次创造者。确认自己的方向与目标。</p>
<p>作者书中拿领导与管理举例：领导关心的是“做正确的事”；而管理关系的是“正确的做事”；领导确定方向和目标；是第一次创造。而管理负责执行，是第二次创造。如果梯子搭错了墙；爬的再快也是枉然。<br>为了更好的以始为终；最好的方式是撰写自己的使命宣言。即将自己的价值观；目标；以及处事的原则写下来。日后做事；最好就以原则为中心；这样；我们可以不被外部环境干扰；可以获得稳定的安全感。人生也会充满力量与智慧。<br>如果我们以他人为中心；或者以自我为中心的话，就会情绪起起落落；缺乏固定的人生方向。也不会活的稳定的安全感。这是人生最大的痛苦之一。<br>所以以终为始；就是先确定目标与方向；然后将它与以后要遵守的原则与价值观写下。以他们为自己<br>的生活中心。就能建立高效的思维定式。</p>
<p>我们需要积极主动的选择；做自己的人生剧本的第一次创造者；然后以始为终；坚持原则的执行。并应用到自己生活的方方面面<br>（需要注意的是；原则是不变的；但是对原则理解可以改变）</p>
<p>我要去写我自己的角色与个人使命宣言了~</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/oyqx4b2xu8p78t8u16vo6bit/image_1caibtanha1i9u1cok18fk1hk99.png" alt="image_1caibtanha1i9u1cok18fk1hk99.png-303.2kB"><br>( 我在公司看这本书，大家纷纷表示自己也有，从来没看过，我现在想，为他们可惜。因为他们总想忙完这一阵…然而，每一阵都是这一阵</p>
<h3 id="4-习惯三：要事第一：-自我管理的原则"><a href="#4-习惯三：要事第一：-自我管理的原则" class="headerlink" title="4 习惯三：要事第一： 自我管理的原则"></a>4 习惯三：要事第一： 自我管理的原则</h3><blockquote>
<p>要事第一就是指的是要对自己进行有效的管理；就是自律与条理。</p>
</blockquote>
<p>你需要通过你积极主动的思考；以始为终的设置你的个人使命与原则；然后；按照你的角色，目标，与原则；来确定什么是重要的事。<br>为此你需要能够利用你的独立意识；控制非理性冲动；使自己的行为服从你的个人价值观。学会对不重要的事勇敢的说不。</p>
<p>可以利用时间管理四象限；将自己从琐事中抽离出来；不要尝试管理时间（你无法管理时间）；你只能控制自己。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/ob1l7o2m1lj2mz93ci6x7ani/image_1caic0uqk1b5cgarr88oepvptm.png" alt="image_1caic0uqk1b5cgarr88oepvptm.png-234.8kB"></p>
<p>第二类事务是重要而不紧急的事；这不仅仅是我们需要花费精力最多的部分；更重要的，他也是一种思考事情的角度与方法。 德鲁克说过：“高效能人士脑子里装的不是问题；而是机会”；即使遇到问题；也要尝试与第二类事务的角度思考：是否可以做一些日后预防的或者根本性的措施；避免头疼医头脚疼医脚。</p>
<blockquote>
<p>有一本书叫《灰犀牛》；用了一本书的篇幅；其核心思想就是多做第二类事；在重要而不紧急的事情编程紧急的事情之前；做好预防和准备。</p>
</blockquote>
<p>作者给出了训练以要事（第二类目标）为中心的思维定式的关键步骤，一周为维度；</p>
<ul>
<li>1 确定角色；（不同角色不同目标不同任务）</li>
<li>2 确定每个角色的周目标；（一定要有几个第二类目标）</li>
<li>3 为每一项目标安排进度</li>
<li>4 每日调整（所以并不死板；也避免的每日计划）</li>
</ul>
<p>接下来的事就是根据你自己的原则为中心；将计划付诸实践。<br>这样做可以帮你确认自己的目标；平衡自己生活；将人际关系和结果放在第一位；避免做管理时间的无用功。</p>
<p>总结起来就是：要从重要性而不是紧迫性的角度来观察一切事物；同时在一些特殊情况下懂得的因人而异的变通也是不可缺少的。</p>
<p>（这本书我读的很仔细；不像我读其他书总想一次性读完；如果不实践；那就是白读了。明天是周日；我之前发的动态；日历排列从周日开始；就是为了给我们做一周计划用的吧 🤔）</p>
<h3 id="5-习惯四：双赢思维-，人际领导的原则"><a href="#5-习惯四：双赢思维-，人际领导的原则" class="headerlink" title="5 习惯四：双赢思维 ，人际领导的原则"></a>5 习惯四：双赢思维 ，人际领导的原则</h3><p>人际交往有六种模式，利人利己，损人利己，两败俱伤，独善其身。舍己为人，好聚好散。<br>无疑，现实生活中，双赢一定是最好的模式。</p>
<blockquote>
<p>因为，长远来看，没人愿意会永远吃亏，所以不是双赢，就会两败俱伤。</p>
</blockquote>
<p><code>长期的赢输模式，会在平静的外表下，积累很深的压抑的情绪。</code></p>
<p>这里我想起一个万维刚老师说过的一个毛利人的故事。充分的说明这点。<br><img src="http://static.zybuluo.com/zhumin1990719/yxt7qr4wr8xg519dr7qmshhk/image_1caic84od1d02rrk1jau48d6gm13.png" alt="image_1caic84od1d02rrk1jau48d6gm13.png-185.2kB"></p>
<p>那如何双赢呢？作者给出了五个要领。</p>
<ul>
<li>1 双赢品德</li>
</ul>
<p>分为三个，<code>诚信</code>，<code>成熟</code>，和<code>知足</code>。<br>诚信不用说，作者对于成熟的定义很绝<br>“成熟就是敢作敢为和善解人意之间的一种平衡”<br>其实也就是平衡产能和产出。找到平衡点，是双赢的基础<br>知足，更多是一种富足的心态，他相信资源充足，人人有份。不会因为别人得到而极度。</p>
<ul>
<li>2 双赢关系</li>
</ul>
<p>这里说的是你的人情账户。当你有了双赢品德，时间会帮你积累出充足的情感账户。这是你双赢的基础之一。甚至，有时候，这些人会因为充分的信任，即使反对你，也会真心帮助你。<br>(这一点，在我们的产品很技术，视觉需求中，都是很重要的，我体会也很深刻。我看着其他产品不顾一切打成自己需求，而不注意自己的信任账户透支，后面需求评审的时候，可能连说需求的机会都没有，很多时候，都是因为不成熟，不从别人的角度考虑问题。)</p>
<ul>
<li>3 双赢协议 </li>
</ul>
<p>有了关系，通过落地的协议，去绩效，奖惩。可以将从属关系变为合作关系，上级监督变为自我监督。让人注重结果，激发自我驱动力。</p>
<ul>
<li>4 双赢体系</li>
</ul>
<p>双赢体系存在，双赢才能存在。<br>因为，体系中鼓励什么，你就会得到什么。<br>这里很多常见例子，都是倡导双赢，却奖励赢输。。</p>
<ul>
<li>5 双赢过程</li>
</ul>
<p>关键是将人和利益分开，注重利益而不是立场。要创造出大家都能获益的方法。<br>分为四个步骤，</p>
<ol>
<li>从对方角度看问题，</li>
<li>认清主要问题和顾虑(不是立场)</li>
<li>找到大家都能接受的结果</li>
<li>找到解决途径<br>(我在工作中，看到各种斯资源，其实就是只想要自己获利的赢输思维，有时候，付出也不是真心。立场不同，不看利益，却张口说别人”格局太小”，只能哑然)</li>
</ol>
<p>但是现实生活中，有些情况，就是和零和游戏，就是无法双赢，也没必要勉强。<br>所以作者说，如果<code>不能双赢，就不如好聚好散</code>。</p>
<h3 id="6-习惯五：知彼解己-移情沟通的原则"><a href="#6-习惯五：知彼解己-移情沟通的原则" class="headerlink" title="6 习惯五：知彼解己 - 移情沟通的原则"></a>6 习惯五：知彼解己 - 移情沟通的原则</h3><blockquote>
<p>一句话：要想让自己与他人的沟通更加有影响力；要首先通过移情来理解他人。</p>
</blockquote>
<p>我们现在大部分人的问题就是自以为是；不喜欢花时间去深入的了解问题；会联想到自己的经历；给出“善意”的建议；试图快刀斩乱麻的解决问题。<br>所以沟通的时候要警惕四种自传式回应</p>
<ul>
<li>1 价值判断 ： 对别人的意见只有接受或者不接受</li>
<li>2 追根求底 ：依自己的价值探查别人的隐私。</li>
<li>3 好为人师 ：以自己的经验提出忠告（这种错误我常犯）</li>
<li>4 自以为是 ：以自己的行为和动机去衡量别人的行为和动机</li>
</ul>
<p>事实是；在与人交流时；你如果想影响我；一定是理解我的人。一定是一个可以耐心聆听我们的人。而大部分人聆听只是为了做出回应。<br>但只有通过移情聆听；理解他人诉求和苦衷；我们影响力才能发挥作用。同时；这也是情感投资的最好的方式之一。<br>这并不容易；因为在影响对方之前；你必须先被影响（因为你要真正理解对方）；所以之前说的以原则做事；积极主动；要事第一；以终为始；是自己内心的壁垒。</p>
<p>一个简单的例子；心情不好的时候；如果有一个人在旁边善解人意的倾听；我门 会坦诚到毫无保留的程度。这种投资；虽有风险，但绝对值得。</p>
<p>沟通的时候；也是有技巧可以遵循： 把品德和情感放在12位；而把我们左脑的理性推理放在第三位。<br>不要心急；耐心的理解别人的思路与担忧；表达的自己的态度和建议；你的可信度会大大增加。表达就是根据自己的对他人的理解诉说自己的观点。而理解他人的前提；就是用心聆听。<br>无论在汇报；答辩；或者1v1 中；都是适用的。</p>
<blockquote>
<p>反思一下：我平时有好为人师的毛病；在理解聆听父母的事情上做的不好。事实上，我理解他们。但我我的父母在理解我的方面做的似乎也不够好。不知道，如果我先改变；他们会不会一起变化。</p>
</blockquote>
<h3 id="7-习惯六：-统合综效；"><a href="#7-习惯六：-统合综效；" class="headerlink" title="7 习惯六： 统合综效；"></a>7 习惯六： 统合综效；</h3><blockquote>
<p>实质是尊重差异、建立优势并弥补弱点</p>
</blockquote>
<p>这个习惯；建立在前五个习惯之上。<br>统合综效就是实现整体大于部分之和。其中的原因是；作者认为；“关系”；也是整体的一部分；而且是最具激发力和创造力的部分～<br>统合综效的精髓；就是尊重差异取长补短。</p>
<p>要做到统合综效；有以下几点值得注意</p>
<ul>
<li>敞开胸怀；博彩众议</li>
</ul>
<p>接纳一切奇怪的想法；本身的原则给你安全感和自信；相信一切都会变得更好。当然；有创新要不怕失败；勇于尝试。（有些对失败根根于怀；再也不肯做第二次尝试）<br>这里其实很像《原则》里说的；拥有极度开放的头脑；不要自以为是；常常反问；你怎么知道，你自己就是对的呢？</p>
<ul>
<li>学会寻找第三条路</li>
</ul>
<p>当有冲突的时候；可以利用第5个习惯知彼解己；先理解他人；在表达自己；再利用第4个习惯；找到双赢的道路。为此你需要：从“非此即彼”的思路中走出来。<br>不要做嘴上说双赢；其实却想着控制别人的事儿。这就像开车的时候，想要前进；却不肯松开刹车；而一位的踩油门。后果是双输。<br>这样的人一般缺乏安全感；他们不知道关系中最宝贵的就是差异。因为<br>相同不代表统一；统一也不等于团结。<br>所以我们需要注意：</p>
<ul>
<li>尊重差异</li>
</ul>
<p>所见略同的沟通意义不大；有分歧才有收获。<br>与人合作最重要的就是通过习惯5知彼解己；重视和理解不同个体的才能；心理；以及他们眼中的世界。<br>千万不要成为自以为是的人；总以为自己最为可观<br>（这里我要反思自己；我再怼别人的时候；是不是也同样是这种心理？）</p>
<blockquote>
<p>要明白：两种完全不同的意见；也是都可以言之成理的。问题不在于逻辑；而在于心理；不要非此即彼</p>
</blockquote>
<ul>
<li>化阻力为动力</li>
</ul>
<p>动力积极合理；阻力不合逻辑；两者在现实中都存在；如果不设法削减阻力；之增动力；就像给弹簧加力；或者不松刹车的踩油门；迟早会反弹或者导致受伤。而你几次失败之后；就会产生很强的挫败感。<br>积极主动的找大家共同目标；知彼解己的理解他人；表达自己；告诉他们统合综效的好处是1+1&gt;2的双赢结局～<br>不要一开始；就用各种规则；心理；限制住统合综效的可能性。</p>
<h3 id="8-习惯七-不断更新"><a href="#8-习惯七-不断更新" class="headerlink" title="8 习惯七: 不断更新"></a>8 习惯七: 不断更新</h3><blockquote>
<p>不断更新：再小的事儿都是会产生惊人的效果</p>
</blockquote>
<p>这是第七个习惯；是最后一个习惯；像是一个提醒。不是看完六个习惯就想喝了杯六个核桃就结束了。不去实践；学习；再实践；是没有用的。<br>所以作者单独拿出一个习惯；目的是告诉我们要不断的更新自己。从来没有速成；也没有一步到位的方法。多多磨刀。<br>习惯七不断更新；指的就是不断提升自己的个人产能。从以下四个方面（都属于第二类事务：重要而不紧急）；均衡的不断提升：</p>
<ul>
<li>1 身体层面</li>
</ul>
<p>每周坚持3-6小时；有氧练耐力；伸展瑜伽练韧性；无氧肌肉运动练习力量。当然；你需要哪种练习；什么程度的联系；需要更具的环境来定。关键是不断的持续。<br>（说到这里我表扬下我自己；已经跑了1300km；每天50-70俯卧撑已经做了4个月；感觉不错）</p>
<ul>
<li>2 精神层面</li>
</ul>
<p>冥想；思考。反思。记住动机不纯则诸事不顺。<br>坚持冥想；我没有学习过；我就是坐着；注意自己的呼吸；听呼吸的声音。15分钟不算长。每次结束都很清醒。</p>
<ul>
<li>3 智力层面</li>
</ul>
<p>读书；每周读书。写作；强迫自己写下来自己的感悟（现在我有点屁事儿就写在即刻上）；通过输出；强迫自己理清自己的思路。强迫自己再看一遍刚刚看的内容。<br>多和别人交流；感受别人的思想；这里也可以利用习惯5知彼解己；不要肤浅只看实物表面；还是往里多看一样；多问一句为什么。</p>
<ul>
<li>4 社会，情感</li>
</ul>
<p>心理学说；关系就是一切。<br>我们的情感；源自于和他人关系；每个人都是社会镜的一部分；照出别人的样子；而大多数情况下；我们也是通过别人更好的认识我们自己。人与人之间的交往；都在我们日常点滴中；所以我们要将与他相关的公共关系的三个习惯：双赢思维；知彼解己；统合综效在生活中不断应用。尊重差异；详细有双赢的第三种可能。</p>
<p>每天都花费至少一小时来做123；这种投资是十分值得的；他会给你内在的安全感。让你的影响圈扩大。让你更好的在社会情感中相处；给你力量。因为你知道自己在不断变好。还有什么比这个更能激励你呢？</p>
<blockquote>
<p>（道理都是很简单；关键就是坚持。而是否能坚持下去，就看是否有回馈。是否有回馈；看你舍得目标是否合理；不要想一口吃成胖子；也不要想一次计划永远可以永远生效。）</p>
</blockquote>
<p>全笔记完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;如果要我评选我看过的书中；被书名毁掉的好书排名，《7个习惯》应该是首当其中了；排名第二的我推荐《把时间当朋友》。这两本书的道理简单而深刻。坚持应用；一定会产生很好效果。无奈很多人都是只听过书名而已，然后就判断这是鸡汤文学。&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="个人成长" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>《用户体验要素》读书笔记：要理解为何这样做产品</title>
    <link href="http://yoursite.com/2018/03/15/%E3%80%8A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%A6%81%E7%B4%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%A6%81%E7%9F%A5%E9%81%93%E8%BF%99%E6%A0%B7%E5%81%9A%E4%BA%A7%E5%93%81/"/>
    <id>http://yoursite.com/2018/03/15/《用户体验要素》读书笔记：要知道这样做产品/</id>
    <published>2018-03-15T11:32:43.000Z</published>
    <updated>2018-04-05T11:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/zhumin1990719/n5gn9nh2zap08s5fqhclvgy6/1351522926267_.pic.jpg" alt="1351522926267_.pic.jpg-84kB"><br>《用户体验要素》是一本实用类书，试图回答如何以用户体验为中心进行产品设计。作者通过构建自下而上的五层模型：战略层，范围层，结构层，框架层，表现层；来将以用户体验用户需求为中心的设计方式层次清晰的表达出来。并指出；一开始对战略层的深思熟虑，会帮助我们在整个产品设计中节约大量的时间。</p>
<p>作者这本书写于pc时代，大多案例都是网站的建设。但是整个思考产品的思路，直到今天；都没有过时。</p>
<a id="more"></a>
<h3 id="一、-以用户体验为中心设计产品"><a href="#一、-以用户体验为中心设计产品" class="headerlink" title="一、 以用户体验为中心设计产品"></a>一、 以用户体验为中心设计产品</h3><p>用户体验是指产品如何与外界发生接触，也就是用户如何接触和使用你的产品。这并不仅仅是你的产品外观如何设计，功能如何齐全；这些细节入微的细节，都显示出你做产品最本源的想法。</p>
<blockquote>
<p>你为什么要做这个产品？你是否真的想过用户的所想和所需。</p>
</blockquote>
<p>一个好的产品形态并不应该是功能特性而决定，而是”用户自身心理感受与行为”所决定的。<br>而当前；我们更多的是按照自己的喜好在做产品。</p>
<p>那如何以用户体验为中心设计产品呢？作者给出自己的模型答案。<strong>用户体验要素的五层设计模型</strong></p>
<h3 id="二、-五层模型"><a href="#二、-五层模型" class="headerlink" title="二、 五层模型"></a>二、 五层模型</h3><p>五层模型，通过分解以用户体验为中心的设计过程，更好的解决产品设计的问题。<br>从上而下分别是：</p>
<ul>
<li>表现层：如何将框架图以合适的视觉样式展现给用户</li>
<li>框架层：如何将结构层的功能以符合用户使用习惯的方式在页面上呈现</li>
<li>结构层：范围层确定的产品功能如何转化为有层次逻辑的产品</li>
<li>范围层：战略层定义的产品目标和用户需求提供用那些功能承载</li>
<li>战略层：产品目标和用户目标；我们想做什么；想给用户提供什么；我们为什么要做</li>
</ul>
<p>下面逐一介绍下几个层次；以及在在我个人产品经验中现实中的分工大概如何。</p>
<h4 id="2-1-战略层：目标"><a href="#2-1-战略层：目标" class="headerlink" title="2.1 战略层：目标"></a>2.1 战略层：目标</h4><blockquote>
<p>这一部分需要项目的产品经理或者领导经过一番调研工作后确定。</p>
</blockquote>
<p>做一件产品，要回答两个问题。</p>
<ul>
<li>我们做这件产品的目标是什么？</li>
<li>对应的用户需求是什么？用户能得到什么？</li>
</ul>
<p>我们在项目开始的初始；团队的成员就要对此有 <code>明确</code> 的认识。 对战略明确的认识会在后面的过程中提供一把标尺；引导我们按照正确方向走。<br>因为我们越是明确知道用户想从我们这里获取什么，我们就能够更好的服务他们。</p>
<p>产品目标可以是商业目标，赚钱；可以是达到品牌宣传的目的。为了确保我们达到了目标，我们还要指定衡量的指标。</p>
<p>为了了解用户需求，我们就要对用户进行分析的调研。先通过市场营销的手段细分用户，找到产品真正的目标客群（这很重要；也需要很客观；避免陷入幸存者偏差）；对在对用户进行场景化分析，以确定产品真正可能使用到的场景。</p>
<p>最后，这些需要落成文档；简介明了并切入要点。并让团队成员清晰的了解。</p>
<p>需要注意的是，战略并不是不可以修改。通过后续工作的开展；可以不断的演进。</p>
<h4 id="2-2-范围层：为了达成目标要提供什么"><a href="#2-2-范围层：为了达成目标要提供什么" class="headerlink" title="2.2 范围层：为了达成目标要提供什么"></a>2.2 范围层：为了达成目标要提供什么</h4><blockquote>
<p>依旧是产品经理要去想的事儿</p>
</blockquote>
<p>我们确认了目标，就要想想要提供哪些给用户，能满足他们的这些需求，能达到我们的产品目标。</p>
<p>这一层你要做三件事：</p>
<ul>
<li><strong>1 定义需求：</strong> 明白该做什么，不该做什么。</li>
<li><strong>2 定优先级：</strong> 明白什么是必须做的，什么可以缓一下。根据战略；技术实现难度时间成本来判断</li>
</ul>
<p>然后同样的；我们需要把这些需求点记下来；但不是精细到细节；而是将可能存在冲突的点记下来。<br>作者提供了几个原则，值得参考：</p>
<ol>
<li>乐观：永远描述如何防止错误的事儿，引导用户做出正确的行为，而不是描述“不应该这么做”</li>
<li>具体：一个功能点的具体要求要明确，因为不明确就会造成实现上的误解</li>
<li>客观：描述尽量使用意义明确的场景</li>
</ol>
<h4 id="2-3-结构层：提供的功能如何完整的结构化流程化"><a href="#2-3-结构层：提供的功能如何完整的结构化流程化" class="headerlink" title="2.3 结构层：提供的功能如何完整的结构化流程化"></a>2.3 结构层：提供的功能如何完整的结构化流程化</h4><blockquote>
<p>产品经理的活；有经验的交互有时候也会提供意见</p>
</blockquote>
<p>这就好比你把一个个确定好的功能点；整理成一个层次清晰的脑图。对每一个功能点需要一个完整流程图。</p>
<p><strong>对结构是否有质量的的标准是：用户是否功能的每一个步骤都是合理的。</strong></p>
<p>这里我们会产出一个可以给交互设计师的文稿。</p>
<h4 id="2-4-框架层：-结构层的具体化"><a href="#2-4-框架层：-结构层的具体化" class="headerlink" title="2.4 框架层： 结构层的具体化"></a>2.4 框架层： 结构层的具体化</h4><blockquote>
<p>主要由交互设计师操刀；产品把控方向</p>
</blockquote>
<p>这个阶段需要将结构层的变得清晰更加实在。在我们平时的产品设计中就是让交互出原型图。<br>（有时候；我们只有一个点子就让交互去做原型图；简直就是流氓啊）</p>
<ul>
<li>这个阶段，需要注意让设计尽量符合用户的习惯。</li>
<li>要注意突出重点；让人一眼看到重点的部分。</li>
<li>不要为了所有人的所有偏好做设计。（这与程序员要考虑所有异常不同）</li>
<li>在合适的地方权衡利弊用合适的组件。</li>
</ul>
<p>这里在平时的产品设计中会产生交互图；并交由视觉设计师；做表现层的设计。</p>
<h4 id="2-5-表现层：框架层的感知化"><a href="#2-5-表现层：框架层的感知化" class="headerlink" title="2.5 表现层：框架层的感知化"></a>2.5 表现层：框架层的感知化</h4><blockquote>
<p>视觉设计师主导；产品经理根据战略方向把控（你懂一些设计必要的）</p>
</blockquote>
<p>将交互稿交给设计师，根据用户感知和战略方向，做出产品的最终呈现形态。<br>视觉设计师不能仅仅考虑美学问题；也要考虑视觉设计有没有破坏产品结构，有没有帮助更好的完成战略目标。</p>
<ul>
<li>好的视觉设计忠于眼球；用户的眼球移动路径流畅。</li>
<li>通过差异和一致突出页面重点内容；但又不太杂乱。</li>
<li>注意内部一致性（同一个页面的设计语言是否统一）和外部一致性（同一个公司的设计语言是否统一）</li>
<li>配色和字体排版可以有差异化；不用为了统一而牺牲设计；但差异化要用户肉眼可以分别</li>
</ul>
<p>最终这一阶段；我们会产出视觉稿；结合之前的PRD；产出可给开发提需求的需求文档。</p>
<h3 id="三、一些听起来是废话的总结"><a href="#三、一些听起来是废话的总结" class="headerlink" title="三、一些听起来是废话的总结"></a>三、一些听起来是废话的总结</h3><p>这五个层面的设计是一个流程；也是一个思路。通过自下而上的设计流程，让产品设计遵循以用户为中心，先确定目标和用户需求，想清楚要为什么用户提供什么价值，再不断往上推进。保证我们不会走偏方向。在底层花的时间越多越充分，后期的流程应该越顺利，因为那些目标需求与价值都明确的记在心中。</p>
<p>但是科普过五层模型的人，却似乎大部分都不是这么做的。也许是他们并没有看完吧。</p>
<p>对于五层模型有两个注意点：</p>
<p>这个五个层面的设计；下层的改动一定会导致上层的设计的变动；而较高一个层的设计改动也要考虑到是否会影响到下一个层次。这种双向联动的效应是一个常识。我们要很注意。因为我们时常做到最后就忘记了我们最开始的目标是什么，或者说；因为上层的改动，已经无法实现我们最初的设想而不自知。</p>
<p>第二；五个层次的工作相连的部分略有重合是一种比较好的节奏；如果一味的要求我们把上一个层次的事儿的做完了；在做下一个层次的事儿；可能会导致一种你和用户都满意个割裂感。也就是说，考虑范围层面的时候，依旧可以对战略进行一定的调整。</p>
<blockquote>
<p>最后；我提醒自己一直要记住：知道你在解决什么问题；并知道你为什么要这么做。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/n5gn9nh2zap08s5fqhclvgy6/1351522926267_.pic.jpg&quot; alt=&quot;1351522926267_.pic.jpg-84kB&quot;&gt;&lt;br&gt;《用户体验要素》是一本实用类书，试图回答如何以用户体验为中心进行产品设计。作者通过构建自下而上的五层模型：战略层，范围层，结构层，框架层，表现层；来将以用户体验用户需求为中心的设计方式层次清晰的表达出来。并指出；一开始对战略层的深思熟虑，会帮助我们在整个产品设计中节约大量的时间。&lt;/p&gt;
&lt;p&gt;作者这本书写于pc时代，大多案例都是网站的建设。但是整个思考产品的思路，直到今天；都没有过时。&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《如何阅读一本书》读书笔记：四个层次的阅读</title>
    <link href="http://yoursite.com/2018/03/05/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9B%9B%E4%B8%AA%E5%B1%82%E6%AC%A1%E7%9A%84%E9%98%85%E8%AF%BB/"/>
    <id>http://yoursite.com/2018/03/05/《如何阅读一本书》读书笔记：四个层次的阅读/</id>
    <published>2018-03-05T11:26:31.000Z</published>
    <updated>2018-04-05T11:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<p> 这是一本实用性书籍。我阅读绝大部份；我没有仔细阅读的部分包括14-19章节；这些章节讲述的是如何阅读一本具体的书籍。我快速掠过；如果我以后要看到这类相似书籍再说。</p>
<p> 这是一本教读者如何读书的书；通过四个层次的阅读；可以更好的理解一本书的内容。花费了大量的篇幅讲述了阅读一本书的第三个层次 <code>分析阅读</code> 15个原则；帮助抓住框架；理解内容；找到答案。并且给出了阅读不同类型书籍的方法。在你拿到一本书；不知道如何开始的时候，这是一本很好的读书指南；起码；让你不跑偏。</p>
 <a id="more"></a>
<h3 id="阅读的四个层次"><a href="#阅读的四个层次" class="headerlink" title="阅读的四个层次"></a>阅读的四个层次</h3><p>阅读一本书；一本好书的目的；是增加自己的理解能力。而只有一种阅读方式是真正的；就是</p>
<blockquote>
<p>你什么都没有；只凭借内心的力量；慢慢提升自己；从模糊的概念；到更加清楚的理解为止。</p>
</blockquote>
<p>但是；只有我们知道如何去读的时候才能真正的读懂一本书。书中将阅读分为四个层次：</p>
<ul>
<li>1 基础阅读：能读懂一句话的文字表面意思</li>
<li>2 检视阅读：系统化略读；短时间抓住一本书的重点</li>
<li>3 分析阅读：追求理解一本书（针对好书）</li>
<li>4 主题阅读：比较阅读同一主题下的多本书；主动分析列举观点相同之处。</li>
</ul>
<p>这四个层次不是循序渐进的；高层次的会包含低层次的特性。最高的层次的阅读；也就包含了所有层次的阅读特性。</p>
<h4 id="基础阅读：能认得人就可以了。"><a href="#基础阅读：能认得人就可以了。" class="headerlink" title="基础阅读：能认得人就可以了。"></a>基础阅读：能认得人就可以了。</h4><p><em>“我这话句说的没毛病。”</em></p>
<blockquote>
<p>你能读懂这句话；却没在意我 “话” 与 “句” 写反了。就不用管这一个阶段了。</p>
</blockquote>
<h4 id="检视阅读：-交流前的打量"><a href="#检视阅读：-交流前的打量" class="headerlink" title="检视阅读： 交流前的打量"></a>检视阅读： 交流前的打量</h4><p>这个层次需要你能够快速抓住一本书的重点；以判断这本书到底值不值得读。因为只有一小部分值得用分析阅读。</p>
<p>检视阅读可以分为两个部分：</p>
<ul>
<li>第一层次： 有系统的略读或者粗读：快速的弄明白这本书的主题与架构。</li>
</ul>
<p>重点是 <strong>主动专心；但是不花费太多的时间</strong>； 可以根据以下步骤：</p>
<ol>
<li>书名和序言：将书本归类；这到底是一本什么类型的书</li>
<li>研究目录：了解一本书的地图</li>
<li>如果有附录中有重点索引；快速了解书中议题，找到重点主题</li>
<li>了解作者简介</li>
<li>挑几个和主题相关章节进行阅读；注意开头结尾和摘要。</li>
<li>随机挑选阅读；但不要太多；留意与主题相关的内容</li>
</ol>
<ul>
<li>第二层次 粗浅的阅读：重点是<code>不停的读下去</code><br>想了解一本书；如果一开始就陷入细节；会很难有有勇气读下去。所以检视阅读的重点是：不停的读下去；碰到不懂的地方也不要停下来思考与查询。从头读到尾。即使只了解全书的50%；也比半途而非什么都不了解强。</li>
</ul>
<p>我们通过上面两个步骤就可以快速了解一本书大概的内容；但是想要读的更好；我们就要有自我要求。</p>
<h5 id="提问题：四个基本问题：看完书需要回答的问题"><a href="#提问题：四个基本问题：看完书需要回答的问题" class="headerlink" title="提问题：四个基本问题：看完书需要回答的问题"></a>提问题：四个基本问题：看完书需要回答的问题</h5><blockquote>
<p>所谓主动阅读；就是能够提出问题。</p>
</blockquote>
<ul>
<li>1 整体来说这本书在谈些什么</li>
<li>2 作者有什么论述；论点；想法等细节；都是如何表达的</li>
<li>3 这本书说的有道理么？全部或者部分。</li>
<li>4 这本书和你有什么关系？ 你是否真的需要去了解这些信息；是否还给你了其他的启发。</li>
</ul>
<p>读懂一本书；核心就在于提出问题；然后回答或者找出作者的答案。</p>
<h5 id="做笔记：能表达出来的想法；才是有意义的想法"><a href="#做笔记：能表达出来的想法；才是有意义的想法" class="headerlink" title="做笔记：能表达出来的想法；才是有意义的想法"></a>做笔记：能表达出来的想法；才是有意义的想法</h5><p>读书的时候；你要去记录你自己的想法。用语言表述出来。这可以帮助你记住作者的思想。<br>如果你说你都知道；但是你不知道如何去表达；其实你也许根本不知道自己在想些什么。</p>
<h4 id="分析阅读：与作者交流；去真正理解一本好书。"><a href="#分析阅读：与作者交流；去真正理解一本好书。" class="headerlink" title="分析阅读：与作者交流；去真正理解一本好书。"></a>分析阅读：与作者交流；去真正理解一本好书。</h4><p>作者总结了一般的规则。分为3个阶段；15个原则。很详实。</p>
<p>阅读一本书；就是和作者的思想的交流。所以可以从交流的角度来理解这些阶段和规则；交流在这里是广义的交流；老师上课是一种交流；同长者聊天也是一种交流。但总体可以分为以下三个部分；<strong>我听；我想；我说。</strong></p>
<h5 id="我听：了解作者想说什么？"><a href="#我听：了解作者想说什么？" class="headerlink" title="我听：了解作者想说什么？"></a>我听：了解作者想说什么？</h5><p><code>谈话性质：</code> 区分这本书是一本理论的书还是实用性的书。或者小说与文学。因为这会决定我们用一些不同的方式（态度）去阅读（谈话）。<br>比如这一本书；就是一本实用性著作；他有目的性；教你如何阅读一本书。你阅读完会根据是同意作者来决定是否按照作者的建议行动。</p>
<p><code>谈话主题与套路：</code> 通过阅读能够可以用很小一段文字描述文中主线。并且列出核心的框架。</p>
<p>同时我们可以根据一本书的结构给出自己理解的大纲。这会比较有助于我们理解这本书。我们谈话的时候；总是会用一些开场，或者事实等去丰富我们描述的观点。所有的这些都是在让整个谈话不是特别干。但是透过这些“润色”；我们可以是整个内容脉络更加清晰的展现。</p>
<p><code>谈话目标</code> 找到对方的目的；想要问的问题或者解决的问题；（我们要找到答案；或者自己回答）</p>
<h5 id="我想：理解作者想表达的主旨；他提出的问题是否解决"><a href="#我想：理解作者想表达的主旨；他提出的问题是否解决" class="headerlink" title="我想：理解作者想表达的主旨；他提出的问题是否解决"></a>我想：理解作者想表达的主旨；他提出的问题是否解决</h5><p>这一个阶段；通过抓作者的关键字；关键语句；以及一些观点的论点来找到作者想标的的主旨。这是作者的态度；也是他想传达的信息。<br>根据他的描述；我们要找到他这么认为的前因后果。</p>
<p>重点就是可以站在作者的角度去理解这本书；这个时候不去评判；<code>理解和同意</code> 不是一个意思。</p>
<p>然后；我们可以判断；他在谈话目标中提出的问题；哪些已经解决了。哪些是还没解决的。</p>
<h5 id="我说：读懂之前不评论；记住学习才是真理。"><a href="#我说：读懂之前不评论；记住学习才是真理。" class="headerlink" title="我说：读懂之前不评论；记住学习才是真理。"></a>我说：读懂之前不评论；记住学习才是真理。</h5><p>在于作者的交流中；他是一个弱势的地位。因为他没法对你说“倾听我说完”</p>
<p>所以；我们要遵守思维的礼节；我们最关心的；也是善意对话最关键的；就是<code>我们能学到些什么</code>。除非我们真的了解了一本书；在这之前最好不要说同意与否。</p>
<p>当你不同意作者观点的时候；你的论述最好有理论依据。你能够证明理论是错误的这可以让你避免进入情绪的控制，而说出一些诸如“我不知道你在说什么，但你就是错了”的话来。</p>
<p>因为你一定要切记 <code>赢不是目标；学习才是真理</code>。</p>
<h4 id="主题阅读：博采众议；独立思考。"><a href="#主题阅读：博采众议；独立思考。" class="headerlink" title="主题阅读：博采众议；独立思考。"></a>主题阅读：博采众议；独立思考。</h4><p>找出统一主题的多本书；配合阅读；列出想要了解的问题；找到多本书对相同主题的描述；进行分析讨论。<br>这里需要注意的是；主题阅读的目标是主题；而不是全书。你需要找到不同书对同一主题的内容。</p>
<p>这一部分我有所体会；之前听得到的时候；各位老师分享读书经验中都有分享过；买统一类目下的两本书；对照阅读。通过客观的分析；你对相关概念会有更加深入的理解。</p>
<blockquote>
<p>需要说明的是；四个层次是读一本的理想状态；现实中需要根据不同情况进行调整。不要忘了目标；是理解一本书；而不是用正确的方式读一本书。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这是一本实用性书籍。我阅读绝大部份；我没有仔细阅读的部分包括14-19章节；这些章节讲述的是如何阅读一本具体的书籍。我快速掠过；如果我以后要看到这类相似书籍再说。&lt;/p&gt;
&lt;p&gt; 这是一本教读者如何读书的书；通过四个层次的阅读；可以更好的理解一本书的内容。花费了大量的篇幅讲述了阅读一本书的第三个层次 &lt;code&gt;分析阅读&lt;/code&gt; 15个原则；帮助抓住框架；理解内容；找到答案。并且给出了阅读不同类型书籍的方法。在你拿到一本书；不知道如何开始的时候，这是一本很好的读书指南；起码；让你不跑偏。&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《习惯的力量》读书笔记：改变习惯的黄金法则</title>
    <link href="http://yoursite.com/2018/02/18/%E3%80%8A%E4%B9%A0%E6%83%AF%E7%9A%84%E5%8A%9B%E9%87%8F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%94%B9%E5%8F%98%E4%B9%A0%E6%83%AF%E7%9A%84%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99/"/>
    <id>http://yoursite.com/2018/02/18/《习惯的力量》读书笔记：改变习惯的黄金法则/</id>
    <published>2018-02-18T11:09:44.000Z</published>
    <updated>2018-04-08T11:13:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一周看的东西很杂，买了6本书。然后上周末在很down的心情下；看完了《习惯的力量》这本书。和大家分享一下书中核心观点。</p>
<a id="more"></a>
<h2 id="1-习惯的运作：三个步骤"><a href="#1-习惯的运作：三个步骤" class="headerlink" title="1 习惯的运作：三个步骤"></a>1 习惯的运作：三个步骤</h2><p>你有没有想过；你的行为大部分都是习惯？上楼梯的时候先迈左脚还是右脚；写文章的时候喜欢喝咖啡；每到一个时间就很想吃点什么东西等等。</p>
<p>这些不用思考；有身体自动产生行为；都可以称之为习惯。即使你大脑失去记忆；你的身体的习惯依旧会保留。</p>
<p>习惯是怎么发挥作用的呢？神经科学家通过多个典型案例的研究；结合实验室在小白鼠身上做的试验；发现了习惯的回路。分为以下三个步骤：<code>暗示</code>； <code>惯常行为</code>； <code>奖赏</code><br>关系如下图所示：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/42t2c2k9yltz0yqcd90o87tb/image_1caif9pgh193chgac81qtk1hhh1g.png" alt="image_1caif9pgh193chgac81qtk1hhh1g.png-14.3kB"></p>
<p>我们日常行为都是得到一个<code>暗示</code>； 这会触发我们的<code>惯常行为</code>；通过这个行为；我们会得到所谓<code>奖赏</code>；然后重复这个回路。</p>
<p>我们的各种你意识到的，你没意识到的习惯；都是如此</p>
<h2 id="2-习惯产生的关键：大脑的渴求"><a href="#2-习惯产生的关键：大脑的渴求" class="headerlink" title="2 习惯产生的关键：大脑的渴求"></a>2 习惯产生的关键：大脑的渴求</h2><p>但是光是<code>暗示</code> 与 <code>奖赏</code> 不足以促使我们形成习惯；关键是 <code>奖赏</code> 能不能激发出我们 <code>大脑的渴求</code> 也可以说是 <code>欲望</code>。</p>
<p>因为对巧克力这种食物有<code>渴求</code>；小白鼠能够在听到“滴答”声音后；做出相同的动作；找到最终的 <code>奖赏</code></p>
<p>对于产品的广告而言；要想效果好；一定要勾起观众内心对<code>奖赏</code>的<code>渴求</code>。</p>
<p>例如；药膏广告勾起了用户对”健康洁白牙齿”的渴求；所以每次都想寻求刷完牙<code>口腔中蛋蛋刺激感</code>这种 <code>奖赏</code></p>
<p>所以更加准确的习惯流程就是：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/lsmusshnz0cjisi7qpvugx3p/image_1caifab2q185mct8jj71q3n1i901t.png" alt="image_1caifab2q185mct8jj71q3n1i901t.png-14.4kB"></p>
<p>你可以利用这个套路养成健身的习惯：</p>
<ul>
<li>选择一个<code>暗示</code>；比如每天晚上9点就去跑步</li>
<li>选择一个<code>奖赏</code>；比如结束一杯香草奶昔</li>
<li>最后让自己的身体产生对<code>奖赏</code>的<code>渴求</code><br>这种对预期奖赏的渴求；会让你去选择去跑步；最终养成跑步的习惯。</li>
</ul>
<p>成功的营销就是找到简单明了的暗示；定义明确的奖赏；让用户产生渴求感。</p>
<blockquote>
<p>从这里我们还可以得出一个观察；就是你要创造一个习惯；比如使用一款产品的习惯；你要选择 <code>正确的奖赏</code>。所谓正确；就是让使用的用户获得更美好的体验。而不是承认之前的不美好。</p>
</blockquote>
<h2 id="3-一个习惯黄金法则："><a href="#3-一个习惯黄金法则：" class="headerlink" title="3 一个习惯黄金法则："></a>3 一个习惯黄金法则：</h2><blockquote>
<p>习惯不能消除；只可以 <code>改变</code></p>
</blockquote>
<p>刚刚说到习惯的三个要素：<code>暗示</code>；<code>惯常行为</code>；<code>奖赏</code><br>那边改变习惯的关键就是： </p>
<ul>
<li>不改变<code>原有的暗示</code></li>
<li>不改变<code>原有的奖赏</code></li>
<li>更换新的<code>惯常行为</code></li>
</ul>
<p>那个新的惯常行为就是你要要改变的或者要养成的习惯。</p>
<p><strong>A 老习惯：</strong></p>
<p><img src="http://static.zybuluo.com/zhumin1990719/v3vdm69mz1ox4nvnrgf92ezl/image_1caif6ipo131v11j510vrv6iu7o9.png" alt="image_1caif6ipo131v11j510vrv6iu7o9.png-16kB"></p>
<p><strong>B 新习惯</strong></p>
<p><img src="http://static.zybuluo.com/zhumin1990719/whh8wmuea409kf7jsxffngbj/image_1caif7vn41uid1tm71vmb11sb1j2013.png" alt="image_1caif7vn41uid1tm71vmb11sb1j2013.png-15.7kB"></p>
<p>除了中间的行为；啥都不用改；这就是改变习惯的黄金法则。</p>
<p>所以；<strong>一旦我们意识到了我们习惯的回路</strong>；改变习惯就成功了一半。因为你只要提供相同的暗示与奖赏；然后做不同行为；持续一段时间就可以了~</p>
<blockquote>
<p>弄清楚你渴求的是什么样的奖赏；这个就是关键了。</p>
</blockquote>
<h2 id="4-习惯的作用"><a href="#4-习惯的作用" class="headerlink" title="4 习惯的作用"></a>4 习惯的作用</h2><p>书中介绍了星巴克让用户养成应对不同情绪顾客的行为习惯；这样可以减少员工情绪奔溃的情况；有利于提升稳定的优质服务。</p>
<p>他们做的就是将自律成为习惯。</p>
<p>书中提出一个观点；我非常赞同；</p>
<blockquote>
<p><strong>意志力是一种力量</strong></p>
</blockquote>
<p>你白天用的多；晚上能用的就少。所以人们晚上的意志力总是容易松懈。<br>但是；当你把耗费你宝贵意志力的事情；变成你身体的<code>自发意识</code>；也就是习惯的时候；就不会过度消耗你的意志力了。</p>
<p>所以，你看起来那些人自律似乎很痛苦；早起；跑步；健身；读书。这些事；已经成为他们的自发意识；热门早就乐在其中。</p>
<p>而你还在原地害怕。</p>
<hr>
<p>喂喂喂；<br>说你呢？明天早起的奖赏想好了不？<br>今天早睡的。。</p>
<p>（算了，不可能的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一周看的东西很杂，买了6本书。然后上周末在很down的心情下；看完了《习惯的力量》这本书。和大家分享一下书中核心观点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《原则》读书笔记：知道保持开放与如何成长</title>
    <link href="http://yoursite.com/2018/02/15/%E3%80%8A%E5%8E%9F%E5%88%99%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%9F%A5%E9%81%93%E4%BF%9D%E6%8C%81%E5%BC%80%E6%94%BE%E4%B8%8E%E5%A6%82%E4%BD%95%E6%88%90%E9%95%BF/"/>
    <id>http://yoursite.com/2018/02/15/《原则》读书笔记：知道保持开放与如何成长/</id>
    <published>2018-02-15T11:44:31.000Z</published>
    <updated>2018-04-05T11:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>这本原则最近非常火；据说创投圈的人都在读。我在得到app上听过万维钢老师的解读；也写过一些笔记。但是总觉得东西理我自己很远。于是我买回来自己再阅读一次。</p>
<p>在看书这件事儿上；我能看实体书还是愿意看实体书；一个是因为有读书的感觉；一个是不容易分心（因为我注意力冗余分散）；第三读书笔记记录方便。写下来比打出来记忆更加深刻。最后一个是回顾的时候很方便；你要找自己划线做特殊标记的地方太容易了~ </p>
<p>所以我之前的策略是电子买一本；实体书买一本；但是。。现在电子书的价格节节攀升。。还是只看实体书好了</p>
<a id="more"></a>
<h2 id="总结（末尾还有几乎一遍一样的；但有惊喜）："><a href="#总结（末尾还有几乎一遍一样的；但有惊喜）：" class="headerlink" title="总结（末尾还有几乎一遍一样的；但有惊喜）："></a>总结（末尾还有几乎一遍一样的；但有惊喜）：</h2><p>整本书上半部分的重点很清晰：</p>
<p>1 正视现实；有方法的（5步流程）追求你想要的东西。<br>2 通过头脑开放；认识自己的障碍；理解人的大不相同；感谢深思熟虑的意见分歧；从失败中吸取教训。问自己：“你怎么知道自己是对的呢”<br>3 不断成长和进化；作出更好的决策；成为更好的自己。</p>
<p>说起来简单；然而知易行难。但即使如此；知道总是改变的第一步。</p>
<p>这本书最大的作用；是让我开始反思自己去年一整年的想法；做事的方法。几乎都是情绪控制着我。有一种“恍然大明白”的感觉；我真的做错了很多事，做错了很多决策。</p>
<p>感谢原则。保持头脑开放；继续前行。</p>
<h2 id="引言-amp-个人历程"><a href="#引言-amp-个人历程" class="headerlink" title="引言&amp;个人历程"></a>引言&amp;个人历程</h2><p><strong>重点：</strong></p>
<ul>
<li>“独立思考；即使会犯错；保持谦虚和开放的态度”</li>
<li>“你怎么知道自己是对的呢”</li>
<li>“体验痛苦；从中探索自然想让你学会的东西”</li>
</ul>
<p><code>看样子是鸡汤；但是当我看到后面的内容就觉得满身冷汗；说的就是如此自以为是的我的现状。</code></p>
<p>雷达里奥（下面都成为Ray）在导言中说；《原则》分为上下两部；这是第一部；主要讲述的 <code>生活</code> 和 <code>工作</code> 的原则。下一部将会是 <code>经济</code> 与 <code>投资</code> 原则。期待中。</p>
<p>全书一共分为三个部分 ： 第一部分是个人经历的介绍；第二部分是生活原则的描述；第三部分是工作原则的描述。<br>我看完了前两部分；发现全书才看了一半300多页；下面还有300多页全都是</p>
<p>第一部分是说的个人经历：主要描述了成长；遭遇重大失败；从重大失败中吸取教训；重整桥水；并在这个过程中；逐渐形成并完善了自己的做事的原则。并整理成册。</p>
<p>在其中；对他打击最大的一起失误；因为过度自以为是，导致桥水破产；自己甚至筹集不到去见潜在客户的钱。痛苦无比；但也正是这次痛苦的经历，让他学会了可信度的加权决策；凡事都要多问问自己“你怎么知道自己是对的呢？”</p>
<p>在个人经历的最后一章节，雷达里奥说他把痛苦当做大自然的提醒；告诉他有一些重要的东西要学习。他不会为痛苦沮丧；他开始学会体验痛苦；探索自然（我觉得就是潜意识）想通过痛苦给我们什么收益。甚至开始成为他的一项游戏。</p>
<p>后面重点的第二部分：生活原则</p>
<h2 id="生活原则："><a href="#生活原则：" class="headerlink" title="生活原则："></a>生活原则：</h2><h3 id="1-拥抱现实；应对现实"><a href="#1-拥抱现实；应对现实" class="headerlink" title="1 拥抱现实；应对现实"></a>1 拥抱现实；应对现实</h3><ul>
<li>不要欢笑愿望与现实</li>
<li>不要担心自己形象；而关心能不能实现你的目标</li>
<li>要重视后续的结果以及后续的后续</li>
<li>不要让痛苦妨碍自己的进步</li>
<li>不要把不好归咎与任何人；从自己身上找原因</li>
</ul>
<h4 id="1-1-做一个超级现实的人"><a href="#1-1-做一个超级现实的人" class="headerlink" title="1.1  做一个超级现实的人"></a>1.1  做一个超级现实的人</h4><p>在乎梦想；但是扎根于现实</p>
<h5 id="梦想-现实-决心-成功的生活"><a href="#梦想-现实-决心-成功的生活" class="headerlink" title="梦想 +  现实 + 决心 = 成功的生活"></a>梦想 +  现实 + 决心 = 成功的生活</h5><h4 id="1-2-理解现实；是任何良好结果的根本依据"><a href="#1-2-理解现实；是任何良好结果的根本依据" class="headerlink" title="1.2 理解现实；是任何良好结果的根本依据"></a>1.2 理解现实；是任何良好结果的根本依据</h4><p><code>因为当真相与愿望不服的时候；大部分人抗拒真相</code>。 这种认知偏差；有很多心理学现象与之相关；如房间里的大象等。在《需求》 和 《思考快与慢中》都有过相关的论述。说到底；就是要扎根现实。理解现实，然后，改变自己；改变现实</p>
<h4 id="1-3-头脑需要极度开放："><a href="#1-3-头脑需要极度开放：" class="headerlink" title="1.3 头脑需要极度开放："></a>1.3 头脑需要极度开放：</h4><h5 id="头脑极度开放；极度透明有利于快速学习与改进"><a href="#头脑极度开放；极度透明有利于快速学习与改进" class="headerlink" title="头脑极度开放；极度透明有利于快速学习与改进"></a>头脑极度开放；极度透明有利于快速学习与改进</h5><p><code>这几乎是整个生活原则中最重要的一条原则了</code><br>你头脑越是开放，越是不会自欺欺人。其他人给你的反馈就会更加诚实（“你如果是喜欢听与自己意见一样的话；就会得到的反馈就越是虚假”）</p>
<p>如果这些人是<code>可信的人</code> ；你将会收货很多。</p>
<h5 id="不要担心其他人的看法；那会成为你的障碍"><a href="#不要担心其他人的看法；那会成为你的障碍" class="headerlink" title="不要担心其他人的看法；那会成为你的障碍"></a>不要担心其他人的看法；那会成为你的障碍</h5><p>你必须以你认为最好的独特的方式行事；<code>这样做一定会收到反馈</code>；我们必须以开放的头脑思考这些反馈。</p>
<p>尽管你的极度透明会让你感觉到不舒服；但是这样对你是最好的。</p>
<blockquote>
<p>这一点我略微保留意见~ 得看你身处的环境是否适合极度透明</p>
</blockquote>
<h5 id="极度求真，极度透明会带来更加有意义的工作和更好的人际关系"><a href="#极度求真，极度透明会带来更加有意义的工作和更好的人际关系" class="headerlink" title="极度求真，极度透明会带来更加有意义的工作和更好的人际关系"></a>极度求真，极度透明会带来更加有意义的工作和更好的人际关系</h5><h4 id="1-4-观察自然；学习现实规律"><a href="#1-4-观察自然；学习现实规律" class="headerlink" title="1.4 观察自然；学习现实规律"></a>1.4 观察自然；学习现实规律</h4><p>两种视角；</p>
<ul>
<li>自上而下 <code>找事务背后规律</code>： 理解市场；供求关系；宏观大势</li>
<li>自下而上<code>去验证具体情况</code> ： 验证具体情况是否相符合</li>
</ul>
<h5 id="不要固守你认为事物-“应该”-是什么样子"><a href="#不要固守你认为事物-“应该”-是什么样子" class="headerlink" title="不要固守你认为事物 “应该” 是什么样子"></a>不要固守你认为事物 “应该” 是什么样子</h5><p><strong>保持客观：</strong> 不要让<code>偏见</code>；使我们无法认识客观情况。</p>
<p>当看到一个认为自然是错误的想法的时候；<code>先假设自己是错的</code>；然后想办法弄明白为什么自然如此是合理的。<br>一个例子： 大草原上鬣狗吃了小幼马；我们会心生同情。但是事实上这是自然法则；自然会走向<code>整体最优</code>；而不是个体最优化。</p>
<p>人也是一样；人们会把对自己或者自己相关的人不利的事情叫做坏事；而忽略更大的好。 群体中也有这种倾向。如宗教歧视。</p>
<p>只根据事务对个人的影响就判断绝对的好与坏是不合理的。（这点很难做到）</p>
<h5 id="一个东西要好；必须符合现实规律；并促进整体的进化；这会带来更大的好"><a href="#一个东西要好；必须符合现实规律；并促进整体的进化；这会带来更大的好" class="headerlink" title="一个东西要好；必须符合现实规律；并促进整体的进化；这会带来更大的好"></a>一个东西要好；必须符合现实规律；并促进整体的进化；这会带来更大的好</h5><h5 id="进化是宇宙中最强大的力量"><a href="#进化是宇宙中最强大的力量" class="headerlink" title="进化是宇宙中最强大的力量"></a>进化是宇宙中最强大的力量</h5><p>这里推荐一本书：《基因之河》；</p>
<blockquote>
<p>关于进化：还有一本书; 《自私的基因》； 也非常开脑洞</p>
</blockquote>
<h4 id="1-5-进化是生命最大的成就和回报"><a href="#1-5-进化是生命最大的成就和回报" class="headerlink" title="1.5 进化是生命最大的成就和回报"></a>1.5 进化是生命最大的成就和回报</h4><h5 id="个人激励机制必须符合群体目标"><a href="#个人激励机制必须符合群体目标" class="headerlink" title="个人激励机制必须符合群体目标"></a>个人激励机制必须符合群体目标</h5><p>比如自然给了性行为个体巨大的快乐激励；来达到群体的不断进化迭代</p>
<h5 id="现实为了趋向整体最大化；而不是个体"><a href="#现实为了趋向整体最大化；而不是个体" class="headerlink" title="现实为了趋向整体最大化；而不是个体"></a>现实为了趋向整体最大化；而不是个体</h5><p>为了整体做贡献，你就有可能收到回报。自然选择让更好产品得以保留；结果是整体的最优化。</p>
<h5 id="通过快速试错以适应现实是无价的"><a href="#通过快速试错以适应现实是无价的" class="headerlink" title="通过快速试错以适应现实是无价的"></a>通过快速试错以适应现实是无价的</h5><p>实验和适应能带来更快的进步</p>
<h5 id="要意识到你即是一切；又什么都不是。并决定你想成为什么样子"><a href="#要意识到你即是一切；又什么都不是。并决定你想成为什么样子" class="headerlink" title="要意识到你即是一切；又什么都不是。并决定你想成为什么样子"></a>要意识到你即是一切；又什么都不是。并决定你想成为什么样子</h5><p>“个人即是一切；又什么都不是；这是一个巨大的悖论”</p>
<h5 id="你的未来取决于你的视角"><a href="#你的未来取决于你的视角" class="headerlink" title="你的未来取决于你的视角"></a>你的未来取决于你的视角</h5><ul>
<li>你的未来取决于你的如何看待事物；关心什么事物。</li>
<li>必须决定你多大程度将别人的利益放在你的自己利益之上</li>
<li>拥抱现实，从自然的角度俯视自身很美妙</li>
</ul>
<h4 id="1-6-理解自然提供的现实教训"><a href="#1-6-理解自然提供的现实教训" class="headerlink" title="1.6 理解自然提供的现实教训"></a>1.6 理解自然提供的现实教训</h4><h5 id="收益递减规律"><a href="#收益递减规律" class="headerlink" title="收益递减规律"></a>收益递减规律</h5><p>任何东西在从太少变太多的过程中；<code>边际收益都会递减</code></p>
<h5 id="没有痛苦就没有收获"><a href="#没有痛苦就没有收获" class="headerlink" title="没有痛苦就没有收获"></a>没有痛苦就没有收获</h5><p>“人需要困难，这对健康来说是必须的”</p>
<h4 id="1-7-痛苦-反思-进步"><a href="#1-7-痛苦-反思-进步" class="headerlink" title="1.7 痛苦  + 反思 = 进步"></a>1.7 痛苦  + 反思 = 进步</h4><p>如果以正确的态度面对痛苦；感到痛苦就是你的<code>幸运</code>！！ ： <code>即使反思痛苦</code></p>
<p>最好的就是在痛苦的当时就进行反思。</p>
<h4 id="1-8-考虑后续与再后续的结果"><a href="#1-8-考虑后续与再后续的结果" class="headerlink" title="1.8 考虑后续与再后续的结果"></a>1.8 考虑后续与再后续的结果</h4><p>直接结果很可能是诱惑或者痛苦；<br>如果因为直接结果的痛苦而不去做；就很难获得大的成功<br>如果因为直接结果的诱惑而去做了；就会遭遇更大的失败</p>
<h4 id="1-9-接受结果-：-内控点"><a href="#1-9-接受结果-：-内控点" class="headerlink" title="1.9 接受结果 ： 内控点"></a>1.9 接受结果 ： 内控点</h4><p>在生活中不论遇到什么情况；如果你能够负起责任；进行良好的决策；而不是抱怨你无法控制的事情；你将更加容易知找到幸福</p>
<p>不要为喜不喜欢自己的处境担忧；<code>你必须根据自己的愿望找到实现愿望的途径</code>；然后 <code>骨气勇气坚持下去</code><br>后面的`五部流程会给到你一定帮助</p>
<h4 id="1-10-从更高的层次腐蚀机器"><a href="#1-10-从更高的层次腐蚀机器" class="headerlink" title="1.10 从更高的层次腐蚀机器"></a>1.10 从更高的层次腐蚀机器</h4><h5 id="想想自己是一个大机器里的一个小机器；拥有改变自己而变得更好的能力"><a href="#想想自己是一个大机器里的一个小机器；拥有改变自己而变得更好的能力" class="headerlink" title="想想自己是一个大机器里的一个小机器；拥有改变自己而变得更好的能力"></a>想想自己是一个大机器里的一个小机器；拥有改变自己而变得更好的能力</h5><h5 id="通过比较你实现的结果和你的目标；你就能确定如何改进你的机器"><a href="#通过比较你实现的结果和你的目标；你就能确定如何改进你的机器" class="headerlink" title="通过比较你实现的结果和你的目标；你就能确定如何改进你的机器"></a>通过比较你实现的结果和你的目标；你就能确定如何改进你的机器</h5><h5 id="却别作为机器设计者的你和作为机器中工作者的你"><a href="#却别作为机器设计者的你和作为机器中工作者的你" class="headerlink" title="却别作为机器设计者的你和作为机器中工作者的你"></a>却别作为机器设计者的你和作为机器中工作者的你</h5><p>最难的事情是在自身所处的环境中 <code>客观的看待我们自己</code>；不高看自己；不承担不应该承担的任务。</p>
<h5 id="擅于请教领域达人；因为你很难客观看待自己；所以你需要依赖他人的意见以及证据"><a href="#擅于请教领域达人；因为你很难客观看待自己；所以你需要依赖他人的意见以及证据" class="headerlink" title="擅于请教领域达人；因为你很难客观看待自己；所以你需要依赖他人的意见以及证据"></a>擅于请教领域达人；因为你很难客观看待自己；所以你需要依赖他人的意见以及证据</h5><h5 id="如果你头脑开放；足够有决心；你几乎可以实现任何愿望"><a href="#如果你头脑开放；足够有决心；你几乎可以实现任何愿望" class="headerlink" title="如果你头脑开放；足够有决心；你几乎可以实现任何愿望"></a>如果你头脑开放；足够有决心；你几乎可以实现任何愿望</h5><h3 id="2-五部流程；实现你的人数愿望"><a href="#2-五部流程；实现你的人数愿望" class="headerlink" title="2 五部流程；实现你的人数愿望"></a>2 五部流程；实现你的人数愿望</h3><ul>
<li>1 明确目标</li>
<li>2 找到阻碍目标的问题；并且不容忍问题</li>
<li>3 准确诊断问题，找到问题根源</li>
<li>4 规划可以解决问题的方案</li>
<li>5 做一切必要的事儿来践行这些方案，实现成果</li>
</ul>
<p>这五个步骤形成一个循环。<br>需要注意的点是：</p>
<ol>
<li>专注每个点；设定目标的时候就设定目标；不要想实现和出错（延迟批判）</li>
<li>当你诊断问题的时候；就不要想如何解决问题<br><code>混淆这两个问题会导致你无法发现真正的问题</code></li>
</ol>
<p>坚持这些规则；挫折；会让你难受；不完美永远存在；好消息是你可以从错误中吸收学习和成长；<br>坚持下去你就会有收获。</p>
<h4 id="2-1-有明确的目标："><a href="#2-1-有明确的目标：" class="headerlink" title="2.1 有明确的目标："></a>2.1 有明确的目标：</h4><h5 id="排列目标优先级；你几乎可以得到你想要的任何东西；但你无法得到所有东西"><a href="#排列目标优先级；你几乎可以得到你想要的任何东西；但你无法得到所有东西" class="headerlink" title="排列目标优先级；你几乎可以得到你想要的任何东西；但你无法得到所有东西"></a>排列目标优先级；你几乎可以得到你想要的任何东西；但你无法得到所有东西</h5><h5 id="分清目标和欲望"><a href="#分清目标和欲望" class="headerlink" title="分清目标和欲望"></a>分清目标和欲望</h5><ul>
<li>目标是你真正需要的东西</li>
<li>欲望是你想要但会阻碍你实现目标的东西（比如偷懒）</li>
</ul>
<h5 id="不要因为某个目标无法实现就否觉他"><a href="#不要因为某个目标无法实现就否觉他" class="headerlink" title="不要因为某个目标无法实现就否觉他"></a>不要因为某个目标无法实现就否觉他</h5><p>伟大的期望创造伟大的能力</p>
<h5 id="拥有灵活性和自我归咎；那没什么能组织你"><a href="#拥有灵活性和自我归咎；那没什么能组织你" class="headerlink" title="拥有灵活性和自我归咎；那没什么能组织你"></a>拥有灵活性和自我归咎；那没什么能组织你</h5><h5 id="知道如何应对挫折很重要"><a href="#知道如何应对挫折很重要" class="headerlink" title="知道如何应对挫折很重要"></a>知道如何应对挫折很重要</h5><p>逆境中；重要的是<code>守住优势</code>；减少损失。<br>你的任务永远是<code>做出尽可能少的选择</code></p>
<p>吴军老师也说过；成功不难；关键在于 <code>少犯错误</code></p>
<h4 id="2-2-找出问题但是不容忍"><a href="#2-2-找出问题但是不容忍" class="headerlink" title="2.2 找出问题但是不容忍"></a>2.2 找出问题但是不容忍</h4><h5 id="令人痛苦的问题待当做考验你潜在进步的机会"><a href="#令人痛苦的问题待当做考验你潜在进步的机会" class="headerlink" title="令人痛苦的问题待当做考验你潜在进步的机会"></a>令人痛苦的问题待当做考验你潜在进步的机会</h5><p>当你遇到一个问题；那就是一个机会。 大多数人不喜欢这么做。</p>
<h5 id="不要逃避问题；承认问题是改变的第一步"><a href="#不要逃避问题；承认问题是改变的第一步" class="headerlink" title="不要逃避问题；承认问题是改变的第一步"></a>不要逃避问题；承认问题是改变的第一步</h5><p>忍痛前行；痛苦会给你汇报</p>
<h5 id="不要把某个原因当做问题本身"><a href="#不要把某个原因当做问题本身" class="headerlink" title="不要把某个原因当做问题本身"></a>不要把某个原因当做问题本身</h5><p>我无法得到很好的睡眠是一个原因<br>我工作效率低是一个问题；前者可能是后者的原因。</p>
<h5 id="重点解决大问题"><a href="#重点解决大问题" class="headerlink" title="重点解决大问题"></a>重点解决大问题</h5><h4 id="2-3-找到问题根源"><a href="#2-3-找到问题根源" class="headerlink" title="2.3 找到问题根源"></a>2.3 找到问题根源</h4><h5 id="弄清楚问题；这需要时间去诊断"><a href="#弄清楚问题；这需要时间去诊断" class="headerlink" title="弄清楚问题；这需要时间去诊断"></a>弄清楚问题；这需要时间去诊断</h5><p>一次良好的诊断一般需要 15-60分钟</p>
<h5 id="区分直接与根本原因"><a href="#区分直接与根本原因" class="headerlink" title="区分直接与根本原因"></a>区分直接与根本原因</h5><h4 id="2-4-规划方案"><a href="#2-4-规划方案" class="headerlink" title="2.4 规划方案"></a>2.4 规划方案</h4><h5 id="前进之前先回顾"><a href="#前进之前先回顾" class="headerlink" title="前进之前先回顾"></a>前进之前先回顾</h5><h5 id="设置方案；写来来所有人都能看到；严格执行"><a href="#设置方案；写来来所有人都能看到；严格执行" class="headerlink" title="设置方案；写来来所有人都能看到；严格执行"></a>设置方案；写来来所有人都能看到；严格执行</h5><h5 id="规划先于行动；好规划不应定要很多时间"><a href="#规划先于行动；好规划不应定要很多时间" class="headerlink" title="规划先于行动；好规划不应定要很多时间"></a>规划先于行动；好规划不应定要很多时间</h5><h4 id="2-5-坚定的从头到尾执行方案"><a href="#2-5-坚定的从头到尾执行方案" class="headerlink" title="2.5 坚定的从头到尾执行方案"></a>2.5 坚定的从头到尾执行方案</h4><h4 id="2-6-保持谦逊；"><a href="#2-6-保持谦逊；" class="headerlink" title="2.6 保持谦逊；"></a>2.6 保持谦逊；</h4><ul>
<li>与其他人高质量交流</li>
<li>保持谦逊；你可以从别人那里得到你需要的东西</li>
</ul>
<h5 id="找到你最大的弱点；并处理掉"><a href="#找到你最大的弱点；并处理掉" class="headerlink" title="找到你最大的弱点；并处理掉"></a>找到你最大的弱点；并处理掉</h5><h4 id="2-7-理解自己的认知；理解他人与你不同；保持谦逊"><a href="#2-7-理解自己的认知；理解他人与你不同；保持谦逊" class="headerlink" title="2.7 理解自己的认知；理解他人与你不同；保持谦逊"></a>2.7 理解自己的认知；理解他人与你不同；保持谦逊</h4><p>提升认知能力；保持头脑开放；从他人那里获得帮助；你可以实现很多事情</p>
<h3 id="3-做到头脑极度开放"><a href="#3-做到头脑极度开放" class="headerlink" title="3 做到头脑极度开放"></a>3 做到头脑极度开放</h3><p>这一章几乎是生活原则中最重要的一章。(雷达里奥说；这也是全书最重要的一章)<br>主要重点有两个： 一个是为什么要保持头脑开放；<strong>一个是什么情况下你是头脑封闭的</strong><br>认识到第二点其实很重要；这会帮助你的日常反思。</p>
<ul>
<li>认识到自己的障碍和不足；</li>
<li>寻求可信度高的人的意见；设身处地思考和理解；对比自己的；最终做出更好的决策。</li>
</ul>
<h4 id="3-1-认识你的两大障碍"><a href="#3-1-认识你的两大障碍" class="headerlink" title="3.1 认识你的两大障碍"></a>3.1 认识你的两大障碍</h4><h5 id="障碍一：意识障碍；理解你的自我意识障碍"><a href="#障碍一：意识障碍；理解你的自我意识障碍" class="headerlink" title="障碍一：意识障碍；理解你的自我意识障碍"></a>障碍一：意识障碍；理解你的自我意识障碍</h5><p>主要是你<code>潜意识里的防备机制</code>； 使你难以接受你的错误和缺点。</p>
<p>我们有一些根植于内心的需求：</p>
<ul>
<li>被爱</li>
<li>被需要</li>
<li>害怕死亡</li>
<li>害怕失去</li>
<li>害怕自己无意义</li>
</ul>
<h5 id="不能让“想要自己正确的需求-”-压倒-“找出真相”-的需求"><a href="#不能让“想要自己正确的需求-”-压倒-“找出真相”-的需求" class="headerlink" title="不能让“想要自己正确的需求 ” 压倒 “找出真相” 的需求"></a>不能让“想要自己正确的需求 ” 压倒 “找出真相” 的需求</h5><p>当有人和你意见不一样；并且要求你解释的时候；你的大脑会把这样的东西当做 <code>攻击</code>；你会变得愤怒。</p>
<p>如果你想要成功；<code>你需要克制这一点</code>。 这样的人你也可以观察一下；身边到处都是。你也可以反思一下；你自己是不是这样的人。（怎么判断自己有这种倾向在后面会说到）</p>
<h5 id="障碍二；思维障碍；理解你的思维盲点障碍"><a href="#障碍二；思维障碍；理解你的思维盲点障碍" class="headerlink" title="障碍二；思维障碍；理解你的思维盲点障碍"></a>障碍二；思维障碍；理解你的思维盲点障碍</h5><p>人很难理解自己看不到的东西；《需求》 这本书里也有说到 <code>塞缪尔思反射</code> 。<br>如果你一心只想告诉对方自己的认为正确的想法；你就是 <code>一个头脑封闭的人</code></p>
<p>这样的话；当其他人给你展示各种可能性威胁和批评的时候；你可能会看不见。也无法领会。</p>
<h4 id="3-2-奉行头脑极度开放；不仅仅是“承认自己可能错了”"><a href="#3-2-奉行头脑极度开放；不仅仅是“承认自己可能错了”" class="headerlink" title="3.2 奉行头脑极度开放；不仅仅是“承认自己可能错了”"></a>3.2 奉行头脑极度开放；不仅仅是“承认自己可能错了”</h4><p>如果你知道自己有盲点；你就能找到一种解决办法。<br>头脑开放不仅仅是“承认自己可能错了”；但是依旧坚持自己的观点。这样作用不大。</p>
<h5 id="a-诚恳的想想自己也许并不知道最好的解决办法是什么；能不能妥善处理“不知道”很重要"><a href="#a-诚恳的想想自己也许并不知道最好的解决办法是什么；能不能妥善处理“不知道”很重要" class="headerlink" title="a. 诚恳的想想自己也许并不知道最好的解决办法是什么；能不能妥善处理“不知道”很重要"></a>a. 诚恳的想想自己也许并不知道最好的解决办法是什么；能不能妥善处理“不知道”很重要</h5><p>很多糟糕的决定是因为他们相信自己是对的。而头脑极度开放的人知道；找到问题的答案很重要。</p>
<h5 id="b-决策有两个步骤：-1-分析所有相关信息；2-决策"><a href="#b-决策有两个步骤：-1-分析所有相关信息；2-决策" class="headerlink" title="b. 决策有两个步骤： 1 分析所有相关信息；2 决策"></a>b. 决策有两个步骤： 1 分析所有相关信息；2 决策</h5><p>听听其他人的观点并加以思考；不会削弱你独立思考；自主决策的自由。只会帮你拥有更广的角度</p>
<h5 id="c-不要担心你的形象；只担心如何实现目标"><a href="#c-不要担心你的形象；只担心如何实现目标" class="headerlink" title="c. 不要担心你的形象；只担心如何实现目标"></a>c. 不要担心你的形象；只担心如何实现目标</h5><p>做出优秀决策的人；很少坚信自己已经掌握了最好的答案；承认自己有<code>缺点</code> 和 <code>盲点</code> ；并试图了解更多；客服缺陷和盲点。 </p>
<h5 id="d-不吸收；-产出也不大好。"><a href="#d-不吸收；-产出也不大好。" class="headerlink" title="d 不吸收； 产出也不大好。"></a>d 不<code>吸收</code>； <code>产出</code>也不大好。</h5><h5 id="e-从他人的角度；设身处地；才能评估另一种观点的价值"><a href="#e-从他人的角度；设身处地；才能评估另一种观点的价值" class="headerlink" title="e 从他人的角度；设身处地；才能评估另一种观点的价值"></a>e 从他人的角度；设身处地；才能评估另一种观点的价值</h5><p>高度接受自己错了的可能性；鼓励别人告诉自己错在哪里</p>
<h5 id="f-记住；你是在寻找最好的答案；不是自己能得出最好的答案"><a href="#f-记住；你是在寻找最好的答案；不是自己能得出最好的答案" class="headerlink" title="f 记住；你是在寻找最好的答案；不是自己能得出最好的答案"></a>f 记住；你是在寻找最好的答案；不是自己能得出最好的答案</h5><p>知道自己不知道；无比重要。 自问一下；<code>我是不是只是从自己的角度看问题</code></p>
<h5 id="g-搞清楚你是在争论还是在试图理解一个问题；根据可信度；想想哪种更加合理"><a href="#g-搞清楚你是在争论还是在试图理解一个问题；根据可信度；想想哪种更加合理" class="headerlink" title="g 搞清楚你是在争论还是在试图理解一个问题；根据可信度；想想哪种更加合理"></a>g 搞清楚你是在争论还是在试图理解一个问题；根据可信度；想想哪种更加合理</h5><p><code>可信度</code> 有两个特征；</p>
<ul>
<li>反复的在相关领域成功找到答案（<code>至少三次</code>；<code>拥有硬履历</code>）</li>
<li>再被责问的情况下能对自己的观点做出很好的解释</li>
</ul>
<h4 id="3-3-领会并感激：深思熟虑的意见分歧"><a href="#3-3-领会并感激：深思熟虑的意见分歧" class="headerlink" title="3.3 领会并感激：深思熟虑的意见分歧"></a>3.3 领会并感激：深思熟虑的意见分歧</h4><p>沟通方式要让对方觉得：<code>你是试图在理解</code><br>你需要提问；而不是做出陈述；心平气和的进行讨论，并鼓励对方也这么做。</p>
<p>（某些时候）<code>人们在产生分歧时变得愤怒是毫无意义的</code><br>当讨论陷入僵局；最没效果的就是；你试图在脑子中将所有的事情都弄得清楚。</p>
<h4 id="3-4-和可信的；愿意表达分歧的人一起审视你的观点"><a href="#3-4-和可信的；愿意表达分歧的人一起审视你的观点" class="headerlink" title="3.4 和可信的；愿意表达分歧的人一起审视你的观点"></a>3.4 和可信的；愿意表达分歧的人一起审视你的观点</h4><p>既单独询问专家；也鼓励专家在我面前展现意见分歧。</p>
<ul>
<li>为最坏的做准备。使其看起来不那么糟糕。</li>
</ul>
<h4 id="3-5-（重要）识别你头脑封闭的迹象"><a href="#3-5-（重要）识别你头脑封闭的迹象" class="headerlink" title="3.5 （重要）识别你头脑封闭的迹象"></a>3.5 （重要）识别你头脑封闭的迹象</h4><h5 id="a-封闭的人：不喜欢看到自己的观点被挑战"><a href="#a-封闭的人：不喜欢看到自己的观点被挑战" class="headerlink" title="a 封闭的人：不喜欢看到自己的观点被挑战"></a>a 封闭的人：不喜欢看到自己的观点被挑战</h5><p><code>不开放</code>：会因为无法说服他人而沮丧；而不是好奇对方为何看法不同。<br><code>开放</code>： 更想了解为什么会有分歧；明白自己可能是错的</p>
<h5 id="b-封闭的人：喜欢做陈述而不是提问"><a href="#b-封闭的人：喜欢做陈述而不是提问" class="headerlink" title="b 封闭的人：喜欢做陈述而不是提问"></a>b 封闭的人：喜欢做陈述而不是提问</h5><p>开放的人；可信度很高的人；经常会提出很多问题。并真诚的相信自己可能是错的</p>
<h5 id="c-封闭的人-更关心自己是否被理解；而不是理解他人"><a href="#c-封闭的人-更关心自己是否被理解；而不是理解他人" class="headerlink" title="c 封闭的人:  更关心自己是否被理解；而不是理解他人"></a>c 封闭的人:  更关心自己是否被理解；而不是理解他人</h5><p>封闭的人： 通常担心自己没有被理解<br>开放的人：觉得有必要从他人的视角看问题。</p>
<h5 id="d-封闭的人：“我可能错了。。。但这是我的观点”"><a href="#d-封闭的人：“我可能错了。。。但这是我的观点”" class="headerlink" title="d 封闭的人：“我可能错了。。。但这是我的观点”"></a>d 封闭的人：“我可能错了。。。但这是我的观点”</h5><p>这是一个敷衍的回答；人们借此来固守自己的观点<br>最好提出一个问题；而不是做出一个<code>断言</code></p>
<h5 id="e-封闭的人-：-封闭的人，阻挠别人的发言"><a href="#e-封闭的人-：-封闭的人，阻挠别人的发言" class="headerlink" title="e 封闭的人 ： 封闭的人，阻挠别人的发言"></a>e 封闭的人 ： 封闭的人，阻挠别人的发言</h5><p>开放的人更喜欢倾听发言；鼓励表达</p>
<h5 id="f-封闭的人-很难同事拥有两种想法"><a href="#f-封闭的人-很难同事拥有两种想法" class="headerlink" title="f 封闭的人 : 很难同事拥有两种想法"></a>f 封闭的人 : 很难同事拥有两种想法</h5><p>同时持有两种想法；并且能保持独立思考。</p>
<h5 id="g-封闭的人-：-缺乏谦逊"><a href="#g-封闭的人-：-缺乏谦逊" class="headerlink" title="g 封闭的人 ： 缺乏谦逊"></a>g 封闭的人 ： 缺乏谦逊</h5><p>开放的人： 时刻担忧自己可能是错误的。</p>
<h4 id="3-6-如何做到头脑开放？"><a href="#3-6-如何做到头脑开放？" class="headerlink" title="3.6 如何做到头脑开放？"></a>3.6 如何做到头脑开放？</h4><ul>
<li>利用自己的痛苦进行高质量的思考</li>
<li>一旦觉得愤怒；冷静下来；以深思熟虑的方式看待眼前问题</li>
<li>一定要客观；愿意倾听</li>
<li>重视证据</li>
<li>冥想</li>
</ul>
<h3 id="4-理解人与人大大不相同"><a href="#4-理解人与人大大不相同" class="headerlink" title="4 理解人与人大大不相同"></a>4 理解人与人大大不相同</h3><ul>
<li>要理解：左脑思考偏逻辑；右脑思考偏情感。</li>
<li>要理解：最长发生的斗争就是意识与潜意识；情绪和思考的斗争。</li>
</ul>
<p>如果你意识不到你的潜意识的存在；你的行为就会像西奥迪尼在《影响力》中做的那个比喻一样；是一个带着按钮的录音机；一按就播放。<br>比如；听到别人反对时候的被侵犯感。</p>
<ul>
<li>要知道：我们可以改变；通过习惯。</li>
</ul>
<h3 id="5-如何做出正确的决策"><a href="#5-如何做出正确的决策" class="headerlink" title="5 如何做出正确的决策"></a>5 如何做出正确的决策</h3><h4 id="好决策最大的敌人是坏情绪"><a href="#好决策最大的敌人是坏情绪" class="headerlink" title="好决策最大的敌人是坏情绪"></a>好决策最大的敌人是坏情绪</h4><p>如果你被情绪绑架；你讲不可能作出好的决策。作出决策时候必须用逻辑；理性；事实。</p>
<p>正如荣格所说：“如果你不知道潜意识的存在；否则潜意识就会主导你的人生；而你；称之为命运”</p>
<h4 id="先了解；后决策"><a href="#先了解；后决策" class="headerlink" title="先了解；后决策"></a>先了解；后决策</h4><p>1 <code>是什么</code> ：先了解决策的基础知识；既包括“是什么”；也包括宏观的<code>因果关系</code></p>
<p>“习惯性的问自己；我在了解相关情况吗？我已经掌握了决策的所有知识了么？”</p>
<p>为了了解：</p>
<ul>
<li>要知道<code>应该问什么人</code><ul>
<li>不要高估自己的可信度</li>
<li>不要不区分别人的可信度（在相同领域有过3次以上成功经验的硬简历）</li>
</ul>
</li>
<li>区分事实和观点；<code>不要听到什么信什么</code>；别人说的和做的很可能不一样。</li>
<li>80/20原则：你从20%的信息获得80%的价值；明白关键性的20%是什么</li>
<li>不要完美主义；完美主义的边际效用是 <code>递减的</code></li>
</ul>
<p>2 <code>怎么做</code> ：权衡结果；考虑结果；后续的结果；后续的后续的结果</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><code>骗你的，没有惊喜</code>；《原则》说了；别什么都信 23333。</p>
<p>整本书上半部分的重点很清晰：</p>
<p>1 正视现实；有方法的（5步流程）追求你想要的东西。<br>2 通过头脑开放；认识自己的障碍；理解人的大不相同；感谢深思熟虑的意见分歧；从失败中吸取教训。<br>3 不断成长和进化；作出更好的决策；成为更好的自己。</p>
<p>说起来简单；然而知易行难。但即使如此；知道总是改变的第一步。</p>
<p>这本书最大的作用；是让我开始反思自己去年一整年的想法；做事的方法。几乎都是情绪控制着我。大错特错。</p>
<p>感谢原则。保持头脑开放；继续前行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本原则最近非常火；据说创投圈的人都在读。我在得到app上听过万维钢老师的解读；也写过一些笔记。但是总觉得东西理我自己很远。于是我买回来自己再阅读一次。&lt;/p&gt;
&lt;p&gt;在看书这件事儿上；我能看实体书还是愿意看实体书；一个是因为有读书的感觉；一个是不容易分心（因为我注意力冗余分散）；第三读书笔记记录方便。写下来比打出来记忆更加深刻。最后一个是回顾的时候很方便；你要找自己划线做特殊标记的地方太容易了~ &lt;/p&gt;
&lt;p&gt;所以我之前的策略是电子买一本；实体书买一本；但是。。现在电子书的价格节节攀升。。还是只看实体书好了&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>抖音的产品体验</title>
    <link href="http://yoursite.com/2018/02/15/%E6%8A%96%E9%9F%B3%E7%9A%84%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/02/15/抖音的产品体验/</id>
    <published>2018-02-15T11:29:33.000Z</published>
    <updated>2018-04-15T11:36:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>说下体验抖音感受吧</p>
<ul>
<li><strong>第一</strong>，沉浸，高清，人好看，体验确实比同类好不少。也让我眼前一亮。再打开其他的就有一种失落感。因为看到第一眼就是视频里的样子，而其他的，都给你一张他妈都不认识的封面，点击一看…我就不说了…</li>
</ul>
<a id="more"></a>
<ul>
<li><p><strong>第二</strong>，运营好，相比于快手的不干扰用户让用户自我发展的策略，他做了很多运营工作。有很多明星入驻，带用户一起玩。并且受众年轻化。</p>
</li>
<li><p><strong>第三</strong>，我们感觉到的内容同质化严重，就是抖音做了很多运营主题，这就有点给了像一个有趣的命题作文，其实给用户了好用的模版，可以低门槛的产生优质内容，参与度也会高。</p>
</li>
</ul>
<p>之后是无根据扯淡，</p>
<p>抖音的受众群体年轻，我属于🌚，（但我第一反应是，我妈他们看不懂也不会喜欢，他们更佳喜欢火山和快手。</p>
<p>看了十来个直播和小视频的内容，给我一种抖音里的人都好好看好有钱或者好有才的感觉。（这和推荐算法一定也有关系）</p>
<p>而其他直播也好，短视频也好的都是挺正常的。但我看完抖音以后，有一种空虚感，但又想接着刷。让我想起《等待》里的一句歌词</p>
<p>“明知辉煌，过后是暗淡，仍期待着把一切从头来过”🌚</p>
<p>都什么乱七八糟的… 我不想再刷了…</p>
<hr>
<p>补充：两个多月过去；抖音制造了很多爆款模板。运营可谓相当用心。也捧红一些音乐，这些人和网易云音乐应该有不少重合性。因为我的网易电台里听到的歌有不少部分都是抖音里听过的。</p>
<p>我妈有一次在我女朋友的案例下下载了抖音；每次一刷都能刷半小时。再一次感叹这种首页的设计真的是直接抓住吸引力；基本不给你拒绝时间。而当没有你的大概画像的时候，把受众最广的一部分内容不断推给你；最大程度的留住你，留不住也没关系；因为你可能不是目标用户。陪我妈刷的内容；大部分都是我几周之前看过的，可爱类的居多。人畜无害。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说下体验抖音感受吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一&lt;/strong&gt;，沉浸，高清，人好看，体验确实比同类好不少。也让我眼前一亮。再打开其他的就有一种失落感。因为看到第一眼就是视频里的样子，而其他的，都给你一张他妈都不认识的封面，点击一看…我就不说了…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="产品体验" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>《需求》读书笔记：创造需求的6个关键</title>
    <link href="http://yoursite.com/2018/01/25/%E3%80%8A%E9%9C%80%E6%B1%82%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%88%9B%E9%80%A0%E9%9C%80%E6%B1%82%E7%9A%846%E4%B8%AD%E9%AD%94%E5%8A%9B/"/>
    <id>http://yoursite.com/2018/01/25/《需求》读书笔记：创造需求的6中魔力/</id>
    <published>2018-01-25T14:47:19.000Z</published>
    <updated>2018-04-08T10:54:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一本讲需求创造者的书。书名叫 <code>Demand</code> ； 和我们常常说的 <code>Requirement</code> 是不同的，前者更加偏向于人们内心的渴求。而不是明确的索求。</p>
<p>创造需求的大师；就是可以想群众之想。 通过观察用户的麻烦地图，创造有魔力的产品；提供用户之前不存在的需求；并且不断精进，解决用户的烦恼。</p>
<p>但是书并不是一本创造需求的指导手册。他是通过一些原创的案例的分析；将创造需求的可行的以及需要注意的方向进行总结，变成6个关键点。阅读这些案例与总结；可以为我们提供一定的借鉴意义。但绝不要希望可以按照书中的内容就可以知道现实中的产品如何商业化。</p>
<a id="more"></a>
<h2 id="创造需求；首先要做的是理解人"><a href="#创造需求；首先要做的是理解人" class="headerlink" title="创造需求；首先要做的是理解人"></a>创造需求；首先要做的是理解人</h2><p>真正创造需求的大师，会把所有的精力都投入到对 “人” 了解中。</p>
<ul>
<li>一个人；一个问题；一个点子</li>
</ul>
<p>我们都不了解自己的需求的时候，<code>需求创造者</code> 就已经看透了我们的内心，他们创造出我们无法抗拒的产品</p>
<ul>
<li>从情绪中看需求</li>
</ul>
<p>看出我们 <code>不可理喻，满腔热情，焦虑苦恼，捉摸不定</code>；我们到底需要什么，讨厌什么呢，什么样的东西能够令我们无法抗拒</p>
<ul>
<li>从麻烦中看需求</li>
</ul>
<p><code>我们真正想要的东西，和我们购买的东西之间，总有一道鸿沟</code>； 这就是创造新需求的机会。<code>他们认识到，人们实际购买行为和心理需求之间差异巨大</code></p>
<p>哈斯汀斯因为还录像带迟了要交罚款感到痛苦，发现了其中的麻烦，并解决。最终创造了奈飞。</p>
<p>诺基亚的1100 洞察了渔民的需求而大卖。</p>
<p>所以，优秀的需求创造者都知道以下6个关键点。同时知道如何传递这些能力给到<code>团队里的其他人</code></p>
<h2 id="6个关键点"><a href="#6个关键点" class="headerlink" title="6个关键点"></a>6个关键点</h2><p>这6个关键点，越到值得说道的地方越少，重复性的内容与无用的描述月来越多。只用看标题；就可以大体上知道这一章的主要到底是什么。这样书来作者的总结能力还是很强的</p>
<p>可以说；这本书的核心是案例。脱离的案例；理论就毫无意义。可是这也是一个悖论；你的案例是来说明的你理论；但是否也可以说案例是经过挑选而展现在你的眼前的；为了证明你所说的话是正确的。</p>
<p>我也无法证实我的想法；因为特例总是存在的</p>
<h3 id="关键1-：魔力：创造无法割舍的情感共鸣"><a href="#关键1-：魔力：创造无法割舍的情感共鸣" class="headerlink" title="关键1 ：魔力：创造无法割舍的情感共鸣"></a>关键1 ：魔力：创造无法割舍的情感共鸣</h3><p><code>魔力M = 卓越功能F X 情感诉求</code> </p>
<p><strong>案例：</strong>  <code>zipcar</code>；<code>魏格曼超市</code><br><strong>卷首语：</strong></p>
<ul>
<li>赢家需要创造情感共鸣；并把握市场方向</li>
<li>需求没有必然可言；提供用户不具备的选择</li>
</ul>
<h4 id="zipcar-密度产生魔力"><a href="#zipcar-密度产生魔力" class="headerlink" title="zipcar : 密度产生魔力"></a>zipcar : 密度产生魔力</h4><p>zipcar 初始做共享汽车；理想丰满；上线后市场几乎毫无反应。尽管他拥有很好的理念；卓越的功能，但并不能形成魔力产品。因为当时车辆的距离注册的会员很远；用户用车很不方便。所以用户没有使用的动力。</p>
<p>公司立足的<code>鸿沟</code>是 ： 一遍是客户购买汽车的<code>费用和麻烦</code> ； 一边是 <code>说走就走的自由</code></p>
<p>找出现有产品的缺陷并没有用，需要有足够的魅力激发客户的激情；吸引用户的关注。</p>
<p>需求的关键，通常是不起眼的小事。 <code>他走向成功的点是密度</code> 。 在典型用户分布区域，在用车高分期进行高密度投放。同时做好营销宣传与细节的掌控，（因为需求很脆弱）可以唤醒用户的心理需求：不被一辆机械绑架的自由。 需求从来没有必然可言。zipcar 创造并满足了这一需求。</p>
<h4 id="魏格曼超市；以减少麻烦为目的；关注用户的情感诉求；提供用户不具备的选择"><a href="#魏格曼超市；以减少麻烦为目的；关注用户的情感诉求；提供用户不具备的选择" class="headerlink" title="魏格曼超市；以减少麻烦为目的；关注用户的情感诉求；提供用户不具备的选择"></a>魏格曼超市；以减少麻烦为目的；关注用户的情感诉求；提供用户不具备的选择</h4><p>“关注行业新趋势；赶在其前面；敢于提供当时不具备的选择”</p>
<p>形成魔力的6大行为方式；需求创造者需要：</p>
<ul>
<li>努力减少消除产品和服务中的不便等各种问题</li>
</ul>
<p>魏格曼超市形成了自己的魔力；他们提供各种不具备的选择：深夜营业的药房；“没有糖果” 的收银台；儿童房间等等。</p>
<ul>
<li>知道如何调动客户情感上的兴奋度</li>
</ul>
<p>邀请大厨；退出廉价方便的主菜；提供菜单等等。帮助用户更加愉悦的购物</p>
<ul>
<li>为每一位员工赋予创造需求的力量</li>
</ul>
<p>给员工实现自己的创造需求的能力；这样员工才会主动帮助公司做的更好；<br>比如下雨天；给客户提供撑伞到车内的服务。</p>
<ul>
<li>敢于认真听取顾客的意见</li>
<li>需要孜孜不倦的实验</li>
<li>保护自身的特性<br><code>把事情作对；比做快重要</code></li>
</ul>
<h3 id="关键2-：麻烦地图：解决用户没告诉你的困扰"><a href="#关键2-：麻烦地图：解决用户没告诉你的困扰" class="headerlink" title="关键2 ：麻烦地图：解决用户没告诉你的困扰"></a>关键2 ：麻烦地图：解决用户没告诉你的困扰</h3><p>可以在头脑中绘制麻烦地图；每一个引起失望的结果；都是一个个麻烦点。</p>
<p>“每个没有必要存在的步骤；都是摩擦点；每个摩擦点代表一个需求创造的机会”<br>“需求；是以解决顾客问题为中心的”</p>
<ul>
<li>苹果：一键世界的先锋</li>
</ul>
<p>化摩擦为动力；苹果下载一首歌的点击次数是5次，而其他品牌要18 -35次。<br>“想到李明远对百度音乐的定义： 搜得到；能下载”</p>
<p>绘制麻烦地图的过程中； 你需要想用户的心理活动是什么样的；他们希望从人生中获得什么？如何满足？<br>什么样的麻烦让人用户气愤而无奈；是否存在一些；用户没发现但是我们可以解决</p>
<p>一键世界三大维度： 1 外观设计（奈非改了150版本信封的设计）；2 用户体验（每次微调；减少用户的麻烦）； 3 商业系统</p>
<ul>
<li>CareCore: 协作式医疗的典范</li>
</ul>
<p>减少麻烦；而不是减少成本。CareCore为用户提供个性化的医疗服务；费用虽然高；但是麻烦却很少；很专业。强调沟通；从用户出发。真正延长用户的寿命。</p>
<p>去倾听用户的声音；他们不会说出真实的动机和欲望；“比如买奔驰想让隔壁邻居看着眼红”</p>
<p>“你只要去看，就能观察到很多情况”</p>
<p>corecare 为病人提供免费交通的事情，大多数人都想不到</p>
<h3 id="关键3-：背景因素：那些看似与产品无关的，却决定产品的命运"><a href="#关键3-：背景因素：那些看似与产品无关的，却决定产品的命运" class="headerlink" title="关键3 ：背景因素：那些看似与产品无关的，却决定产品的命运"></a>关键3 ：背景因素：那些看似与产品无关的，却决定产品的命运</h3><p>决定一款产品成功与否力量；常常在你看不见的地方。背景因素就是如此。它构成的基础设施与消费需求之间是相辅相成的。</p>
<p>案例：kindle的成功和Librie的失败。</p>
<p>索尼的电子墨水阅读器比kindle要早出好多年，质量和设计也都不差；却没有取得成功的关键原因是可阅读的书籍的不足。因为出版商觉得这会影响他们自己的收入，不愿提供给到索尼优质的电子书的资源。  浮田嘉孝（索尼CD机的设计师，索尼最富设计天赋的人之一）的失败就是没有观察到这些背景因素对产品成败的影响</p>
<p>kindle则不同；发布的当日就有88000本图书可以下载，比索尼要多的多。</p>
<p>贝索斯说，当自己不知道要怎么做的时候，总是问问自己：“怎么样做对用户更好？” 他也确实这么做了。<br>例如：你再次购买一件你曾经买过的书以及CD的时候，下单的时候会弹出提示框来让你确认。</p>
<h3 id="关键4-：激发力：让潜在的需求变成真正的需求"><a href="#关键4-：激发力：让潜在的需求变成真正的需求" class="headerlink" title="关键4 ：激发力：让潜在的需求变成真正的需求"></a>关键4 ：激发力：让潜在的需求变成真正的需求</h3><p>人的行为很大程度上被自己的各种情绪；偏好所左右；需求像发动机；在激发力的驱使下，一拧就着。</p>
<p>激发力可以让冷淡的骑墙派变得热情；并心甘情愿的变成用户</p>
<p>案例：奈飞；配送速度就是激发力<br>它在增长的阶段发现了湾区的注册数字与人数都高于其他地区；讨论需求没有结果；于是，哈斯汀斯调研发现；只有一个地方不同就是 <code>配送速度</code>；因为奈飞的配送中心就在湾区；</p>
<p><strong>高效便捷的第二天就送达的服务；就是用户兴奋的关键点</strong></p>
<p>后来奈用建立配送中心的地方；注册用户数就会立刻翻倍。</p>
<h3 id="关键5-：精进曲线：缓慢改进就等于平庸"><a href="#关键5-：精进曲线：缓慢改进就等于平庸" class="headerlink" title="关键5 ：精进曲线：缓慢改进就等于平庸"></a>关键5 ：精进曲线：缓慢改进就等于平庸</h3><p>快速迭代；甩开竞争者；才能成为最后的赢家<br>案例懒得写了。。</p>
<h3 id="关键6：去平均好：你不能讨好所有人，一次只满足一类客户"><a href="#关键6：去平均好：你不能讨好所有人，一次只满足一类客户" class="headerlink" title="关键6：去平均好：你不能讨好所有人，一次只满足一类客户"></a>关键6：去平均好：你不能讨好所有人，一次只满足一类客户</h3><p>设计满足所有人的产品；永远是浪费钱和时间。<br>案例懒得写了。。</p>
<h2 id="产品发布：避免阿克琉斯之踵"><a href="#产品发布：避免阿克琉斯之踵" class="headerlink" title="产品发布：避免阿克琉斯之踵"></a>产品发布：避免阿克琉斯之踵</h2><p>全书我觉得最值得读两遍的一整节；虽然读下来很有一种心理学与行为经济学的混合。（如果你读过思考快与慢，就不用读第二遍了。）但是一切需求；最终都要回归到人本身。所以更好的了解我们，了解群体，总是有好处的。</p>
<h3 id="用数据说话"><a href="#用数据说话" class="headerlink" title="用数据说话"></a>用数据说话</h3><p> 做一个现实的人。</p>
<p>决定产品发布成败的是人的思维方式。正确的思维方式是用数据说话；俗话说眼见为实；但是 <code>塞默尔斯反射</code> 却直接指出人性弱点：仅仅凭借数据并不能改变现状；很可能没有人会相信你说的话。（只有我信以为实，才能看得见）；<code>强烈的信念和客观数据之间的竞赛；数据永远是输家</code></p>
<p>想起三本书：《影响力》；告诉我们如何去影响别人的六大武器。如果塞默尔斯知道，也不会英年早逝。《思考快与慢》《原则》一个告诉我们人们思考问题的误区与人性；一个告诉我们要保持极为开放的头脑；时刻反思；我怎么知道我是正确的呢？ 以防止我们陷入同样的陷阱中。</p>
<h3 id="做事前检查"><a href="#做事前检查" class="headerlink" title="做事前检查"></a>做事前检查</h3><p>预期性后见之明： 沃顿商学院的米切尔与康奈尔大雪的拉索以及科罗拉多大学的彭宁顿研究发现；想象某个事件已经发生会让你 预见结果、分析能力提升30%</p>
<p>《能量之源》的作者盖里·克莱恩人文： 事前分析能让人们表达心中焦虑；如果没有这样的机会；人们倾向于隐藏；担心表现出来之后会显得自己不忠实；或者打击团队信心。</p>
<p>想象灾难发生；问问自己为什么失败了，将所有可能的失败列出来；尽你所能去避免这些失败。</p>
<h2 id="一个案例值得说的思维方式转变的案例：监管局不是敌人；而是重要客户"><a href="#一个案例值得说的思维方式转变的案例：监管局不是敌人；而是重要客户" class="headerlink" title="一个案例值得说的思维方式转变的案例：监管局不是敌人；而是重要客户"></a>一个案例值得说的思维方式转变的案例：监管局不是敌人；而是重要客户</h2><p>著名制药公司默克公司采取不同的态度对待FDA； 将他看成客户；</p>
<p>“这位重要的客户在做决策的时候，需要哪些信息” 而尽力去提供；而不是“怎么不惹麻烦而绕开监管局”</p>
<p>如此依赖，他们的审批就比其他的公司快很多</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一本讲需求创造者的书。书名叫 &lt;code&gt;Demand&lt;/code&gt; ； 和我们常常说的 &lt;code&gt;Requirement&lt;/code&gt; 是不同的，前者更加偏向于人们内心的渴求。而不是明确的索求。&lt;/p&gt;
&lt;p&gt;创造需求的大师；就是可以想群众之想。 通过观察用户的麻烦地图，创造有魔力的产品；提供用户之前不存在的需求；并且不断精进，解决用户的烦恼。&lt;/p&gt;
&lt;p&gt;但是书并不是一本创造需求的指导手册。他是通过一些原创的案例的分析；将创造需求的可行的以及需要注意的方向进行总结，变成6个关键点。阅读这些案例与总结；可以为我们提供一定的借鉴意义。但绝不要希望可以按照书中的内容就可以知道现实中的产品如何商业化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>kotlin学习2 kotlin的编译与反编译以及与java的关系</title>
    <link href="http://yoursite.com/2017/10/14/kotlin%E5%AD%A6%E4%B9%A02-kotlin%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E4%B8%8Ejava%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2017/10/14/kotlin学习2-kotlin的编译与反编译以及与java的关系/</id>
    <published>2017-10-14T09:09:00.000Z</published>
    <updated>2017-10-14T09:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要描述 <code>kotlin</code> 的简单编译与反编译的流程。以及与 <code>java</code> 的关系。<br>之前说到 <code>kotlin</code> 是一个静态的代码语言。他也是需要编译的。需要编译就有编译器；而他和<code>java</code>又是可以相互调用的。所以隐隐约约感觉应该编译出来的东西和应该也和<code>java</code> 相关；下面就来看一下。</p>
<a id="more"></a>
<h2 id="下载安装编译器"><a href="#下载安装编译器" class="headerlink" title="下载安装编译器"></a>下载安装编译器</h2><p>方式在官网上都有；我这里选择的是下载压缩包；你通过<code>sdkman</code>；<code>homebrew</code>等安装当然都是 ok 的。官网链接 <a href="http://kotlinlang.org/docs/tutorials/command-line.html" target="_blank" rel="external">点我大帅比</a>。</p>
<p>下载完之后，解压，配置好路径；如下：<br><img src="http://static.zybuluo.com/zhumin1990719/dj4fmo9zzefbculdu4hrb2r2/image_1bsd0v6gh19mv4sf1bqqg3r11onm.png" alt="image_1bsd0v6gh19mv4sf1bqqg3r11onm.png-50.1kB"><br>退出；<code>source</code> 一下你的<code>bashrc</code>或者<code>zshrc</code> 文件；而后验证一下<br><img src="http://static.zybuluo.com/zhumin1990719/hcz8al62f1g3vre9bgt9jp4l/image_1bsd10p1o1c7r1u3r1nfot7bjp13.png" alt="image_1bsd10p1o1c7r1u3r1nfot7bjp13.png-24.7kB"></p>
<p>如此一来，你的编译器就安装好了。下面就是测试。</p>
<h2 id="编译与运行kotlin文件"><a href="#编译与运行kotlin文件" class="headerlink" title="编译与运行kotlin文件"></a>编译与运行kotlin文件</h2><p>首先；<code>vim</code> 编写一个简单的 <code>hello world</code> 文件 <code>HelloKotlin.kt</code>；</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    println(<span class="string">"Hello World"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二：编译与运行；<br>与 <code>java</code> 类似；<code>kotlinc HelloKotlin.kt</code> 编译； 运行 <code>kotlin HelloKotlinKt</code> 执行；如下图。<br><img src="http://static.zybuluo.com/zhumin1990719/3ey110j8y4kmrd929wsiicij/image_1bsd1do35ukb1rkq2ig1405gns1g.png" alt="image_1bsd1do35ukb1rkq2ig1405gns1g.png-28.6kB"></p>
<blockquote>
<p>这里需要注意的是；编译的时候产生的文件如下：<br><img src="http://static.zybuluo.com/zhumin1990719/b5b3drbmzxpa23iwu0ggjlqc/image_1bsd1fvvejdba7u9k18p31dd22d.png" alt="image_1bsd1fvvejdba7u9k18p31dd22d.png-31kB"><br>一个 <code>class</code> 文件；以及一个配置文件的文件夹。<br>这个 <code>class</code> 文件就是我们执行的文件；而编译器在文件末尾加上了 <code>Kt</code> 两个字母用于标记这个<code>Kotlin</code> 的编译文件。</p>
</blockquote>
<h2 id="反编译-class-文件"><a href="#反编译-class-文件" class="headerlink" title="反编译 class 文件"></a>反编译 class 文件</h2><p>既然是 <code>class</code> 文件；可以和<code>java</code>相互执行；<code>javap</code> 反编译一下看看 <code>class</code> 文件的结构。因为<code>kotlin</code> 文件中；我们是没有指定类的；那在<code>class</code> 文件中，一定是会生成类的；否则就和 <code>java</code> 的基本逻辑产生了冲突。我们看一下：<br><img src="http://static.zybuluo.com/zhumin1990719/kjorjwhsgfv2wjhcfec969en/image_1bsd1opuf1l6s1eoj5971t1p1kls3q.png" alt="image_1bsd1opuf1l6s1eoj5971t1p1kls3q.png-35.2kB"></p>
<p>可以反编译的更加彻底一点看下方法内部实现；命令是 <code>javap -c</code><br><img src="http://static.zybuluo.com/zhumin1990719/au3sbrpaw3rsyxbhf2tjyo14/image_1bsd1rjub1docjujtrk8ee1ur047.png" alt="image_1bsd1rjub1docjujtrk8ee1ur047.png-109.6kB"><br>可以看到；调用的都是 <code>java</code> 内部的方法。</p>
<h2 id="打包成jar"><a href="#打包成jar" class="headerlink" title="打包成jar"></a>打包成jar</h2><p>既然是在 <code>jvm</code> 上运行；一定是可以打成 <code>jar</code> 来执行的；<code>kotlinc</code> 提供了支持。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kotlinc HelloKotlin.kt -include-runtime -d HelloKotlin.jar</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>-include-runtime</code> 是将 <code>kotlin</code> 运行时所需要的包都包含进去的参数。</p>
</blockquote>
<p>而后就可以用 <code>java -jar</code> 来执行。得到一样的结果<br><img src="http://static.zybuluo.com/zhumin1990719/ktu7pxd1ue4p8p4vsei7lqls/image_1bsd239gj1t1911rq1lcnv4l10684k.png" alt="image_1bsd239gj1t1911rq1lcnv4l10684k.png-23.2kB"></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>以上说了如何编译和反编译<code>kotlin</code> 以及如何打成 <code>jar</code> 包运行。当然了一般情况下我们用不到这么麻烦，<code>intellij</code> 提供了很好的支持，但这有助于帮助我们理解 <code>kotlin</code> 与 <code>java</code> 的关系。也有注意我们更好的学习 <code>kotlin</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要描述 &lt;code&gt;kotlin&lt;/code&gt; 的简单编译与反编译的流程。以及与 &lt;code&gt;java&lt;/code&gt; 的关系。&lt;br&gt;之前说到 &lt;code&gt;kotlin&lt;/code&gt; 是一个静态的代码语言。他也是需要编译的。需要编译就有编译器；而他和&lt;code&gt;java&lt;/code&gt;又是可以相互调用的。所以隐隐约约感觉应该编译出来的东西和应该也和&lt;code&gt;java&lt;/code&gt; 相关；下面就来看一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>kotlin学习1 为何学习kotlin</title>
    <link href="http://yoursite.com/2017/10/14/kotlin%E5%AD%A6%E4%B9%A01-%E4%B8%BA%E4%BD%95%E5%AD%A6%E4%B9%A0kotlin/"/>
    <id>http://yoursite.com/2017/10/14/kotlin学习1-为何学习kotlin/</id>
    <published>2017-10-14T07:42:07.000Z</published>
    <updated>2017-10-14T08:27:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为何使用kotlin"><a href="#1-为何使用kotlin" class="headerlink" title="1 为何使用kotlin"></a>1 为何使用kotlin</h2><ul>
<li>这是一门强势技术</li>
</ul>
<p>语言那么多；不可能什么语言都学习。学习的一定是要有支撑有前景的语言。比如苹果的<code>swift</code>；即使是有呢么多问题；但是由于有苹果的背书</p>
<a id="more"></a>
<ul>
<li>他可以和java进行相互的调用</li>
<li>他解决了java无法通过迭代解决的问题</li>
<li>已经成为安卓的官方支持语言，发展前景很好</li>
<li>spring5 也提供了对kotlin的原生支持</li>
<li>官方文档齐全好用</li>
</ul>
<blockquote>
<p><a href="http://kotlinlang.org/docs/reference/basic-syntax.html" target="_blank" rel="external">http://kotlinlang.org/docs/reference/basic-syntax.html</a><br>可执行</p>
</blockquote>
<h3 id="1-2-kotlin-的特点"><a href="#1-2-kotlin-的特点" class="headerlink" title="1.2 kotlin 的特点"></a>1.2 kotlin 的特点</h3><p><img src="http://static.zybuluo.com/zhumin1990719/5raonicmc2dqbskdf001hafg/image_1bs6sjqm91tu3k8fu8a1l4ok8a9.png" alt="image_1bs6sjqm91tu3k8fu8a1l4ok8a9.png-80.9kB"></p>
<ul>
<li><p>简洁；一行代码解决所有 <code>getter</code> 和 <code>setter</code>; <code>it</code> 语法糖等等<br><img src="http://static.zybuluo.com/zhumin1990719/8xq7h590sr000r5ze0snl7u2/image_1bs6tdkff1ce325evtb1pia16aom.png" alt="image_1bs6tdkff1ce325evtb1pia16aom.png-134.7kB"></p>
</li>
<li><p>安全；使用 <code>optional</code> 避免NPE</p>
</li>
<li>相互操作；兼容所有jvm 和 Android的第三方库</li>
<li>良好的工具支持</li>
</ul>
<h2 id="2-简单代码示例"><a href="#2-简单代码示例" class="headerlink" title="2 简单代码示例"></a>2 简单代码示例</h2><p>通过 intellij；新建一个 <code>kotlin</code> 的项目；新建一个 <code>kotlin</code> 文件；</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/0g1fq8rd1lj6784rr4ptupgt/image_1bs6tp5vvc47ho929omcq1p9213.png" alt="image_1bs6tp5vvc47ho929omcq1p9213.png-59.8kB"></p>
<p>官网上有清晰的教程： <a href="http://kotlinlang.org/docs/tutorials/getting-started.html" target="_blank" rel="external">http://kotlinlang.org/docs/tutorials/getting-started.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.zhumin.kotlin.demo</div><div class="line"></div><div class="line">import java.util.function.Consumer</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line"></div><div class="line">    print(&quot;hello world&quot;)</div><div class="line"></div><div class="line">    val list : List&lt;String&gt; = listOf(&quot;hello&quot;, &quot;world&quot;, &quot;hello world&quot;)</div><div class="line"></div><div class="line">    // 遍历</div><div class="line">    for(str in list) &#123;</div><div class="line">        println(str)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    println(&quot;--------------------&quot;)</div><div class="line"></div><div class="line">    list.forEach (Consumer &#123;println(it)&#125;)</div><div class="line"></div><div class="line">    println(&quot;--------------------&quot;)</div><div class="line"></div><div class="line">    list.forEach(System.out::println)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到引入的是java中的包；对consumer的用法和java8也几乎是一模一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-为何使用kotlin&quot;&gt;&lt;a href=&quot;#1-为何使用kotlin&quot; class=&quot;headerlink&quot; title=&quot;1 为何使用kotlin&quot;&gt;&lt;/a&gt;1 为何使用kotlin&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这是一门强势技术&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语言那么多；不可能什么语言都学习。学习的一定是要有支撑有前景的语言。比如苹果的&lt;code&gt;swift&lt;/code&gt;；即使是有呢么多问题；但是由于有苹果的背书&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Netty 对 WebSocket的简单实现与剖析</title>
    <link href="http://yoursite.com/2017/06/07/Netty-%E5%AF%B9-WebSocket%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2017/06/07/Netty-对-WebSocket的简单实现与剖析/</id>
    <published>2017-06-07T10:42:07.000Z</published>
    <updated>2017-10-14T08:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要描述 <code>netty</code> 对 <code>WebSocket</code> 的支持。并编写一个简单 <code>demo</code>; 对 <code>WebSocket</code> 的内容做了简单剖析。</p>
<p>通过文章会了解为何 <code>WebSocket</code> 是 <code>HTTP</code> 协议升级而来； <code>netty</code> 是如何实现对他的支持等。</p>
<a id="more"></a>
<h2 id="WebSocket-的由来"><a href="#WebSocket-的由来" class="headerlink" title="WebSocket 的由来"></a>WebSocket 的由来</h2><h3 id="HTTP-协议的问题"><a href="#HTTP-协议的问题" class="headerlink" title="HTTP 协议的问题"></a>HTTP 协议的问题</h3><p><code>HTTP</code> 协议无状态，为了保持状态，引出了 <code>session</code> &amp; <code>cookies</code>等技术。</p>
<p><code>HTTP</code> 是基于 <code>请求</code> 和 <code>响应</code> 的，请求一定是客户端发出的。（1.1 还有 <code>keepAlive</code>, 持续连接，在一定时间可以进行连接的复用。）</p>
<p>导致的问题， 服务器无法推送数据。所以早期有客户端轮训技术。<br>会导致资源和网络带宽的浪费。因为 <code>Header</code> 数据每次都要构建。</p>
<h3 id="WebSocket-可以做到什么？"><a href="#WebSocket-可以做到什么？" class="headerlink" title="WebSocket 可以做到什么？"></a>WebSocket 可以做到什么？</h3><p><code>WebSocket</code> 来自 <code>Html5</code>; 所以是 <code>HTTP</code> 协议的一个升级版本</p>
<ul>
<li>协议可以建立浏览器和服务器之间的长连接。</li>
<li>可以实现服务端的push</li>
<li>只需要在一开始建立连接的时候构建 <code>Header</code>；其他时间都不需要再有 <code>Header</code> 信息</li>
</ul>
<blockquote>
<p>因为是基于 HTTP 的，所以建立连接的时候，发的请求是一个标准的 http  请求。只不过是在 <code>Header</code> 中添加了信息。</p>
</blockquote>
<p>虽然是基于 <code>Http</code> 的，但是不仅仅在 <code>浏览器上使用</code><br>也可以通过第三方的工具包在 <code>app</code> 端使用</p>
<h2 id="netty-对-webSocket-的简单实现"><a href="#netty-对-webSocket-的简单实现" class="headerlink" title="netty 对 webSocket 的简单实现"></a>netty 对 webSocket 的简单实现</h2><p>netty 功能众多，可以实现对 <code>HTTP</code> 的支持，可以实现高性能异步 <code>RPC</code> 的功能。同样，他也支持对 <code>WebSocket</code> 的支持。</p>
<p>虽然用过 <code>netty</code> 的人都说 <code>netty</code> 复杂，但是他无论简单和复杂的应用，写起来都是样的复杂，这样一来平均一下，只要你了解了规则，还是比较简单的2333</p>
<h3 id="netty-实现-websocket-服务端"><a href="#netty-实现-websocket-服务端" class="headerlink" title="netty 实现 websocket 服务端"></a>netty 实现 websocket 服务端</h3><p>三个步骤</p>
<ul>
<li>Server</li>
<li>Initializer</li>
<li>Handler</li>
</ul>
<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>因为你无论写什么 <code>Server</code> 都基本是这个套路：贴代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个示例主要用来阐述</div><div class="line"> * netty 对于 WebSocket 连接的支持</div><div class="line"> * 以及如何写一个简单的WebSocket demo</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)</div><div class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line">                    .childHandler(<span class="keyword">new</span> WebSocketChannelInitializer());</div><div class="line"></div><div class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8899</span>)).sync();</div><div class="line">            channelFuture.channel().closeFuture().sync();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            bossGroup.shutdownGracefully();</div><div class="line">            workerGroup.shutdownGracefully();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里简单解释下为什么有连个 group; 其实一个也没有问题。如果你才会用两个 group；那么 <code>bossGroup</code> 负责接收请求；而 <code>workerGroup</code> 负责处理请求</p>
</blockquote>
<h4 id="Initializer"><a href="#Initializer" class="headerlink" title="Initializer"></a>Initializer</h4><p><code>netty</code> 的各种复杂功能都是由各个 <code>handler</code> 实现的，实现 <code>WebSocket</code> 也是如此。没啥好说的，贴代码，看注释。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketChannelInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ChannelPipeline pipeline = ch.pipeline();</div><div class="line"></div><div class="line">        <span class="comment">// 因为是基于HTTP 协议之上的，所以需要使用到 HTTP 的编解码技术</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</div><div class="line">        <span class="comment">// 按照块来写数据 handler</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> ChunkedWriteHandler());</div><div class="line">        <span class="comment">// http request 和 response 的一个聚合类</span></div><div class="line">        <span class="comment">// netty 会对http 请求做分段的处理；所以在第一个 http 的示例中，有些会调用多次</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</div><div class="line"></div><div class="line">        <span class="comment">// web socket netty 的特殊支持</span></div><div class="line">        <span class="comment">// 其中 "ws" 是指的是 websocket 协议路径</span></div><div class="line">        <span class="comment">// 通常形式   ws://localhost:8899/ws</span></div><div class="line">        <span class="comment">// 8899/ws 后面的 ws 就是我传入的 /ws 路径。</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">"/ws"</span>));</div><div class="line">        <span class="comment">// 插入自定义的 TextWebSocketFrameHandler</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> TextWebSocketFrameHandler());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="TextWebSocketFrameHandler"><a href="#TextWebSocketFrameHandler" class="headerlink" title="TextWebSocketFrameHandler"></a>TextWebSocketFrameHandler</h4><p><code>WebSocket</code> 协议的传输是是以 <code>Frame</code> 作为单位的。这里我们处理的是 <code>Text</code> 这种类型的 <code>Frame</code>。<br>传统，贴代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextWebSocketFrameHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"接受到消息："</span> + msg.text());</div><div class="line">        <span class="comment">// 这里我们接受客户端传来的消息，返回我们当前时间</span></div><div class="line">        ctx.writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">"服务器时间："</span> + LocalTime.now()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"连接建立 : "</span> + ctx.channel().id().asLongText());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"连接断开 : "</span> + ctx.channel().id().asLongText());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"出异常"</span>);</div><div class="line">        ctx.close();</div><div class="line">        cause.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Frame</code> 一共有六种，我们可以从类的继承上看<br><img src="http://static.zybuluo.com/zhumin1990719/vhfib8y17vai9qufzhdar6lk/image_1bi10abjtij3k1fol91c5dkrq9.png" alt="image_1bi10abjtij3k1fol91c5dkrq9.png-138.7kB"><br>六种分别有不同的用途，从字面上都比较容易理解<br>至于为什么是六种？ 那是因为 <code>WebSocket</code> 协议就是这么规定的。</p>
</blockquote>
<h3 id="简单的网页客户端"><a href="#简单的网页客户端" class="headerlink" title="简单的网页客户端"></a>简单的网页客户端</h3><p>为了方便，我们就只用简单的 <code>JS</code> 来进行 <code>WebSocket</code> 的调用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">    var socket;</div><div class="line">    // 判断浏览器是不是支持</div><div class="line">    if(window.WebSocket) &#123;</div><div class="line">        socket = new WebSocket("ws://localhost:8899/ws")</div><div class="line">        socket.onmessage = function (event) &#123;</div><div class="line">            var ta = document.getElementById("responseText");</div><div class="line">            ta.value = ta.value + "\n" + event.data</div><div class="line">        &#125;</div><div class="line">        socket.onopen = function (event) &#123;</div><div class="line">            var ta = document.getElementById("responseText");</div><div class="line">            ta.value = "连接开启"</div><div class="line">        &#125;</div><div class="line">        socket.onclose = function (event) &#123;</div><div class="line">            var ta = document.getElementById("responseText");</div><div class="line">            ta.value = "连接关闭"</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        alert("浏览器不支持 WebSocket")</div><div class="line">    &#125;</div><div class="line">    // 发送消息</div><div class="line">    function send(message) &#123;</div><div class="line">        if(!window.WebSocket) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(socket.readyState == WebSocket.OPEN) &#123;</div><div class="line">            socket.send(message)</div><div class="line">        &#125; else &#123;</div><div class="line">            alert("连接尚未开启")</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;form onsubmit="return false;"&gt;</div><div class="line">    &lt;textarea name="message" style="width: 400px; height: 200px"&gt;&lt;/textarea&gt;</div><div class="line">    &lt;input type="button" value="发送数据" onclick="send(this.form.message.value)"/&gt;</div><div class="line">    &lt;h3&gt;服务端输出：&lt;/h3&gt;</div><div class="line">    &lt;textarea id="responseText" style="width: 400px; height: 200px"&gt;&lt;/textarea&gt;</div><div class="line">    &lt;input type="button" value="清空数据" onclick="javascript: document.getElementById('responseText').value=''"/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li><p>启动服务器：<br><img src="http://static.zybuluo.com/zhumin1990719/zx0v9dsjaum7lajszic0e65y/image_1bi10qil21u2ul2hhck541m1jm.png" alt="image_1bi10qil21u2ul2hhck541m1jm.png-89.1kB"></p>
</li>
<li><p>启动客户端</p>
</li>
</ul>
<p>简单的做发你可以在 <code>IntelliJ</code> 中直接运行 <code>html</code> 他会帮你起一个服务。或者你可以用 <code>Python</code> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m SimpleHTTPServer 8080</div></pre></td></tr></table></figure>
<p>我采用第一种：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/7n4gc92bqydxrl621vo7bsae/image_1bi1122017ar1ans1bm8fr71nm513.png" alt="image_1bi1122017ar1ans1bm8fr71nm513.png-64.4kB"><br>客户端显示连接已经建立</p>
<p>此时，你可以在服务器端看到我们要打出的信息<br><img src="http://static.zybuluo.com/zhumin1990719/gp12rirel4wu1dphfwbdn4e9/image_1bi11329c1gjgn4t1rnjvii1t7o1g.png" alt="image_1bi11329c1gjgn4t1rnjvii1t7o1g.png-41.2kB"></p>
<p>然后你可以通过客户端给服务器发送消息：比如我发送</p>
<blockquote>
<p>敏哥好帅<br>还用你所？</p>
</blockquote>
<p>服务端会收到：<br><img src="http://static.zybuluo.com/zhumin1990719/7s4ne8auqwdfjwf5ao0f5hgf/image_1bi116pi91bq35iqpn4150u1t9h1t.png" alt="image_1bi116pi91bq35iqpn4150u1t9h1t.png-41.9kB"></p>
<p>客户端也会收到服务端的时间：<br><img src="http://static.zybuluo.com/zhumin1990719/a0ftuajhha27h8d5npao2mz4/image_1bi117a54qu0k151sfo98a1q6t2a.png" alt="image_1bi117a54qu0k151sfo98a1q6t2a.png-17.4kB"></p>
<p>至此，我们可以的这个例子就成功运行了，你停止服务器会看到客户端输出 <code>连接关闭</code>； 你关闭客户端，会看见服务端输出 <code>连接断开</code>。</p>
<h3 id="更近一步，基于-frame-基于-http"><a href="#更近一步，基于-frame-基于-http" class="headerlink" title="更近一步，基于 frame ? 基于 http ?"></a>更近一步，基于 frame ? 基于 http ?</h3><h4 id="基于-frame-的信息传递"><a href="#基于-frame-的信息传递" class="headerlink" title="基于 frame 的信息传递"></a>基于 frame 的信息传递</h4><p>刚刚说到，<code>WebSocket</code> 在建立长连接后，不需要在传递头信息。我们可以代开 <code>Chrome</code> 的控制台看一下：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/6xc9j5iqby6fbn3oj37sb32k/image_1bi11g7qkkrtt5ud4sop536d2n.png" alt="image_1bi11g7qkkrtt5ud4sop536d2n.png-149.2kB"></p>
<p>我们能看到的是 <code>ws</code> 的连接的信息里有个 <code>Frames</code> 的标签，你传输的信息都在这里。</p>
<h4 id="WebSocket-连接是基于-HTTP-升级的？"><a href="#WebSocket-连接是基于-HTTP-升级的？" class="headerlink" title="WebSocket 连接是基于 HTTP 升级的？"></a>WebSocket 连接是基于 HTTP 升级的？</h4><p>我们可以刷新一下你的客户端的网页，观察下 network 的输出：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/sxu6eoau4d10t21cy45v5ijr/image_1bi11n5ke12tr19kve631ot01p6a34.png" alt="image_1bi11n5ke12tr19kve631ot01p6a34.png-153kB"><br>注意看出了 <code>js</code> 之外的连个请求：第一个就是基本的 <code>http</code> 请求，状态的 <code>304</code></p>
<p><img src="http://static.zybuluo.com/zhumin1990719/c3lmwkxat1yv6xxvwexfggq7/image_1bi11pgoo1kdfao6mi3r8e1i6p3h.png" alt="image_1bi11pgoo1kdfao6mi3r8e1i6p3h.png-135.4kB"></p>
<p>重点在看一下下面的 <code>ws</code> , 他是一个 <code>WebSocket</code> 请求：<br><img src="http://static.zybuluo.com/zhumin1990719/t8ga6azf75757rytx4xcba7d/image_1bi11rlob15li1k8r1ars5pt1mb33u.png" alt="image_1bi11rlob15li1k8r1ars5pt1mb33u.png-166.7kB"></p>
<p><code>request</code> 中还有一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Upgrade:websocket</div></pre></td></tr></table></figure></p>
<p>的内容，就是它将协议由 <code>http</code> 协议升级成为了 <code>websocket</code> 协议。<br>所以就是这么回事</p>
<p>所以，<code>websocket</code> 需要浏览器的支持。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li><code>jdk8</code></li>
<li><code>netty 4.1.10.Final</code></li>
<li><code>gradle</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要描述 &lt;code&gt;netty&lt;/code&gt; 对 &lt;code&gt;WebSocket&lt;/code&gt; 的支持。并编写一个简单 &lt;code&gt;demo&lt;/code&gt;; 对 &lt;code&gt;WebSocket&lt;/code&gt; 的内容做了简单剖析。&lt;/p&gt;
&lt;p&gt;通过文章会了解为何 &lt;code&gt;WebSocket&lt;/code&gt; 是 &lt;code&gt;HTTP&lt;/code&gt; 协议升级而来； &lt;code&gt;netty&lt;/code&gt; 是如何实现对他的支持等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="netty" scheme="http://yoursite.com/tags/netty/"/>
    
      <category term="websocket" scheme="http://yoursite.com/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>老妈的生活哲学</title>
    <link href="http://yoursite.com/2017/05/07/%E6%9C%B1%E8%80%81%E5%B8%88%E4%B8%8E%E8%80%81%E5%A6%88%E7%9A%84%E7%94%9F%E6%B4%BB%E7%BB%86%E8%8A%82/"/>
    <id>http://yoursite.com/2017/05/07/朱老师与老妈的生活细节/</id>
    <published>2017-05-07T05:28:51.000Z</published>
    <updated>2017-05-07T05:35:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近家里人感冒的多，姐姐的双胞胎，小的那个被我们带到舅舅家。</p>
<p>中午，我去我妈那里;</p>
<p><strong><em>我</em></strong>：老妈，今晚舅妈有事儿，我带小宝贝，你给我送点饭。</p>
<p><strong><em>老妈</em></strong>：你中午剩的饭你热热就好啦。</p>
<p><strong><em>我</em></strong> ： 。。。那我叫外卖。。</p>
<p><strong><em>老妈</em></strong> ： 那我也去吃 😌</p>
<p>– The End –</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近家里人感冒的多，姐姐的双胞胎，小的那个被我们带到舅舅家。&lt;/p&gt;
&lt;p&gt;中午，我去我妈那里;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;我&lt;/em&gt;&lt;/strong&gt;：老妈，今晚舅妈有事儿，我带小宝贝，你给我送点饭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;老妈&lt;/em&gt;&lt;/
    
    </summary>
    
    
      <category term="生活细节" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E7%BB%86%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上搭建 Anaconda, 远程访问 juypter</title>
    <link href="http://yoursite.com/2017/05/05/Linux-%E4%B8%8A%E6%90%AD%E5%BB%BA-Anaconda-%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE-juypter/"/>
    <id>http://yoursite.com/2017/05/05/Linux-上搭建-Anaconda-远程访问-juypter/</id>
    <published>2017-05-05T09:10:35.000Z</published>
    <updated>2017-05-05T09:15:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是-Anaconda"><a href="#1-什么是-Anaconda" class="headerlink" title="1 什么是 Anaconda"></a>1 什么是 Anaconda</h3><p>Anaconda 能让你轻松安装在数据科学工作中经常使用的包。你还将使用它创建虚拟环境，以便更轻松地处理多个项目。Anaconda 简化了我的工作流程，并且解决了我在处理包和多个 Python 版本时遇到的大量问题。</p>
<a id="more"></a>
<p>Anaconda 实际上是一个软件发行版，它附带了 conda、Python 和 150 多个科学包及其依赖项。应用程序 conda 是包和环境管理器。Anaconda 的下载文件比较大（约 500 MB），因为它附带了 Python 中最常用的数据科学包。如果只需要某些包，或者需要节省带宽或存储空间，也可以使用 Miniconda 这个较小的发行版（仅包含 conda 和 Python）。你仍可以使用 conda 来安装任何可用的包，它只是没有附带这些包而已。</p>
<p>除了管理包之外，conda 还是虚拟环境管理器。它类似于另外两个很流行的环境管理器，即 virtualenv 和 pyenv</p>
<p>环境能让你分隔你要用于不同项目的包。你常常要使用依赖于某个库的不同版本的代码。例如，你的代码可能使用了 Numpy 中的新功能，或者使用了已删除的旧功能。实际上，不可能同时安装两个 Numpy 版本。你要做的应该是，为每个 Numpy 版本创建一个环境，然后在适用于项目的环境中工作。</p>
<p>在应对 Python 2 和 Python 3 时，此问题也会常常发生。你可能会使用在 Python 3 中不能运行的旧代码，以及在 Python 2 中不能运行的新代码。同时安装两个版本可能会造成许多混乱和错误。而创建独立的环境会好很多。</p>
<p>也可以将环境中的包的列表导出为文件，然后将该文件与代码包括在一起。这能让其他人轻松加载代码的所有依赖项。pip 提供了类似的功能，即 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip freeze &gt; requirements.txt。</div></pre></td></tr></table></figure>
<h3 id="2-为什么使用-conda-而不是-virtualenv"><a href="#2-为什么使用-conda-而不是-virtualenv" class="headerlink" title="2 为什么使用 conda 而不是 virtualenv?"></a>2 为什么使用 conda 而不是 virtualenv?</h3><p><img src="http://static.zybuluo.com/zhumin1990719/cgmj2er08c6xivvx1wmlni09/14937979458924.jpg" alt="14937979458924.jpg-832.6kB"></p>
<h3 id="3-安装过程"><a href="#3-安装过程" class="headerlink" title="3 安装过程"></a>3 安装过程</h3><h4 id="1-下载-，上传到机器"><a href="#1-下载-，上传到机器" class="headerlink" title="1 下载 ，上传到机器"></a>1 下载 ，上传到机器</h4><p>你也可以在机器 <code>wget</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://repo.continuum.io/archive/Anaconda2-4.3.1-Linux-x86_64.sh</div></pre></td></tr></table></figure>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh Anaconda2-4.3.1-Linux-x86_64.sh</div></pre></td></tr></table></figure>
<p>选择安装目录。为了节约 根目录空间，安装在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 目录事先必须不存在</div><div class="line">/data/min.zhu/anaconda2</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/zhumin1990719/trullxxzkf24s8z8xbhppybo/14937997286423.jpg" alt="14937997286423.jpg-166kB"></p>
<p>下面</p>
<p>source 一下 <code>.bashrc</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure>
<h4 id="3-设置国内Anaconda源"><a href="#3-设置国内Anaconda源" class="headerlink" title="3 设置国内Anaconda源"></a>3 设置国内Anaconda源</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加Anaconda的TUNA镜像</span></div><div class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</div><div class="line"><span class="comment"># TUNA的help中镜像地址加有引号，需要去掉# 设置搜索时显示通道地址</span></div><div class="line">conda config --set show_channel_urls yes</div></pre></td></tr></table></figure>
<h4 id="4-安装需要的环境"><a href="#4-安装需要的环境" class="headerlink" title="4 安装需要的环境"></a>4 安装需要的环境</h4><p>比如安装 3.5 的python</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create -n lr3 python=3.5</div></pre></td></tr></table></figure>
<p>激活</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source activate lr3</div></pre></td></tr></table></figure>
<p>之后进入虚拟环境</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/us41d1smtqaxgfxt558kbeyn/14927645672574.jpg" alt="14927645672574.jpg-153.7kB"></p>
<p>可以在通过 <code>conda</code> 进行包的管理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda install xxx</div></pre></td></tr></table></figure>
<h4 id="5-修改-pip-源为阿里源"><a href="#5-修改-pip-源为阿里源" class="headerlink" title="5 修改 pip 源为阿里源"></a>5 修改 pip 源为阿里源</h4><p>因为有些包点评直接就没有 比如 <code>tflearn</code> 和 <code>tensorflow</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim ~/.pip/pip.conf</div><div class="line">trusted-host=mirrors.aliyun.com</div><div class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</div></pre></td></tr></table></figure>
<h4 id="6-远程juypter-访问"><a href="#6-远程juypter-访问" class="headerlink" title="6 远程juypter 访问"></a>6 远程juypter 访问</h4><p>首先，不建议使用root , 当你使用 root 的时候，需要使用如下方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook --allow-root</div></pre></td></tr></table></figure>
<p>第二，远程服务器访问需要做一些配置</p>
<p>可以参考如下文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://blog.leanote.com/post/jevonswang/远程访问jupyter-notebook</div></pre></td></tr></table></figure>
<p>进行配置</p>
<h3 id="4-管理环境"><a href="#4-管理环境" class="headerlink" title="4 管理环境"></a>4 管理环境</h3><p>如果你安装了多个环境，但是不记得名字，或者想修改的话，通过 <code>conda-env</code> 这个命令就可以看到你所有的环境了。 可以看到附带所有操作<br><img src="http://static.zybuluo.com/zhumin1990719/87mdmv1tpyp79dnmy8mdzhye/14931020058855.jpg" alt="14931020058855.jpg-188.6kB"></p>
<p>比如 <code>conda-env list</code> 就是查看所有命令的格式</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是-Anaconda&quot;&gt;&lt;a href=&quot;#1-什么是-Anaconda&quot; class=&quot;headerlink&quot; title=&quot;1 什么是 Anaconda&quot;&gt;&lt;/a&gt;1 什么是 Anaconda&lt;/h3&gt;&lt;p&gt;Anaconda 能让你轻松安装在数据科学工作中经常使用的包。你还将使用它创建虚拟环境，以便更轻松地处理多个项目。Anaconda 简化了我的工作流程，并且解决了我在处理包和多个 Python 版本时遇到的大量问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="conda" scheme="http://yoursite.com/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.x 如何升级 glibc 2.17</title>
    <link href="http://yoursite.com/2017/05/05/CentOS-6-x-%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7-glibc-2-17/"/>
    <id>http://yoursite.com/2017/05/05/CentOS-6-x-如何升级-glibc-2-17/</id>
    <published>2017-05-05T08:55:00.000Z</published>
    <updated>2017-05-05T10:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>本文描述如何在 <code>CentOS 6.x</code> 升级蛋疼的 <code>glibc 2.17</code>.</p>
<p>学习机器的内容，需要用到 <code>tensorFlow</code>, 在自己 <code>Mac</code> 上跑太心疼了。 于是尝试在公司的测试机上跑。然而我搭建好 <code>conda</code>, <code>jupyter notebook</code> , 引入 <code>tf</code> 的时候报错。<br>（关于如何 安装科学计算环境，以及远程访问 <code>jupyter notebook</code>, 请看下一篇文章）</p>
<p>如下<br><img src="http://static.zybuluo.com/zhumin1990719/1qx1afr47y8ok3gyzwlqobeu/image_1bfbrng2h1mgr110uuqj1l0239n9.png" alt="image_1bfbrng2h1mgr110uuqj1l0239n9.png-26.6kB"></p>
<a id="more"></a>
<p>在一看机器上的情况 最高只有 2.15<br><img src="http://static.zybuluo.com/zhumin1990719/iey92s8tqlehk14a5dddq5lo/image_1bfbrqvjh3eg1qjl1g0i1d1r3kvm.png" alt="image_1bfbrqvjh3eg1qjl1g0i1d1r3kvm.png-55.9kB"></p>
<p>其实已经是运维升级过了的，默认只到 12。主要还是我们的系统版本太低。</p>
<blockquote>
<p>CentOS 7.X，GLIBC 已经到 <code>2.17</code>，GCC 也是 <code>4.8.5</code><br>但是对于公司来说，稳定是第一位的。所以。。。</p>
</blockquote>
<h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><p>两种方法，一种源码编译，一种是用 rpm 来安装，之前看到这篇文章<a href="http://blog.ttionya.com/article-1559.html" target="_blank" rel="external">点这里</a>，其实说的还蛮好的，但是只是升级到 <code>2.15</code>， 而最新的 <code>tf 1.1</code> 版本，需要 <code>2.17</code> 的版本。</p>
<p>其实问题最大的就是找不到给 <code>CentOS 6.x</code> 用的 <code>2.17</code> 的 <code>rpm</code> 包，直到今日，我搜到了有人昨天发布一段脚本，才算找到了解决方法<br>，直接给链接 <a href="https://gist.github.com/harv/f86690fcad94f655906ee9e37c85b174" target="_blank" rel="external">感激万分的点这里</a></p>
<p>你不愿点看，我就写下来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"></div><div class="line"># update glibc to 2.17 for CentOS 6</div><div class="line"></div><div class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-2.17-55.el6.x86_64.rpm</div><div class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-common-2.17-55.el6.x86_64.rpm</div><div class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-devel-2.17-55.el6.x86_64.rpm</div><div class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-headers-2.17-55.el6.x86_64.rpm</div><div class="line"></div><div class="line">sudo rpm -Uvh glibc-2.17-55.el6.x86_64.rpm \</div><div class="line">glibc-common-2.17-55.el6.x86_64.rpm \</div><div class="line">glibc-devel-2.17-55.el6.x86_64.rpm \</div><div class="line">glibc-headers-2.17-55.el6.x86_64.rpm</div></pre></td></tr></table></figure>
<p>其实就是下载资源，然后用 <code>rpm</code> 安装。</p>
<h2 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h2><p>当你执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh glibc-2.17-55.el6.x86_64.rpm \ </div><div class="line">glibc-common-2.17-55.el6.x86_64.rpm \ </div><div class="line">glibc-devel-2.17-55.el6.x86_64.rpm \ </div><div class="line">glibc-headers-2.17-55.el6.x86_64.rpm</div></pre></td></tr></table></figure>
<p>的时候会报错</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/qbu7fz3fl6784ng3k9nv7dkm/image_1bfbsmbs2h3m1o5t163o1luhkhe13.png" alt="image_1bfbsmbs2h3m1o5t163o1luhkhe13.png-84.4kB"></p>
<p>解决方案：<br>命令结尾加上参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--force --nodeps</div></pre></td></tr></table></figure>
<p>原因可以看这篇文章 <a href="http://blog.csdn.net/wulantian/article/details/8804696" target="_blank" rel="external">点这里</a>，造成这个问题的主要原因是套件被重複 (强制) 安装了两次以上. 可以用上面的命令进行依赖忽略，也可以卸载。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>搜索的关键词真的很重要，谷歌很重要，英语很重要。</li>
<li>运气很重要(这个问题折腾我两个礼拜)</li>
<li>别用百度搜技术问题。</li>
</ul>
<h2 id="还有，如果你手动编译安装glibc。。。。"><a href="#还有，如果你手动编译安装glibc。。。。" class="headerlink" title="还有，如果你手动编译安装glibc。。。。"></a>还有，如果你手动编译安装glibc。。。。</h2><p>万一你安装失败就会导致系统各种命令无法执行。。千万别退出。。你一旦退出，就无法登陆了，只能用光盘恢复系统了。。</p>
<p>但是这篇文章里的方法，可以试一试 <a href="https://cnodejs.org/topic/56dc21f1502596633dc2c3dc" target="_blank" rel="external">解决方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;本文描述如何在 &lt;code&gt;CentOS 6.x&lt;/code&gt; 升级蛋疼的 &lt;code&gt;glibc 2.17&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;学习机器的内容，需要用到 &lt;code&gt;tensorFlow&lt;/code&gt;, 在自己 &lt;code&gt;Mac&lt;/code&gt; 上跑太心疼了。 于是尝试在公司的测试机上跑。然而我搭建好 &lt;code&gt;conda&lt;/code&gt;, &lt;code&gt;jupyter notebook&lt;/code&gt; , 引入 &lt;code&gt;tf&lt;/code&gt; 的时候报错。&lt;br&gt;（关于如何 安装科学计算环境，以及远程访问 &lt;code&gt;jupyter notebook&lt;/code&gt;, 请看下一篇文章）&lt;/p&gt;
&lt;p&gt;如下&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/1qx1afr47y8ok3gyzwlqobeu/image_1bfbrng2h1mgr110uuqj1l0239n9.png&quot; alt=&quot;image_1bfbrng2h1mgr110uuqj1l0239n9.png-26.6kB&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
  </entry>
  
  <entry>
    <title>jdk8 一个颠覆了面向对象认知的例子</title>
    <link href="http://yoursite.com/2017/05/03/jdk8-%E4%B8%80%E4%B8%AA%E9%A2%A0%E8%A6%86%E4%BA%86%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%A4%E7%9F%A5%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2017/05/03/jdk8-一个颠覆了面向对象认知的例子/</id>
    <published>2017-05-03T15:27:20.000Z</published>
    <updated>2017-05-03T15:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1 起源"></a>1 起源</h2><p>如果你看了上一篇文章关于 <code>Spliterator</code> 分割迭代器，最后一部分说到了图中的两个强制转换逻辑的不合理之处。</p>
<ul>
<li>第一处，我传入的是一个 <code>Consumer</code> 接口，但是判断的情况却是判断 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">action <span class="keyword">instanceof</span>  IntConsumer</div></pre></td></tr></table></figure>
<p>而 IntConsumer 和 Consumer 是没有继承关系的平行函数式接口。这样的转换为何会成功？</p>
<ul>
<li>第二处，当第一个判断条件不满足的是时候，使用（IntConsumer）强转 <code>lambda</code> 表达式，这样为何能成功被需要传入 <code>IntConsumer</code> 函数所接受呢？</li>
</ul>
<p>如下图：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/b5fvbgzis7apng5pcmv4rxfj/image_1bf48rn8nbi1lrs1hgq1f72ass1t.png" alt="image_1bf48rn8nbi1lrs1hgq1f72ass1t.png-236.6kB"></p>
<a id="more"></a>
<h2 id="2-尝试解释看看喽"><a href="#2-尝试解释看看喽" class="headerlink" title="2 尝试解释看看喽"></a>2 尝试解释看看喽</h2><h3 id="先看第二处：lambda表达式也可以强转？"><a href="#先看第二处：lambda表达式也可以强转？" class="headerlink" title="先看第二处：lambda表达式也可以强转？"></a>先看第二处：lambda表达式也可以强转？</h3><p>我们先写一个类似的例子，有一个需要传入 <code>Consumer</code> 的方法，我们尝试传入一个 <code>IntConsumer</code> 会发生什么情况。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Integer&gt; consumer)</span> </span>&#123;</div><div class="line">        System.out.println(consumer <span class="keyword">instanceof</span> IntConsumer);</div><div class="line">        consumer.accept(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ConsumerTest consumerTest = <span class="keyword">new</span> ConsumerTest();</div><div class="line"></div><div class="line">        Consumer&lt;Integer&gt; consumer = i -&gt; System.out.println(i);</div><div class="line">        IntConsumer intConsumer = i -&gt; System.out.println(i);</div><div class="line"></div><div class="line">        consumerTest.test(consumer);  <span class="comment">// 面向对象的方式</span></div><div class="line">        consumerTest.test(consumer::accept); <span class="comment">// 函数式的方式</span></div><div class="line">        consumerTest.test(intConsumer::accept); <span class="comment">// 函数式的方式</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子的输出结果是：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/twikzu01ww4e7t9u8x63tw9h/image_1bf77758l13l11agu1ekeshv1134l.png" alt="image_1bf77758l13l11agu1ekeshv1134l.png-28kB"></p>
<p>我们发现这三种传入方式都是可以的，第一第二种没什么好说的，因为 <code>Test</code> 方法就是需要传入一个 <code>Consumer</code>， 无论你使用原来传递对象的方式，还是通过方法引用的方法，都是没有问题，可以被执行。</p>
<p>问题在于，第三种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consumerTest.test(intConsumer::accept); <span class="comment">// 函数式的方式</span></div></pre></td></tr></table></figure>
<p>当你按住 command 把鼠标放在双冒号的时候 出现的如下：<br><img src="http://static.zybuluo.com/zhumin1990719/kk9ld6ktzbhctlv3xitujalv/image_1bf7diai619ibfi64uk13hp1viv1s.png" alt="image_1bf7diai619ibfi64uk13hp1viv1s.png-121.5kB"></p>
<p>当你按住 command 把鼠标放在的 <code>accept</code> 时候 出现的如下：<br><img src="http://static.zybuluo.com/zhumin1990719/wne2ek9nxhs90tx5zygzc7cc/image_1bf7dhepa1cpp7gi28b1r7v1m3r1f.png" alt="image_1bf7dhepa1cpp7gi28b1r7v1m3r1f.png-155.1kB"></p>
<p>双冒号代表是的当前 <code>lambda</code> 表达式的类型。因为你看我初始化两个consumer的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Consumer&lt;Integer&gt; consumer = i -&gt; System.out.println(i);</div><div class="line">IntConsumer intConsumer = i -&gt; System.out.println(i);</div></pre></td></tr></table></figure>
<p>我后面的表达式是一模一样的。但是却可以赋予两个不同的类型。<br>所以，重点来了</p>
<blockquote>
<p>重点是 lambda 表达式的类型，<code>是要靠上下文进行推断的</code>。</p>
</blockquote>
<p>这个是和传统面向的编程不一样的地方。需要注意。<br>刚刚上面的第三种调用的方式，就是如此，编译器推断出，你这个 <code>lambda</code> 表达式 <code>intConsumer::accept</code> 肯定是 <code>Consumer&lt;T super Integer&gt;</code> 类型的。所以不报错而这个时候如果你前面加一个强制转换，就像文章一开始的那张图的第二个强转逻辑一样，也是可以的。不过，略显多余就是了。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/s65e3diseksbvgh87sgxu6t5/image_1bf7e1upp1aa69mamubh2krap29.png" alt="image_1bf7e1upp1aa69mamubh2krap29.png-57.5kB"></p>
<h3 id="在看第一处"><a href="#在看第一处" class="headerlink" title="在看第一处"></a>在看第一处</h3><p>那么什么情况下，才会出现第一种情况，传入的是 <code>Consumer</code> ，但却同时是 <code>instanceof IntConsumer</code> 呢？</p>
<p>对了！（对什么对，你又没想到）就是这样，你同时继承者两个接口就可以了呀！</p>
<p>上代码！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by charleszhu on 2017/5/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</div><div class="line">    <span class="comment">// 要求传入 Consumer</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInt</span><span class="params">(Consumer&lt;Integer&gt; consumer)</span> </span>&#123;</div><div class="line">        <span class="comment">// 判断是否为 IntConsumer</span></div><div class="line">        System.out.println(consumer <span class="keyword">instanceof</span> IntConsumer);</div><div class="line">        consumer.accept(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        ConsumerTest consumerTest = <span class="keyword">new</span> ConsumerTest();</div><div class="line"></div><div class="line">        consumerTest.testInt(<span class="keyword">new</span> MyConsumer2&lt;&gt;());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 同时实现两个方法</div><div class="line"> * <span class="doctag">@param</span> &lt;Integer&gt;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConsumer2</span>&lt;<span class="title">Integer</span>&gt; <span class="keyword">implements</span> <span class="title">IntConsumer</span>, <span class="title">Consumer</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        System.out.println(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer t)</span> </span>&#123;</div><div class="line">        System.out.println(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行一下结果：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/sfq22rxzqdmtkaqpnlpiqeko/image_1bf7ehq7bgaj1qrg8k61eiq1e1b2m.png" alt="image_1bf7ehq7bgaj1qrg8k61eiq1e1b2m.png-28.5kB"></p>
<p>就可以发现，这个时候就和开头的那个例子中的，第一处转换： 需要传入的是 <code>Consumer</code>, 但是也是 <code>IntConsumer</code> 的实例，就会进入第一个判断了</p>
<p>至此两个强转就解释完毕了！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个例子想给大家说的就是函数式接口的很传统的命令式编程还是有一定差别的。尤其是 <code>lambda</code> 表达式的类型是要靠上下文推断的这一点，需要好好的理解~</p>
<p>只有慢慢理解这些，才能真正理解函数式编程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-起源&quot;&gt;&lt;a href=&quot;#1-起源&quot; class=&quot;headerlink&quot; title=&quot;1 起源&quot;&gt;&lt;/a&gt;1 起源&lt;/h2&gt;&lt;p&gt;如果你看了上一篇文章关于 &lt;code&gt;Spliterator&lt;/code&gt; 分割迭代器，最后一部分说到了图中的两个强制转换逻辑的不合理之处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一处，我传入的是一个 &lt;code&gt;Consumer&lt;/code&gt; 接口，但是判断的情况却是判断 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;action &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt;  IntConsumer&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而 IntConsumer 和 Consumer 是没有继承关系的平行函数式接口。这样的转换为何会成功？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二处，当第一个判断条件不满足的是时候，使用（IntConsumer）强转 &lt;code&gt;lambda&lt;/code&gt; 表达式，这样为何能成功被需要传入 &lt;code&gt;IntConsumer&lt;/code&gt; 函数所接受呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/b5fvbgzis7apng5pcmv4rxfj/image_1bf48rn8nbi1lrs1hgq1f72ass1t.png&quot; alt=&quot;image_1bf48rn8nbi1lrs1hgq1f72ass1t.png-236.6kB&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk8 Stream 解析2 - Spliterator分割迭代器</title>
    <link href="http://yoursite.com/2017/05/02/jdk8-Stream-%E8%A7%A3%E6%9E%902-Spliterator%E5%88%86%E5%89%B2%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://yoursite.com/2017/05/02/jdk8-Stream-解析2-Spliterator分割迭代器/</id>
    <published>2017-05-02T09:48:43.000Z</published>
    <updated>2017-05-02T09:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>说完<code>Stream</code> 的一些源码解析。我们看下我们的 <code>Stream</code> 是如何产生的。我们最为常见的流的产生方式是 <code>collection.stream()</code>, 你点开<code>Stream()</code>方法, 他是通过 <code>Collection</code> 这个上层接口两个java8 新增特性 <code>default method</code> 进行实现。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/x7mirnxozw9czo58sgxezv03/image_1bf3u1l911o5rf825gv39aqe9.png" alt="image_1bf3u1l911o5rf825gv39aqe9.png-41.3kB"></p>
<p>这就牵扯到一个关键要点 <code>Spliterator</code> ：分割迭代器。</p>
<p>本文主要描述 <code>Spliterator</code> 的作用，大部分来源于你不愿意读的 <code>JavaDoc</code>。</p>
<p><code>Spliterator</code> 是 <code>jdk8</code> 非常重要的概念。里面的细节很值得学习玩味。</p>
<a id="more"></a>
<h2 id="Spliterator-冗长的JavaDoc-说了什么？"><a href="#Spliterator-冗长的JavaDoc-说了什么？" class="headerlink" title="Spliterator 冗长的JavaDoc 说了什么？"></a>Spliterator 冗长的JavaDoc 说了什么？</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><code>Spliterator</code> 是一个对源（数组，集合，io流等等）中元素进行遍历和分区的类。</p>
<p>可以通过 <code>tryAdvance()</code> 方法逐个遍历，也可以按照 <code>forEachRemaining()</code> 方法进行按 <em>bulk</em> 逐块的遍历。（内部调用的还是<em>tryAdvance</em>）</p>
<p><code>Spliterator</code> 有类似 <code>Collector</code> 中的 <code>characteristics</code> , 但都是由十六进制来表示的。</p>
<blockquote>
<ul>
<li>SIZED :表示大小固定, Collection常用</li>
<li>DISTINCT : 去重, Set常用</li>
<li>SORTED : 有顺序的 SortedSet 会用<br>等等</li>
</ul>
</blockquote>
<h3 id="原生类型的特化版本"><a href="#原生类型的特化版本" class="headerlink" title="原生类型的特化版本"></a>原生类型的特化版本</h3><p>特化分割迭代器也被提供，和Stream类似。减少装箱和拆箱的操作<br><img src="http://static.zybuluo.com/zhumin1990719/fdux697e4pizzdyhgfsb51lx/image_1bf3vbfdl10r5vl7ef8t47kium.png" alt="image_1bf3vbfdl10r5vl7ef8t47kium.png-128.9kB"></p>
<h3 id="比迭代器Iterator-更加高效的遍历元素的方式"><a href="#比迭代器Iterator-更加高效的遍历元素的方式" class="headerlink" title="比迭代器Iterator 更加高效的遍历元素的方式"></a>比迭代器Iterator 更加高效的遍历元素的方式</h3><p>提供更加高效的方法，进行数据的迭代。<br><code>Iterator</code> 的使用需要调用两个组合方法 <code>hasNext()</code> 以及 <code>next()</code> ，同事在多线程访问的情况下还会出现竞争，你需要去同步。<br>而分割迭代器 <code>Spliterator</code> 使用函数式编程的方式，只用一个方法就可以做到这个两个函数动作。就避免了竞争 ，就是 <code>tryAdvance()</code> 方法。后面会介绍</p>
<h2 id="Spliterator的接口方法"><a href="#Spliterator的接口方法" class="headerlink" title="Spliterator的接口方法"></a>Spliterator的接口方法</h2><h3 id="tryAdvance"><a href="#tryAdvance" class="headerlink" title="tryAdvance()"></a>tryAdvance()</h3><p>同时做了  <code>hasNext()</code> 以及 <code>next()</code> 的工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 对给定的元素进行判断，如果满足条件就会执行 Action</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="forEachRemaining"><a href="#forEachRemaining" class="headerlink" title="forEachRemaining()"></a>forEachRemaining()</h3><p>是一个<code>默认方法</code>，对余下的元素进行操作，直到元素全部被遍历完<br>一般情况下回直接调用上面的<code>tryAdvance()</code> 方法，但是也可以更具需要进行重写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 对余下的元素进行操作，直到元素全部被遍历完</div><div class="line">* 如果源是有序的，遍历也是有序的</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</div><div class="line">        <span class="keyword">do</span> &#123; &#125; <span class="keyword">while</span> (tryAdvance(action));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里有一点很值得注意，方法体中的 <code>do {}</code> 是空的，这个是因为 <code>tryAdvance()</code> 方法本身就完成了两个操作 <code>hasNext()</code> 以及 <code>next()</code>，所以方法体中不需要有任何操作了。这个是 函数式编程带来的好处。以及与命令式编程的区别。</p>
</blockquote>
<h3 id="trySplit"><a href="#trySplit" class="headerlink" title="trySplit()"></a>trySplit()</h3><p>尝试切分源来的 <code>Spliterator</code>， 返回的是（注意！！！）返回的是 <strong><code>分割出来的那一部分</code></strong> 数据，原有的数据集将不在包含这部分数据集合。两者 <code>没有交集</code>。剩下的可以继续分割，也许不可以继续分割了</p>
<blockquote>
<p>举个例子，我原来有 100个元素，我通过 <code>trySplit</code> 切分出 <code>30</code> 个，作为一个新的 <code>分割迭代器</code> 返回，原有的，就还剩下 <code>70</code> 个。</p>
</blockquote>
<ul>
<li>如果是原有数据集合是 <code>ORDERD</code> 的，分出来的也是有序的。</li>
<li>除非元素数量是无穷的，否则，最后一定会出现不能在分割的情况，这种情况下，返回的结果是 <code>null</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Spliterator&lt;T&gt; <span class="title">trySplit</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="estimateSize"><a href="#estimateSize" class="headerlink" title="estimateSize()"></a>estimateSize()</h3><p>估算集合剩余给<code>forEachRemaining</code>大小，不一定精确。<br>但是如果这个 <code>Spliterator</code> 是 <code>SIZED</code>，没有被遍历或者 split， 或是 <code>SUBSIZED</code>的，没有被遍历，那么他这个值一定是准确的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>还有个与之相关的默认方法，就是利用这个特性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">long</span> <span class="title">getExactSizeIfKnown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (characteristics() &amp; SIZED) == <span class="number">0</span> ? -<span class="number">1L</span> : estimateSize();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="characteristics"><a href="#characteristics" class="headerlink" title="characteristics()"></a>characteristics()</h3><p>表示集合的特性，一共8个。</p>
<ul>
<li>分割之前，返回的结果都是一致的</li>
</ul>
<blockquote>
<p>如果返回结果不一致，则操作是不受保证的</p>
</blockquote>
<ul>
<li>而分割之后，不保证一致</li>
</ul>
<p>有一个默认方法用于判断 <code>Spliterator</code> 是否包含这个特性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">hasCharacteristics</span><span class="params">(<span class="keyword">int</span> characteristics)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (characteristics() &amp; characteristics) == characteristics;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="getComparator"><a href="#getComparator" class="headerlink" title="getComparator"></a>getComparator</h3><p>如果源是<code>SORTED</code> 类型的，且有比较器 <code>Comparator</code> 的话，则返回这个 <code>Comparator</code>，如果是<code>SORTED</code> 类型的，但是没有比较器，则返回 <code>null</code> , 除此之外，都抛出异常</p>
<p>接口的默认方法里，就是抛出了异常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">default Comparator&lt;? super T&gt; getComparator() &#123;</div><div class="line">        throw new IllegalStateException();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="Spliterator的8个Characteristics-特性"><a href="#Spliterator的8个Characteristics-特性" class="headerlink" title="Spliterator的8个Characteristics 特性"></a>Spliterator的8个Characteristics 特性</h2><h3 id="ORDERED"><a href="#ORDERED" class="headerlink" title="ORDERED"></a>ORDERED</h3><p>源的元素有序，<code>tryAdvance</code> ，<code>forEachRemaining</code>和 <code>trySplit</code> 都会保证有序的进行元素的处理</p>
<ul>
<li>需要注意 <code>hashSet</code> 这类 <code>Collection</code> 是不保证有序的</li>
<li>有<code>ORDERED</code> 特性的数据，在并发计算的时候客户端也要做顺序限制的保证</li>
</ul>
<h3 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h3><p>太简单，唯一性。 类似 <code>Set</code> 这样的传入集合会拥有这样的特性</p>
<h3 id="SORTED"><a href="#SORTED" class="headerlink" title="SORTED"></a>SORTED</h3><p>有这种特性的 <code>Spliterator</code> ，有一个特定的顺序。或者是所有元素都是可比较的，或者是有特定的比较器。</p>
<ul>
<li>有 <code>SORTED</code> 一定会有 <code>ORDERED</code></li>
</ul>
<h3 id="SIZED"><a href="#SIZED" class="headerlink" title="SIZED"></a>SIZED</h3><p>有这种属性的 <code>Spliterator</code> 在遍历和分割之前，<code>estimateSize()</code> 返回的大小是固定的，并且是准确的。</p>
<h3 id="NONNULL"><a href="#NONNULL" class="headerlink" title="NONNULL"></a>NONNULL</h3><p>不为 <code>NULL</code>, 大部分并发的集合，队列，Map 都可能会有这样的特性。</p>
<h3 id="IMMUTABLE"><a href="#IMMUTABLE" class="headerlink" title="IMMUTABLE"></a>IMMUTABLE</h3><p>不可变的。元素遍历期间不可以被 添加，替换，删除（cannot be added, replaced, or removed）<br>否则，应该抛出异常。</p>
<h3 id="CONCURRENT"><a href="#CONCURRENT" class="headerlink" title="CONCURRENT"></a>CONCURRENT</h3><p>支持并发操作的。 </p>
<ul>
<li>顶层的 <code>Spliterator</code> 不可以 <code>CONCURRENT</code> 与 <code>SIZED</code>。 这两者是相互冲突的。</li>
<li>但是分割之后的 <code>Spliterator</code> ， 可能是 <code>SIZED</code>， 顶层不能决定底层</li>
</ul>
<h3 id="SUBSIZED"><a href="#SUBSIZED" class="headerlink" title="SUBSIZED"></a>SUBSIZED</h3><p>从<code>trySplit()</code>被分割后的所有分割迭代器都是 <code>SIZED</code> 以及 <code>SUBSIZED</code> 的。<br>如果分割后，没有按照要求返回<code>SIZED</code> 以及 <code>SUBSIZED</code> 属性，那么操作是不被保证的，也就是结果不可预测。</p>
<blockquote>
<p>这个属性和 <code>SIZED</code> 的区别就是， <code>SIZED</code> 不保证 <code>SUBSIZED</code>。而 <code>SUBSIZED</code> 会要求保证 <code>SIZED</code></p>
</blockquote>
<h2 id="内部特化而做的函数式接口-OfPrimitive"><a href="#内部特化而做的函数式接口-OfPrimitive" class="headerlink" title="内部特化而做的函数式接口 (OfPrimitive)"></a>内部特化而做的函数式接口 (OfPrimitive)</h2><p>除了上面的函数，以及特性，<code>Spliterator</code> 迭代器中，还有几个定义在内部的接口。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/ai9cdxr36s7o0zv3bdb67d1r/image_1bf4821k2kft1nsq13981l5j1h1d13.png" alt="image_1bf4821k2kft1nsq13981l5j1h1d13.png-207.1kB"></p>
<p><code>OfPrimitive</code> 重载了（overloads）了 <code>Spliterator</code> 的方法。用于实现特化的分割迭代器。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/gj8uepdtipdysdlreaypan5n/image_1bf487rnqvk11cpuoeve911ss81g.png" alt="image_1bf487rnqvk11cpuoeve911ss81g.png-41.2kB"></p>
<blockquote>
<p><strong>overloads</strong>：返回类型名称一致，参数不一致。<br>注意与 <code>override</code> 的区别</p>
</blockquote>
<h3 id="一个颠覆面向对象编程常识的现象"><a href="#一个颠覆面向对象编程常识的现象" class="headerlink" title="一个颠覆面向对象编程常识的现象"></a>一个颠覆面向对象编程常识的现象</h3><p>请大家看图<br><img src="http://static.zybuluo.com/zhumin1990719/tr2zzp41rvb62w9t2xo1lb38/image_1bf48rn8nbi1lrs1hgq1f72ass1t.png" alt="image_1bf48rn8nbi1lrs1hgq1f72ass1t.png-236.6kB"></p>
<p>这两次类型转换奇怪的地方是：</p>
<p><code>IntConsumer</code> 与 <code>Consumer</code> 两个接口，没有继承关系，两个接口是平行的。 这样的转换，在之前是不可能成功的。 简直是颠覆认知啊！</p>
<blockquote>
<p>我悄悄说啊（并没有。。你也基本不会关心不是么。。）</p>
</blockquote>
<p>但是在函数式编程中能转换成功呢？ 你可以等我下一篇文章~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;说完&lt;code&gt;Stream&lt;/code&gt; 的一些源码解析。我们看下我们的 &lt;code&gt;Stream&lt;/code&gt; 是如何产生的。我们最为常见的流的产生方式是 &lt;code&gt;collection.stream()&lt;/code&gt;, 你点开&lt;code&gt;Stream()&lt;/code&gt;方法, 他是通过 &lt;code&gt;Collection&lt;/code&gt; 这个上层接口两个java8 新增特性 &lt;code&gt;default method&lt;/code&gt; 进行实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/x7mirnxozw9czo58sgxezv03/image_1bf3u1l911o5rf825gv39aqe9.png&quot; alt=&quot;image_1bf3u1l911o5rf825gv39aqe9.png-41.3kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就牵扯到一个关键要点 &lt;code&gt;Spliterator&lt;/code&gt; ：分割迭代器。&lt;/p&gt;
&lt;p&gt;本文主要描述 &lt;code&gt;Spliterator&lt;/code&gt; 的作用，大部分来源于你不愿意读的 &lt;code&gt;JavaDoc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spliterator&lt;/code&gt; 是 &lt;code&gt;jdk8&lt;/code&gt; 非常重要的概念。里面的细节很值得学习玩味。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk8 Stream &amp; BaseStream 源码难点浅析1</title>
    <link href="http://yoursite.com/2017/05/02/jdk8-Stream-BaseStream-%E6%BA%90%E7%A0%81%E9%9A%BE%E7%82%B9%E6%B5%85%E6%9E%901/"/>
    <id>http://yoursite.com/2017/05/02/jdk8-Stream-BaseStream-源码难点浅析1/</id>
    <published>2017-05-02T04:15:00.000Z</published>
    <updated>2017-05-02T04:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>简要介绍 <code>Stream</code> 的 javadoc，与集合的关系以及区别，一些重要的注意事项</li>
<li>难懂的 <code>Stream</code> 类的声明，介绍比较难懂的 <code>onClose()</code> 方法的调用</li>
</ul>
<a id="more"></a>
<h2 id="Stream的javadoc"><a href="#Stream的javadoc" class="headerlink" title="Stream的javadoc"></a>Stream的javadoc</h2><h3 id="Stream-的作用与特化版本"><a href="#Stream-的作用与特化版本" class="headerlink" title="Stream 的作用与特化版本"></a>Stream 的作用与特化版本</h3><p>Stream 是对一个序列做 <code>串行</code> 或者 <code>并行</code> 聚合操作。他继承自 <code>Stream</code><br>Stream 同时还有几个特化的版本 ，<code>IntStream</code> , <code>LongStream</code>, <code>DoubleStream</code>. 他们为了减少流操作的时候一些不必要的装箱和拆箱的操作。</p>
<blockquote>
<p>需要注意的是，以上四个 <code>Stream</code> 是平行关系，他们都是继承自 <code>BaseStream</code></p>
</blockquote>
<p>举个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 将集合 widgets 中的元素中红色的元素的重量求和</div><div class="line">* 第一步 filter() 过滤红色</div><div class="line">* 第二步 mapToInt() 拿出所有的Red的重量，生成一个 IntStream</div><div class="line">* 第三步 sum() 求和，并返回</div><div class="line">*/</div><div class="line"><span class="keyword">int</span> sum = widgets.stream()</div><div class="line">                      .filter(w -&gt; w.getColor() == RED)</div><div class="line">                      .mapToInt(w -&gt; w.getWeight())</div><div class="line">                      .sum();</div></pre></td></tr></table></figure>
<h3 id="Stream-的组成与特点"><a href="#Stream-的组成与特点" class="headerlink" title="Stream 的组成与特点"></a>Stream 的组成与特点</h3><p>要想实现计算，所有操作，都会被放入一个 <code>pipeline</code> 当中（类似liunx）中的操作。</p>
<p>而一个流管道（pipeline）包含：</p>
<blockquote>
<ul>
<li>source(源)： 数组，集合，迭代器，I/O 操作等等</li>
<li>0个或者多个中间操作： 将一个流转成另外一个流</li>
<li>1个终止操作 : 产生一个结果(比如上面的例子中的求和) or 或者修改传入对象的属性。</li>
</ul>
</blockquote>
<p>流是Lazy的懒惰的！！ 你不加 <code>终止操作</code> 流的操作，就不会被执行。<br>如上面的例子，没有最后的 <code>Sum()</code> 函数，前面的操作是不会被执行的。</p>
<h3 id="集合和Stream-的区别"><a href="#集合和Stream-的区别" class="headerlink" title="集合和Stream 的区别"></a>集合和Stream 的区别</h3><p>集合： 注重存储，主要考虑元素的访问与管理<br>Stream ：注重计算，主要考虑以一种<code>描述性</code> 的语言来对源进行一系列的操作，并将操作聚合起来。</p>
<h3 id="流的注意事项"><a href="#流的注意事项" class="headerlink" title="流的注意事项"></a>流的注意事项</h3><p>1 流中的操作，都应是函数式接口（lambda表达式或者方法引用）<br>2 流不能被重用，每个流只能应用一次。想再次操作你需要重新生成一个流</p>
<p>3 流虽然实现了 <code>AutoCloseable</code> 接口，但是几乎所有的流都是不用关闭的，因为他的源大部分情况下都是集合，而集合是不用关闭的。</p>
<blockquote>
<p>除非源是一个 <code>I/O Channel</code>。 比如 Files.lines() 方法。<br>如果是这样，Stream 就可以申明在 <code>try-with-resources block</code> 中。<br>关于这个 <code>j7</code> 新接口的使用，可以看我之前的一篇关于 <code>AutoCloseable</code> 的介绍 <a href="http://movingon.cn/2017/05/02/jdk1-7%E6%96%B0%E5%A2%9E%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E6%8E%A5%E5%8F%A3AutoCloseable/" target="_blank" rel="external">jdk1.7新增自动关闭接口AutoCloseable</a></p>
</blockquote>
<p>多说一句，<code>Files.lines()</code> 是 j8 中新增的方法，有点类似 <code>python</code> 中 <code>readlines()</code> 方法。很好用。</p>
<h2 id="Stream-amp-BaseStream-解析"><a href="#Stream-amp-BaseStream-解析" class="headerlink" title="Stream &amp; BaseStream 解析"></a>Stream &amp; BaseStream 解析</h2><h3 id="看不懂的声明"><a href="#看不懂的声明" class="headerlink" title="看不懂的声明"></a>看不懂的声明</h3><p>我们可以看一下 <code>Stream</code> 以及 <code>BaseStream</code> 的类的声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//Stream</div><div class="line">public interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; </div><div class="line">//BaseStream</div><div class="line">public interface BaseStream&lt;T, S extends BaseStream&lt;T, S&gt;&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>BaseStream</code> 中，第二个泛型是 <code>S extends BaseStream&lt;T, S&gt;</code> ，而 <code>Stream</code> 中，第二个泛型是 <code>Stream&lt;T&gt;</code>， 正好是满足 <code>extends BaseStream&lt;T, S&gt;</code> 的条件的，所以可以这么写。</p>
</blockquote>
<p>两个泛型有没有感觉有点晕。其实比较好理解。</p>
<ul>
<li><code>T</code> 这个泛型很好理解，就是流中元素的类型</li>
<li><code>S</code> ？</li>
</ul>
<p>如果你看过javadoc的描述，流的所有中间操作，都会返回一个流，而这个<code>S</code> 就代表着中间操作返回的流的类型。<br>比如我们看一下这个在 <code>Stream</code> 中的方法（其他方法与其一致）</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/m1x94rwz2ygkwzgfwbap4prp/image_1bf3j7bv61mi710k61td11d8l5o79.png" alt="image_1bf3j7bv61mi710k61td11d8l5o79.png-124.2kB"></p>
<h3 id="难懂的-onClose-方法"><a href="#难懂的-onClose-方法" class="headerlink" title="难懂的 onClose() 方法"></a>难懂的 onClose() 方法</h3><p>上面我们知道 <code>BaseStream</code> 实现了 <code>AutoCloseable</code> 接口，也就是 <code>Close()</code> 方法可以得到调用。但是 <code>BaseStream</code> 中，给我们提供了要给<code>OnClose()</code> 方法。我们看下截图</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/p8cudj4reir8u8t9eenmtrct/image_1bf3kmgk61641d2k1euk992t28m.png" alt="image_1bf3kmgk61641d2k1euk992t28m.png-165.3kB"></p>
<p>这个方法，就是当 <code>Close()</code> 方法被调用的时候 <code>onClose()</code>会被调用。但是有几个注意的点</p>
<blockquote>
<ul>
<li><code>onColse()</code> 方法也返回一个流，也就是说可以多次调用。</li>
<li>如果你写了多个<code>onClose()</code> 方法，它会按照顺序调用。</li>
<li>前一个 <code>onClose()</code> 方法除了异常不影响后续 <code>onClose</code> 方法的使用</li>
<li>如果多个 <code>onClose()</code> 方法都抛出异常，只展示第一个异常的堆栈，而其他异常会被压缩，只展示部分信息</li>
</ul>
</blockquote>
<p>上代码！！！！！！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by charleszhu on 2017/5/2.</div><div class="line"> */</div><div class="line">public class StreamTestOnCloseTest &#123;</div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        List&lt;String&gt; testString = Arrays.asList(&quot;min&quot;, &quot;ge&quot;, &quot;da&quot;, &quot;shuaibi&quot;);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 两次关闭</div><div class="line">         * 两次异常</div><div class="line">         * 预期：两次关闭输出依次打出；两次关闭异常只打印一次堆栈，另外一次只展示</div><div class="line">         */</div><div class="line">        try(Stream&lt;String&gt; stream = testString.stream()) &#123;</div><div class="line">            stream.onClose(() -&gt;&#123;</div><div class="line">                System.out.println(&quot;closing 1&quot;); //</div><div class="line">                throw new NullPointerException(&quot;exception 1&quot;);</div><div class="line">            &#125;).onClose(() -&gt; &#123;</div><div class="line">                System.out.println(&quot;closing 2&quot;);</div><div class="line">                throw new NullPointerException(&quot;exception 2&quot;);</div><div class="line">            &#125;).forEach(System.out::println);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下图：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/qzz76okwh4vyzc62m1u0ibuj/image_1bf3lgle8tfjq0nqm2jjd17hk13.png" alt="image_1bf3lgle8tfjq0nqm2jjd17hk13.png-149.2kB"></p>
<p>你们明白了吧（我是天才）</p>
<h3 id="好懂的其他方法"><a href="#好懂的其他方法" class="headerlink" title="好懂的其他方法"></a>好懂的其他方法</h3><p><code>BaseStream</code> 中有的一些其他方法，除了<strong><em>分割迭代器</em></strong>(后面会单独说，因为太重要)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Spliterator&lt;T&gt; spliterator();</div></pre></td></tr></table></figure>
<p>其他都比较好懂。值得一说的是以下两个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">S sequential(); // 返回串行流</div><div class="line">S parallel(); // 返回并行流</div></pre></td></tr></table></figure>
<p>你可以看到他们都返回流对象，也就是可以继续调用 <code>sequential</code> 或者 <code>parallel</code> 方法。但是！！！</p>
<blockquote>
<p>无论你中间怎么调用 ，比如 sequential.parallel.parallel.sequential…. </p>
<p><strong>只以最后一个为最终流的类型！！！</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简要介绍 &lt;code&gt;Stream&lt;/code&gt; 的 javadoc，与集合的关系以及区别，一些重要的注意事项&lt;/li&gt;
&lt;li&gt;难懂的 &lt;code&gt;Stream&lt;/code&gt; 类的声明，介绍比较难懂的 &lt;code&gt;onClose()&lt;/code&gt; 方法的调用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
</feed>
