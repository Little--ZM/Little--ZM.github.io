<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>待葡萄嗖透</title>
  <subtitle>你说啥？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-05T11:40:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>朱老师&amp;敏哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《用户体验要素》读书笔记：要理解为何这样做产品</title>
    <link href="http://yoursite.com/2018/03/15/%E3%80%8A%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E8%A6%81%E7%B4%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%A6%81%E7%9F%A5%E9%81%93%E8%BF%99%E6%A0%B7%E5%81%9A%E4%BA%A7%E5%93%81/"/>
    <id>http://yoursite.com/2018/03/15/《用户体验要素》读书笔记：要知道这样做产品/</id>
    <published>2018-03-15T11:32:43.000Z</published>
    <updated>2018-04-05T11:40:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/zhumin1990719/n5gn9nh2zap08s5fqhclvgy6/1351522926267_.pic.jpg" alt="1351522926267_.pic.jpg-84kB"><br>《用户体验要素》是一本实用类书，试图回答如何以用户体验为中心进行产品设计。作者通过构建自下而上的五层模型：战略层，范围层，结构层，框架层，表现层；来将以用户体验用户需求为中心的设计方式层次清晰的表达出来。并指出；一开始对战略层的深思熟虑，会帮助我们在整个产品设计中节约大量的时间。</p>
<p>作者这本书写于pc时代，大多案例都是网站的建设。但是整个思考产品的思路，直到今天；都没有过时。</p>
<a id="more"></a>
<h3 id="一、-以用户体验为中心设计产品"><a href="#一、-以用户体验为中心设计产品" class="headerlink" title="一、 以用户体验为中心设计产品"></a>一、 以用户体验为中心设计产品</h3><p>用户体验是指产品如何与外界发生接触，也就是用户如何接触和使用你的产品。这并不仅仅是你的产品外观如何设计，功能如何齐全；这些细节入微的细节，都显示出你做产品最本源的想法。</p>
<blockquote>
<p>你为什么要做这个产品？你是否真的想过用户的所想和所需。</p>
</blockquote>
<p>一个好的产品形态并不应该是功能特性而决定，而是”用户自身心理感受与行为”所决定的。<br>而当前；我们更多的是按照自己的喜好在做产品。</p>
<p>那如何以用户体验为中心设计产品呢？作者给出自己的模型答案。<strong>用户体验要素的五层设计模型</strong></p>
<h3 id="二、-五层模型"><a href="#二、-五层模型" class="headerlink" title="二、 五层模型"></a>二、 五层模型</h3><p>五层模型，通过分解以用户体验为中心的设计过程，更好的解决产品设计的问题。<br>从上而下分别是：</p>
<ul>
<li>表现层：如何将框架图以合适的视觉样式展现给用户</li>
<li>框架层：如何将结构层的功能以符合用户使用习惯的方式在页面上呈现</li>
<li>结构层：范围层确定的产品功能如何转化为有层次逻辑的产品</li>
<li>范围层：战略层定义的产品目标和用户需求提供用那些功能承载</li>
<li>战略层：产品目标和用户目标；我们想做什么；想给用户提供什么；我们为什么要做</li>
</ul>
<p>下面逐一介绍下几个层次；以及在在我个人产品经验中现实中的分工大概如何。</p>
<h4 id="2-1-战略层：目标"><a href="#2-1-战略层：目标" class="headerlink" title="2.1 战略层：目标"></a>2.1 战略层：目标</h4><blockquote>
<p>这一部分需要项目的产品经理或者领导经过一番调研工作后确定。</p>
</blockquote>
<p>做一件产品，要回答两个问题。</p>
<ul>
<li>我们做这件产品的目标是什么？</li>
<li>对应的用户需求是什么？用户能得到什么？</li>
</ul>
<p>我们在项目开始的初始；团队的成员就要对此有 <code>明确</code> 的认识。 对战略明确的认识会在后面的过程中提供一把标尺；引导我们按照正确方向走。<br>因为我们越是明确知道用户想从我们这里获取什么，我们就能够更好的服务他们。</p>
<p>产品目标可以是商业目标，赚钱；可以是达到品牌宣传的目的。为了确保我们达到了目标，我们还要指定衡量的指标。</p>
<p>为了了解用户需求，我们就要对用户进行分析的调研。先通过市场营销的手段细分用户，找到产品真正的目标客群（这很重要；也需要很客观；避免陷入幸存者偏差）；对在对用户进行场景化分析，以确定产品真正可能使用到的场景。</p>
<p>最后，这些需要落成文档；简介明了并切入要点。并让团队成员清晰的了解。</p>
<p>需要注意的是，战略并不是不可以修改。通过后续工作的开展；可以不断的演进。</p>
<h4 id="2-2-范围层：为了达成目标要提供什么"><a href="#2-2-范围层：为了达成目标要提供什么" class="headerlink" title="2.2 范围层：为了达成目标要提供什么"></a>2.2 范围层：为了达成目标要提供什么</h4><blockquote>
<p>依旧是产品经理要去想的事儿</p>
</blockquote>
<p>我们确认了目标，就要想想要提供哪些给用户，能满足他们的这些需求，能达到我们的产品目标。</p>
<p>这一层你要做三件事：</p>
<ul>
<li><strong>1 定义需求：</strong> 明白该做什么，不该做什么。</li>
<li><strong>2 定优先级：</strong> 明白什么是必须做的，什么可以缓一下。根据战略；技术实现难度时间成本来判断</li>
</ul>
<p>然后同样的；我们需要把这些需求点记下来；但不是精细到细节；而是将可能存在冲突的点记下来。<br>作者提供了几个原则，值得参考：</p>
<ol>
<li>乐观：永远描述如何防止错误的事儿，引导用户做出正确的行为，而不是描述“不应该这么做”</li>
<li>具体：一个功能点的具体要求要明确，因为不明确就会造成实现上的误解</li>
<li>客观：描述尽量使用意义明确的场景</li>
</ol>
<h4 id="2-3-结构层：提供的功能如何完整的结构化流程化"><a href="#2-3-结构层：提供的功能如何完整的结构化流程化" class="headerlink" title="2.3 结构层：提供的功能如何完整的结构化流程化"></a>2.3 结构层：提供的功能如何完整的结构化流程化</h4><blockquote>
<p>产品经理的活；有经验的交互有时候也会提供意见</p>
</blockquote>
<p>这就好比你把一个个确定好的功能点；整理成一个层次清晰的脑图。对每一个功能点需要一个完整流程图。</p>
<p><strong>对结构是否有质量的的标准是：用户是否功能的每一个步骤都是合理的。</strong></p>
<p>这里我们会产出一个可以给交互设计师的文稿。</p>
<h4 id="2-4-框架层：-结构层的具体化"><a href="#2-4-框架层：-结构层的具体化" class="headerlink" title="2.4 框架层： 结构层的具体化"></a>2.4 框架层： 结构层的具体化</h4><blockquote>
<p>主要由交互设计师操刀；产品把控方向</p>
</blockquote>
<p>这个阶段需要将结构层的变得清晰更加实在。在我们平时的产品设计中就是让交互出原型图。<br>（有时候；我们只有一个点子就让交互去做原型图；简直就是流氓啊）</p>
<ul>
<li>这个阶段，需要注意让设计尽量符合用户的习惯。</li>
<li>要注意突出重点；让人一眼看到重点的部分。</li>
<li>不要为了所有人的所有偏好做设计。（这与程序员要考虑所有异常不同）</li>
<li>在合适的地方权衡利弊用合适的组件。</li>
</ul>
<p>这里在平时的产品设计中会产生交互图；并交由视觉设计师；做表现层的设计。</p>
<h4 id="2-5-表现层：框架层的感知化"><a href="#2-5-表现层：框架层的感知化" class="headerlink" title="2.5 表现层：框架层的感知化"></a>2.5 表现层：框架层的感知化</h4><blockquote>
<p>视觉设计师主导；产品经理根据战略方向把控（你懂一些设计必要的）</p>
</blockquote>
<p>将交互稿交给设计师，根据用户感知和战略方向，做出产品的最终呈现形态。<br>视觉设计师不能仅仅考虑美学问题；也要考虑视觉设计有没有破坏产品结构，有没有帮助更好的完成战略目标。</p>
<ul>
<li>好的视觉设计忠于眼球；用户的眼球移动路径流畅。</li>
<li>通过差异和一致突出页面重点内容；但又不太杂乱。</li>
<li>注意内部一致性（同一个页面的设计语言是否统一）和外部一致性（同一个公司的设计语言是否统一）</li>
<li>配色和字体排版可以有差异化；不用为了统一而牺牲设计；但差异化要用户肉眼可以分别</li>
</ul>
<p>最终这一阶段；我们会产出视觉稿；结合之前的PRD；产出可给开发提需求的需求文档。</p>
<h3 id="三、一些听起来是废话的总结"><a href="#三、一些听起来是废话的总结" class="headerlink" title="三、一些听起来是废话的总结"></a>三、一些听起来是废话的总结</h3><p>这五个层面的设计是一个流程；也是一个思路。通过自下而上的设计流程，让产品设计遵循以用户为中心，先确定目标和用户需求，想清楚要为什么用户提供什么价值，再不断往上推进。保证我们不会走偏方向。在底层花的时间越多越充分，后期的流程应该越顺利，因为那些目标需求与价值都明确的记在心中。</p>
<p>但是科普过五层模型的人，却似乎大部分都不是这么做的。也许是他们并没有看完吧。</p>
<p>对于五层模型有两个注意点：</p>
<p>这个五个层面的设计；下层的改动一定会导致上层的设计的变动；而较高一个层的设计改动也要考虑到是否会影响到下一个层次。这种双向联动的效应是一个常识。我们要很注意。因为我们时常做到最后就忘记了我们最开始的目标是什么，或者说；因为上层的改动，已经无法实现我们最初的设想而不自知。</p>
<p>第二；五个层次的工作相连的部分略有重合是一种比较好的节奏；如果一味的要求我们把上一个层次的事儿的做完了；在做下一个层次的事儿；可能会导致一种你和用户都满意个割裂感。也就是说，考虑范围层面的时候，依旧可以对战略进行一定的调整。</p>
<blockquote>
<p>最后；我提醒自己一直要记住：知道你在解决什么问题；并知道你为什么要这么做。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/n5gn9nh2zap08s5fqhclvgy6/1351522926267_.pic.jpg&quot; alt=&quot;1351522926267_.pic.jpg-84kB&quot;&gt;&lt;br&gt;《用户体验要素》是一本实用类书，试图回答如何以用户体验为中心进行产品设计。作者通过构建自下而上的五层模型：战略层，范围层，结构层，框架层，表现层；来将以用户体验用户需求为中心的设计方式层次清晰的表达出来。并指出；一开始对战略层的深思熟虑，会帮助我们在整个产品设计中节约大量的时间。&lt;/p&gt;
&lt;p&gt;作者这本书写于pc时代，大多案例都是网站的建设。但是整个思考产品的思路，直到今天；都没有过时。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《如何阅读一本书》读书笔记：四个层次的阅读</title>
    <link href="http://yoursite.com/2018/03/05/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%9B%9B%E4%B8%AA%E5%B1%82%E6%AC%A1%E7%9A%84%E9%98%85%E8%AF%BB/"/>
    <id>http://yoursite.com/2018/03/05/《如何阅读一本书》读书笔记：四个层次的阅读/</id>
    <published>2018-03-05T11:26:31.000Z</published>
    <updated>2018-04-05T11:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<p> 这是一本实用性书籍。我阅读绝大部份；我没有仔细阅读的部分包括14-19章节；这些章节讲述的是如何阅读一本具体的书籍。我快速掠过；如果我以后要看到这类相似书籍再说。</p>
<p> 这是一本教读者如何读书的书；通过四个层次的阅读；可以更好的理解一本书的内容。花费了大量的篇幅讲述了阅读一本书的第三个层次 <code>分析阅读</code> 15个原则；帮助抓住框架；理解内容；找到答案。并且给出了阅读不同类型书籍的方法。在你拿到一本书；不知道如何开始的时候，这是一本很好的读书指南；起码；让你不跑偏。</p>
 <a id="more"></a>
<h3 id="阅读的四个层次"><a href="#阅读的四个层次" class="headerlink" title="阅读的四个层次"></a>阅读的四个层次</h3><p>阅读一本书；一本好书的目的；是增加自己的理解能力。而只有一种阅读方式是真正的；就是</p>
<blockquote>
<p>你什么都没有；只凭借内心的力量；慢慢提升自己；从模糊的概念；到更加清楚的理解为止。</p>
</blockquote>
<p>但是；只有我们知道如何去读的时候才能真正的读懂一本书。书中将阅读分为四个层次：</p>
<ul>
<li>1 基础阅读：能读懂一句话的文字表面意思</li>
<li>2 检视阅读：系统化略读；短时间抓住一本书的重点</li>
<li>3 分析阅读：追求理解一本书（针对好书）</li>
<li>4 主题阅读：比较阅读同一主题下的多本书；主动分析列举观点相同之处。</li>
</ul>
<p>这四个层次不是循序渐进的；高层次的会包含低层次的特性。最高的层次的阅读；也就包含了所有层次的阅读特性。</p>
<h4 id="基础阅读：能认得人就可以了。"><a href="#基础阅读：能认得人就可以了。" class="headerlink" title="基础阅读：能认得人就可以了。"></a>基础阅读：能认得人就可以了。</h4><p><em>“我这话句说的没毛病。”</em></p>
<blockquote>
<p>你能读懂这句话；却没在意我 “话” 与 “句” 写反了。就不用管这一个阶段了。</p>
</blockquote>
<h4 id="检视阅读：-交流前的打量"><a href="#检视阅读：-交流前的打量" class="headerlink" title="检视阅读： 交流前的打量"></a>检视阅读： 交流前的打量</h4><p>这个层次需要你能够快速抓住一本书的重点；以判断这本书到底值不值得读。因为只有一小部分值得用分析阅读。</p>
<p>检视阅读可以分为两个部分：</p>
<ul>
<li>第一层次： 有系统的略读或者粗读：快速的弄明白这本书的主题与架构。</li>
</ul>
<p>重点是 <strong>主动专心；但是不花费太多的时间</strong>； 可以根据以下步骤：</p>
<ol>
<li>书名和序言：将书本归类；这到底是一本什么类型的书</li>
<li>研究目录：了解一本书的地图</li>
<li>如果有附录中有重点索引；快速了解书中议题，找到重点主题</li>
<li>了解作者简介</li>
<li>挑几个和主题相关章节进行阅读；注意开头结尾和摘要。</li>
<li>随机挑选阅读；但不要太多；留意与主题相关的内容</li>
</ol>
<ul>
<li>第二层次 粗浅的阅读：重点是<code>不停的读下去</code><br>想了解一本书；如果一开始就陷入细节；会很难有有勇气读下去。所以检视阅读的重点是：不停的读下去；碰到不懂的地方也不要停下来思考与查询。从头读到尾。即使只了解全书的50%；也比半途而非什么都不了解强。</li>
</ul>
<p>我们通过上面两个步骤就可以快速了解一本书大概的内容；但是想要读的更好；我们就要有自我要求。</p>
<h5 id="提问题：四个基本问题：看完书需要回答的问题"><a href="#提问题：四个基本问题：看完书需要回答的问题" class="headerlink" title="提问题：四个基本问题：看完书需要回答的问题"></a>提问题：四个基本问题：看完书需要回答的问题</h5><blockquote>
<p>所谓主动阅读；就是能够提出问题。</p>
</blockquote>
<ul>
<li>1 整体来说这本书在谈些什么</li>
<li>2 作者有什么论述；论点；想法等细节；都是如何表达的</li>
<li>3 这本书说的有道理么？全部或者部分。</li>
<li>4 这本书和你有什么关系？ 你是否真的需要去了解这些信息；是否还给你了其他的启发。</li>
</ul>
<p>读懂一本书；核心就在于提出问题；然后回答或者找出作者的答案。</p>
<h5 id="做笔记：能表达出来的想法；才是有意义的想法"><a href="#做笔记：能表达出来的想法；才是有意义的想法" class="headerlink" title="做笔记：能表达出来的想法；才是有意义的想法"></a>做笔记：能表达出来的想法；才是有意义的想法</h5><p>读书的时候；你要去记录你自己的想法。用语言表述出来。这可以帮助你记住作者的思想。<br>如果你说你都知道；但是你不知道如何去表达；其实你也许根本不知道自己在想些什么。</p>
<h4 id="分析阅读：与作者交流；去真正理解一本好书。"><a href="#分析阅读：与作者交流；去真正理解一本好书。" class="headerlink" title="分析阅读：与作者交流；去真正理解一本好书。"></a>分析阅读：与作者交流；去真正理解一本好书。</h4><p>作者总结了一般的规则。分为3个阶段；15个原则。很详实。</p>
<p>阅读一本书；就是和作者的思想的交流。所以可以从交流的角度来理解这些阶段和规则；交流在这里是广义的交流；老师上课是一种交流；同长者聊天也是一种交流。但总体可以分为以下三个部分；<strong>我听；我想；我说。</strong></p>
<h5 id="我听：了解作者想说什么？"><a href="#我听：了解作者想说什么？" class="headerlink" title="我听：了解作者想说什么？"></a>我听：了解作者想说什么？</h5><p><code>谈话性质：</code> 区分这本书是一本理论的书还是实用性的书。或者小说与文学。因为这会决定我们用一些不同的方式（态度）去阅读（谈话）。<br>比如这一本书；就是一本实用性著作；他有目的性；教你如何阅读一本书。你阅读完会根据是同意作者来决定是否按照作者的建议行动。</p>
<p><code>谈话主题与套路：</code> 通过阅读能够可以用很小一段文字描述文中主线。并且列出核心的框架。</p>
<p>同时我们可以根据一本书的结构给出自己理解的大纲。这会比较有助于我们理解这本书。我们谈话的时候；总是会用一些开场，或者事实等去丰富我们描述的观点。所有的这些都是在让整个谈话不是特别干。但是透过这些“润色”；我们可以是整个内容脉络更加清晰的展现。</p>
<p><code>谈话目标</code> 找到对方的目的；想要问的问题或者解决的问题；（我们要找到答案；或者自己回答）</p>
<h5 id="我想：理解作者想表达的主旨；他提出的问题是否解决"><a href="#我想：理解作者想表达的主旨；他提出的问题是否解决" class="headerlink" title="我想：理解作者想表达的主旨；他提出的问题是否解决"></a>我想：理解作者想表达的主旨；他提出的问题是否解决</h5><p>这一个阶段；通过抓作者的关键字；关键语句；以及一些观点的论点来找到作者想标的的主旨。这是作者的态度；也是他想传达的信息。<br>根据他的描述；我们要找到他这么认为的前因后果。</p>
<p>重点就是可以站在作者的角度去理解这本书；这个时候不去评判；<code>理解和同意</code> 不是一个意思。</p>
<p>然后；我们可以判断；他在谈话目标中提出的问题；哪些已经解决了。哪些是还没解决的。</p>
<h5 id="我说：读懂之前不评论；记住学习才是真理。"><a href="#我说：读懂之前不评论；记住学习才是真理。" class="headerlink" title="我说：读懂之前不评论；记住学习才是真理。"></a>我说：读懂之前不评论；记住学习才是真理。</h5><p>在于作者的交流中；他是一个弱势的地位。因为他没法对你说“倾听我说完”</p>
<p>所以；我们要遵守思维的礼节；我们最关心的；也是善意对话最关键的；就是<code>我们能学到些什么</code>。除非我们真的了解了一本书；在这之前最好不要说同意与否。</p>
<p>当你不同意作者观点的时候；你的论述最好有理论依据。你能够证明理论是错误的这可以让你避免进入情绪的控制，而说出一些诸如“我不知道你在说什么，但你就是错了”的话来。</p>
<p>因为你一定要切记 <code>赢不是目标；学习才是真理</code>。</p>
<h4 id="主题阅读：博采众议；独立思考。"><a href="#主题阅读：博采众议；独立思考。" class="headerlink" title="主题阅读：博采众议；独立思考。"></a>主题阅读：博采众议；独立思考。</h4><p>找出统一主题的多本书；配合阅读；列出想要了解的问题；找到多本书对相同主题的描述；进行分析讨论。<br>这里需要注意的是；主题阅读的目标是主题；而不是全书。你需要找到不同书对同一主题的内容。</p>
<p>这一部分我有所体会；之前听得到的时候；各位老师分享读书经验中都有分享过；买统一类目下的两本书；对照阅读。通过客观的分析；你对相关概念会有更加深入的理解。</p>
<blockquote>
<p>需要说明的是；四个层次是读一本的理想状态；现实中需要根据不同情况进行调整。不要忘了目标；是理解一本书；而不是用正确的方式读一本书。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这是一本实用性书籍。我阅读绝大部份；我没有仔细阅读的部分包括14-19章节；这些章节讲述的是如何阅读一本具体的书籍。我快速掠过；如果我以后要看到这类相似书籍再说。&lt;/p&gt;
&lt;p&gt; 这是一本教读者如何读书的书；通过四个层次的阅读；可以更好的理解一本书的内容。花费了大量的篇幅讲述了阅读一本书的第三个层次 &lt;code&gt;分析阅读&lt;/code&gt; 15个原则；帮助抓住框架；理解内容；找到答案。并且给出了阅读不同类型书籍的方法。在你拿到一本书；不知道如何开始的时候，这是一本很好的读书指南；起码；让你不跑偏。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《原则》读书笔记：知道保持开放与如何成长</title>
    <link href="http://yoursite.com/2018/02/15/%E3%80%8A%E5%8E%9F%E5%88%99%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%9F%A5%E9%81%93%E4%BF%9D%E6%8C%81%E5%BC%80%E6%94%BE%E4%B8%8E%E5%A6%82%E4%BD%95%E6%88%90%E9%95%BF/"/>
    <id>http://yoursite.com/2018/02/15/《原则》读书笔记：知道保持开放与如何成长/</id>
    <published>2018-02-15T11:44:31.000Z</published>
    <updated>2018-04-05T11:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>这本原则最近非常火；据说创投圈的人都在读。我在得到app上听过万维钢老师的解读；也写过一些笔记。但是总觉得东西理我自己很远。于是我买回来自己再阅读一次。</p>
<p>在看书这件事儿上；我能看实体书还是愿意看实体书；一个是因为有读书的感觉；一个是不容易分心（因为我注意力冗余分散）；第三读书笔记记录方便。写下来比打出来记忆更加深刻。最后一个是回顾的时候很方便；你要找自己划线做特殊标记的地方太容易了~ </p>
<p>所以我之前的策略是电子买一本；实体书买一本；但是。。现在电子书的价格节节攀升。。还是只看实体书好了</p>
<a id="more"></a>
<h2 id="总结（末尾还有几乎一遍一样的；但有惊喜）："><a href="#总结（末尾还有几乎一遍一样的；但有惊喜）：" class="headerlink" title="总结（末尾还有几乎一遍一样的；但有惊喜）："></a>总结（末尾还有几乎一遍一样的；但有惊喜）：</h2><p>整本书上半部分的重点很清晰：</p>
<p>1 正视现实；有方法的（5步流程）追求你想要的东西。<br>2 通过头脑开放；认识自己的障碍；理解人的大不相同；感谢深思熟虑的意见分歧；从失败中吸取教训。问自己：“你怎么知道自己是对的呢”<br>3 不断成长和进化；作出更好的决策；成为更好的自己。</p>
<p>说起来简单；然而知易行难。但即使如此；知道总是改变的第一步。</p>
<p>这本书最大的作用；是让我开始反思自己去年一整年的想法；做事的方法。几乎都是情绪控制着我。有一种“恍然大明白”的感觉；我真的做错了很多事，做错了很多决策。</p>
<p>感谢原则。保持头脑开放；继续前行。</p>
<h2 id="引言-amp-个人历程"><a href="#引言-amp-个人历程" class="headerlink" title="引言&amp;个人历程"></a>引言&amp;个人历程</h2><p><strong>重点：</strong></p>
<ul>
<li>“独立思考；即使会犯错；保持谦虚和开放的态度”</li>
<li>“你怎么知道自己是对的呢”</li>
<li>“体验痛苦；从中探索自然想让你学会的东西”</li>
</ul>
<p><code>看样子是鸡汤；但是当我看到后面的内容就觉得满身冷汗；说的就是如此自以为是的我的现状。</code></p>
<p>雷达里奥（下面都成为Ray）在导言中说；《原则》分为上下两部；这是第一部；主要讲述的 <code>生活</code> 和 <code>工作</code> 的原则。下一部将会是 <code>经济</code> 与 <code>投资</code> 原则。期待中。</p>
<p>全书一共分为三个部分 ： 第一部分是个人经历的介绍；第二部分是生活原则的描述；第三部分是工作原则的描述。<br>我看完了前两部分；发现全书才看了一半300多页；下面还有300多页全都是</p>
<p>第一部分是说的个人经历：主要描述了成长；遭遇重大失败；从重大失败中吸取教训；重整桥水；并在这个过程中；逐渐形成并完善了自己的做事的原则。并整理成册。</p>
<p>在其中；对他打击最大的一起失误；因为过度自以为是，导致桥水破产；自己甚至筹集不到去见潜在客户的钱。痛苦无比；但也正是这次痛苦的经历，让他学会了可信度的加权决策；凡事都要多问问自己“你怎么知道自己是对的呢？”</p>
<p>在个人经历的最后一章节，雷达里奥说他把痛苦当做大自然的提醒；告诉他有一些重要的东西要学习。他不会为痛苦沮丧；他开始学会体验痛苦；探索自然（我觉得就是潜意识）想通过痛苦给我们什么收益。甚至开始成为他的一项游戏。</p>
<p>后面重点的第二部分：生活原则</p>
<h2 id="生活原则："><a href="#生活原则：" class="headerlink" title="生活原则："></a>生活原则：</h2><h3 id="1-拥抱现实；应对现实"><a href="#1-拥抱现实；应对现实" class="headerlink" title="1 拥抱现实；应对现实"></a>1 拥抱现实；应对现实</h3><ul>
<li>不要欢笑愿望与现实</li>
<li>不要担心自己形象；而关心能不能实现你的目标</li>
<li>要重视后续的结果以及后续的后续</li>
<li>不要让痛苦妨碍自己的进步</li>
<li>不要把不好归咎与任何人；从自己身上找原因</li>
</ul>
<h4 id="1-1-做一个超级现实的人"><a href="#1-1-做一个超级现实的人" class="headerlink" title="1.1  做一个超级现实的人"></a>1.1  做一个超级现实的人</h4><p>在乎梦想；但是扎根于现实</p>
<h5 id="梦想-现实-决心-成功的生活"><a href="#梦想-现实-决心-成功的生活" class="headerlink" title="梦想 +  现实 + 决心 = 成功的生活"></a>梦想 +  现实 + 决心 = 成功的生活</h5><h4 id="1-2-理解现实；是任何良好结果的根本依据"><a href="#1-2-理解现实；是任何良好结果的根本依据" class="headerlink" title="1.2 理解现实；是任何良好结果的根本依据"></a>1.2 理解现实；是任何良好结果的根本依据</h4><p><code>因为当真相与愿望不服的时候；大部分人抗拒真相</code>。 这种认知偏差；有很多心理学现象与之相关；如房间里的大象等。在《需求》 和 《思考快与慢中》都有过相关的论述。说到底；就是要扎根现实。理解现实，然后，改变自己；改变现实</p>
<h4 id="1-3-头脑需要极度开放："><a href="#1-3-头脑需要极度开放：" class="headerlink" title="1.3 头脑需要极度开放："></a>1.3 头脑需要极度开放：</h4><h5 id="头脑极度开放；极度透明有利于快速学习与改进"><a href="#头脑极度开放；极度透明有利于快速学习与改进" class="headerlink" title="头脑极度开放；极度透明有利于快速学习与改进"></a>头脑极度开放；极度透明有利于快速学习与改进</h5><p><code>这几乎是整个生活原则中最重要的一条原则了</code><br>你头脑越是开放，越是不会自欺欺人。其他人给你的反馈就会更加诚实（“你如果是喜欢听与自己意见一样的话；就会得到的反馈就越是虚假”）</p>
<p>如果这些人是<code>可信的人</code> ；你将会收货很多。</p>
<h5 id="不要担心其他人的看法；那会成为你的障碍"><a href="#不要担心其他人的看法；那会成为你的障碍" class="headerlink" title="不要担心其他人的看法；那会成为你的障碍"></a>不要担心其他人的看法；那会成为你的障碍</h5><p>你必须以你认为最好的独特的方式行事；<code>这样做一定会收到反馈</code>；我们必须以开放的头脑思考这些反馈。</p>
<p>尽管你的极度透明会让你感觉到不舒服；但是这样对你是最好的。</p>
<blockquote>
<p>这一点我略微保留意见~ 得看你身处的环境是否适合极度透明</p>
</blockquote>
<h5 id="极度求真，极度透明会带来更加有意义的工作和更好的人际关系"><a href="#极度求真，极度透明会带来更加有意义的工作和更好的人际关系" class="headerlink" title="极度求真，极度透明会带来更加有意义的工作和更好的人际关系"></a>极度求真，极度透明会带来更加有意义的工作和更好的人际关系</h5><h4 id="1-4-观察自然；学习现实规律"><a href="#1-4-观察自然；学习现实规律" class="headerlink" title="1.4 观察自然；学习现实规律"></a>1.4 观察自然；学习现实规律</h4><p>两种视角；</p>
<ul>
<li>自上而下 <code>找事务背后规律</code>： 理解市场；供求关系；宏观大势</li>
<li>自下而上<code>去验证具体情况</code> ： 验证具体情况是否相符合</li>
</ul>
<h5 id="不要固守你认为事物-“应该”-是什么样子"><a href="#不要固守你认为事物-“应该”-是什么样子" class="headerlink" title="不要固守你认为事物 “应该” 是什么样子"></a>不要固守你认为事物 “应该” 是什么样子</h5><p><strong>保持客观：</strong> 不要让<code>偏见</code>；使我们无法认识客观情况。</p>
<p>当看到一个认为自然是错误的想法的时候；<code>先假设自己是错的</code>；然后想办法弄明白为什么自然如此是合理的。<br>一个例子： 大草原上鬣狗吃了小幼马；我们会心生同情。但是事实上这是自然法则；自然会走向<code>整体最优</code>；而不是个体最优化。</p>
<p>人也是一样；人们会把对自己或者自己相关的人不利的事情叫做坏事；而忽略更大的好。 群体中也有这种倾向。如宗教歧视。</p>
<p>只根据事务对个人的影响就判断绝对的好与坏是不合理的。（这点很难做到）</p>
<h5 id="一个东西要好；必须符合现实规律；并促进整体的进化；这会带来更大的好"><a href="#一个东西要好；必须符合现实规律；并促进整体的进化；这会带来更大的好" class="headerlink" title="一个东西要好；必须符合现实规律；并促进整体的进化；这会带来更大的好"></a>一个东西要好；必须符合现实规律；并促进整体的进化；这会带来更大的好</h5><h5 id="进化是宇宙中最强大的力量"><a href="#进化是宇宙中最强大的力量" class="headerlink" title="进化是宇宙中最强大的力量"></a>进化是宇宙中最强大的力量</h5><p>这里推荐一本书：《基因之河》；</p>
<blockquote>
<p>关于进化：还有一本书; 《自私的基因》； 也非常开脑洞</p>
</blockquote>
<h4 id="1-5-进化是生命最大的成就和回报"><a href="#1-5-进化是生命最大的成就和回报" class="headerlink" title="1.5 进化是生命最大的成就和回报"></a>1.5 进化是生命最大的成就和回报</h4><h5 id="个人激励机制必须符合群体目标"><a href="#个人激励机制必须符合群体目标" class="headerlink" title="个人激励机制必须符合群体目标"></a>个人激励机制必须符合群体目标</h5><p>比如自然给了性行为个体巨大的快乐激励；来达到群体的不断进化迭代</p>
<h5 id="现实为了趋向整体最大化；而不是个体"><a href="#现实为了趋向整体最大化；而不是个体" class="headerlink" title="现实为了趋向整体最大化；而不是个体"></a>现实为了趋向整体最大化；而不是个体</h5><p>为了整体做贡献，你就有可能收到回报。自然选择让更好产品得以保留；结果是整体的最优化。</p>
<h5 id="通过快速试错以适应现实是无价的"><a href="#通过快速试错以适应现实是无价的" class="headerlink" title="通过快速试错以适应现实是无价的"></a>通过快速试错以适应现实是无价的</h5><p>实验和适应能带来更快的进步</p>
<h5 id="要意识到你即是一切；又什么都不是。并决定你想成为什么样子"><a href="#要意识到你即是一切；又什么都不是。并决定你想成为什么样子" class="headerlink" title="要意识到你即是一切；又什么都不是。并决定你想成为什么样子"></a>要意识到你即是一切；又什么都不是。并决定你想成为什么样子</h5><p>“个人即是一切；又什么都不是；这是一个巨大的悖论”</p>
<h5 id="你的未来取决于你的视角"><a href="#你的未来取决于你的视角" class="headerlink" title="你的未来取决于你的视角"></a>你的未来取决于你的视角</h5><ul>
<li>你的未来取决于你的如何看待事物；关心什么事物。</li>
<li>必须决定你多大程度将别人的利益放在你的自己利益之上</li>
<li>拥抱现实，从自然的角度俯视自身很美妙</li>
</ul>
<h4 id="1-6-理解自然提供的现实教训"><a href="#1-6-理解自然提供的现实教训" class="headerlink" title="1.6 理解自然提供的现实教训"></a>1.6 理解自然提供的现实教训</h4><h5 id="收益递减规律"><a href="#收益递减规律" class="headerlink" title="收益递减规律"></a>收益递减规律</h5><p>任何东西在从太少变太多的过程中；<code>边际收益都会递减</code></p>
<h5 id="没有痛苦就没有收获"><a href="#没有痛苦就没有收获" class="headerlink" title="没有痛苦就没有收获"></a>没有痛苦就没有收获</h5><p>“人需要困难，这对健康来说是必须的”</p>
<h4 id="1-7-痛苦-反思-进步"><a href="#1-7-痛苦-反思-进步" class="headerlink" title="1.7 痛苦  + 反思 = 进步"></a>1.7 痛苦  + 反思 = 进步</h4><p>如果以正确的态度面对痛苦；感到痛苦就是你的<code>幸运</code>！！ ： <code>即使反思痛苦</code></p>
<p>最好的就是在痛苦的当时就进行反思。</p>
<h4 id="1-8-考虑后续与再后续的结果"><a href="#1-8-考虑后续与再后续的结果" class="headerlink" title="1.8 考虑后续与再后续的结果"></a>1.8 考虑后续与再后续的结果</h4><p>直接结果很可能是诱惑或者痛苦；<br>如果因为直接结果的痛苦而不去做；就很难获得大的成功<br>如果因为直接结果的诱惑而去做了；就会遭遇更大的失败</p>
<h4 id="1-9-接受结果-：-内控点"><a href="#1-9-接受结果-：-内控点" class="headerlink" title="1.9 接受结果 ： 内控点"></a>1.9 接受结果 ： 内控点</h4><p>在生活中不论遇到什么情况；如果你能够负起责任；进行良好的决策；而不是抱怨你无法控制的事情；你将更加容易知找到幸福</p>
<p>不要为喜不喜欢自己的处境担忧；<code>你必须根据自己的愿望找到实现愿望的途径</code>；然后 <code>骨气勇气坚持下去</code><br>后面的`五部流程会给到你一定帮助</p>
<h4 id="1-10-从更高的层次腐蚀机器"><a href="#1-10-从更高的层次腐蚀机器" class="headerlink" title="1.10 从更高的层次腐蚀机器"></a>1.10 从更高的层次腐蚀机器</h4><h5 id="想想自己是一个大机器里的一个小机器；拥有改变自己而变得更好的能力"><a href="#想想自己是一个大机器里的一个小机器；拥有改变自己而变得更好的能力" class="headerlink" title="想想自己是一个大机器里的一个小机器；拥有改变自己而变得更好的能力"></a>想想自己是一个大机器里的一个小机器；拥有改变自己而变得更好的能力</h5><h5 id="通过比较你实现的结果和你的目标；你就能确定如何改进你的机器"><a href="#通过比较你实现的结果和你的目标；你就能确定如何改进你的机器" class="headerlink" title="通过比较你实现的结果和你的目标；你就能确定如何改进你的机器"></a>通过比较你实现的结果和你的目标；你就能确定如何改进你的机器</h5><h5 id="却别作为机器设计者的你和作为机器中工作者的你"><a href="#却别作为机器设计者的你和作为机器中工作者的你" class="headerlink" title="却别作为机器设计者的你和作为机器中工作者的你"></a>却别作为机器设计者的你和作为机器中工作者的你</h5><p>最难的事情是在自身所处的环境中 <code>客观的看待我们自己</code>；不高看自己；不承担不应该承担的任务。</p>
<h5 id="擅于请教领域达人；因为你很难客观看待自己；所以你需要依赖他人的意见以及证据"><a href="#擅于请教领域达人；因为你很难客观看待自己；所以你需要依赖他人的意见以及证据" class="headerlink" title="擅于请教领域达人；因为你很难客观看待自己；所以你需要依赖他人的意见以及证据"></a>擅于请教领域达人；因为你很难客观看待自己；所以你需要依赖他人的意见以及证据</h5><h5 id="如果你头脑开放；足够有决心；你几乎可以实现任何愿望"><a href="#如果你头脑开放；足够有决心；你几乎可以实现任何愿望" class="headerlink" title="如果你头脑开放；足够有决心；你几乎可以实现任何愿望"></a>如果你头脑开放；足够有决心；你几乎可以实现任何愿望</h5><h3 id="2-五部流程；实现你的人数愿望"><a href="#2-五部流程；实现你的人数愿望" class="headerlink" title="2 五部流程；实现你的人数愿望"></a>2 五部流程；实现你的人数愿望</h3><ul>
<li>1 明确目标</li>
<li>2 找到阻碍目标的问题；并且不容忍问题</li>
<li>3 准确诊断问题，找到问题根源</li>
<li>4 规划可以解决问题的方案</li>
<li>5 做一切必要的事儿来践行这些方案，实现成果</li>
</ul>
<p>这五个步骤形成一个循环。<br>需要注意的点是：</p>
<ol>
<li>专注每个点；设定目标的时候就设定目标；不要想实现和出错（延迟批判）</li>
<li>当你诊断问题的时候；就不要想如何解决问题<br><code>混淆这两个问题会导致你无法发现真正的问题</code></li>
</ol>
<p>坚持这些规则；挫折；会让你难受；不完美永远存在；好消息是你可以从错误中吸收学习和成长；<br>坚持下去你就会有收获。</p>
<h4 id="2-1-有明确的目标："><a href="#2-1-有明确的目标：" class="headerlink" title="2.1 有明确的目标："></a>2.1 有明确的目标：</h4><h5 id="排列目标优先级；你几乎可以得到你想要的任何东西；但你无法得到所有东西"><a href="#排列目标优先级；你几乎可以得到你想要的任何东西；但你无法得到所有东西" class="headerlink" title="排列目标优先级；你几乎可以得到你想要的任何东西；但你无法得到所有东西"></a>排列目标优先级；你几乎可以得到你想要的任何东西；但你无法得到所有东西</h5><h5 id="分清目标和欲望"><a href="#分清目标和欲望" class="headerlink" title="分清目标和欲望"></a>分清目标和欲望</h5><ul>
<li>目标是你真正需要的东西</li>
<li>欲望是你想要但会阻碍你实现目标的东西（比如偷懒）</li>
</ul>
<h5 id="不要因为某个目标无法实现就否觉他"><a href="#不要因为某个目标无法实现就否觉他" class="headerlink" title="不要因为某个目标无法实现就否觉他"></a>不要因为某个目标无法实现就否觉他</h5><p>伟大的期望创造伟大的能力</p>
<h5 id="拥有灵活性和自我归咎；那没什么能组织你"><a href="#拥有灵活性和自我归咎；那没什么能组织你" class="headerlink" title="拥有灵活性和自我归咎；那没什么能组织你"></a>拥有灵活性和自我归咎；那没什么能组织你</h5><h5 id="知道如何应对挫折很重要"><a href="#知道如何应对挫折很重要" class="headerlink" title="知道如何应对挫折很重要"></a>知道如何应对挫折很重要</h5><p>逆境中；重要的是<code>守住优势</code>；减少损失。<br>你的任务永远是<code>做出尽可能少的选择</code></p>
<p>吴军老师也说过；成功不难；关键在于 <code>少犯错误</code></p>
<h4 id="2-2-找出问题但是不容忍"><a href="#2-2-找出问题但是不容忍" class="headerlink" title="2.2 找出问题但是不容忍"></a>2.2 找出问题但是不容忍</h4><h5 id="令人痛苦的问题待当做考验你潜在进步的机会"><a href="#令人痛苦的问题待当做考验你潜在进步的机会" class="headerlink" title="令人痛苦的问题待当做考验你潜在进步的机会"></a>令人痛苦的问题待当做考验你潜在进步的机会</h5><p>当你遇到一个问题；那就是一个机会。 大多数人不喜欢这么做。</p>
<h5 id="不要逃避问题；承认问题是改变的第一步"><a href="#不要逃避问题；承认问题是改变的第一步" class="headerlink" title="不要逃避问题；承认问题是改变的第一步"></a>不要逃避问题；承认问题是改变的第一步</h5><p>忍痛前行；痛苦会给你汇报</p>
<h5 id="不要把某个原因当做问题本身"><a href="#不要把某个原因当做问题本身" class="headerlink" title="不要把某个原因当做问题本身"></a>不要把某个原因当做问题本身</h5><p>我无法得到很好的睡眠是一个原因<br>我工作效率低是一个问题；前者可能是后者的原因。</p>
<h5 id="重点解决大问题"><a href="#重点解决大问题" class="headerlink" title="重点解决大问题"></a>重点解决大问题</h5><h4 id="2-3-找到问题根源"><a href="#2-3-找到问题根源" class="headerlink" title="2.3 找到问题根源"></a>2.3 找到问题根源</h4><h5 id="弄清楚问题；这需要时间去诊断"><a href="#弄清楚问题；这需要时间去诊断" class="headerlink" title="弄清楚问题；这需要时间去诊断"></a>弄清楚问题；这需要时间去诊断</h5><p>一次良好的诊断一般需要 15-60分钟</p>
<h5 id="区分直接与根本原因"><a href="#区分直接与根本原因" class="headerlink" title="区分直接与根本原因"></a>区分直接与根本原因</h5><h4 id="2-4-规划方案"><a href="#2-4-规划方案" class="headerlink" title="2.4 规划方案"></a>2.4 规划方案</h4><h5 id="前进之前先回顾"><a href="#前进之前先回顾" class="headerlink" title="前进之前先回顾"></a>前进之前先回顾</h5><h5 id="设置方案；写来来所有人都能看到；严格执行"><a href="#设置方案；写来来所有人都能看到；严格执行" class="headerlink" title="设置方案；写来来所有人都能看到；严格执行"></a>设置方案；写来来所有人都能看到；严格执行</h5><h5 id="规划先于行动；好规划不应定要很多时间"><a href="#规划先于行动；好规划不应定要很多时间" class="headerlink" title="规划先于行动；好规划不应定要很多时间"></a>规划先于行动；好规划不应定要很多时间</h5><h4 id="2-5-坚定的从头到尾执行方案"><a href="#2-5-坚定的从头到尾执行方案" class="headerlink" title="2.5 坚定的从头到尾执行方案"></a>2.5 坚定的从头到尾执行方案</h4><h4 id="2-6-保持谦逊；"><a href="#2-6-保持谦逊；" class="headerlink" title="2.6 保持谦逊；"></a>2.6 保持谦逊；</h4><ul>
<li>与其他人高质量交流</li>
<li>保持谦逊；你可以从别人那里得到你需要的东西</li>
</ul>
<h5 id="找到你最大的弱点；并处理掉"><a href="#找到你最大的弱点；并处理掉" class="headerlink" title="找到你最大的弱点；并处理掉"></a>找到你最大的弱点；并处理掉</h5><h4 id="2-7-理解自己的认知；理解他人与你不同；保持谦逊"><a href="#2-7-理解自己的认知；理解他人与你不同；保持谦逊" class="headerlink" title="2.7 理解自己的认知；理解他人与你不同；保持谦逊"></a>2.7 理解自己的认知；理解他人与你不同；保持谦逊</h4><p>提升认知能力；保持头脑开放；从他人那里获得帮助；你可以实现很多事情</p>
<h3 id="3-做到头脑极度开放"><a href="#3-做到头脑极度开放" class="headerlink" title="3 做到头脑极度开放"></a>3 做到头脑极度开放</h3><p>这一章几乎是生活原则中最重要的一章。(雷达里奥说；这也是全书最重要的一章)<br>主要重点有两个： 一个是为什么要保持头脑开放；<strong>一个是什么情况下你是头脑封闭的</strong><br>认识到第二点其实很重要；这会帮助你的日常反思。</p>
<ul>
<li>认识到自己的障碍和不足；</li>
<li>寻求可信度高的人的意见；设身处地思考和理解；对比自己的；最终做出更好的决策。</li>
</ul>
<h4 id="3-1-认识你的两大障碍"><a href="#3-1-认识你的两大障碍" class="headerlink" title="3.1 认识你的两大障碍"></a>3.1 认识你的两大障碍</h4><h5 id="障碍一：意识障碍；理解你的自我意识障碍"><a href="#障碍一：意识障碍；理解你的自我意识障碍" class="headerlink" title="障碍一：意识障碍；理解你的自我意识障碍"></a>障碍一：意识障碍；理解你的自我意识障碍</h5><p>主要是你<code>潜意识里的防备机制</code>； 使你难以接受你的错误和缺点。</p>
<p>我们有一些根植于内心的需求：</p>
<ul>
<li>被爱</li>
<li>被需要</li>
<li>害怕死亡</li>
<li>害怕失去</li>
<li>害怕自己无意义</li>
</ul>
<h5 id="不能让“想要自己正确的需求-”-压倒-“找出真相”-的需求"><a href="#不能让“想要自己正确的需求-”-压倒-“找出真相”-的需求" class="headerlink" title="不能让“想要自己正确的需求 ” 压倒 “找出真相” 的需求"></a>不能让“想要自己正确的需求 ” 压倒 “找出真相” 的需求</h5><p>当有人和你意见不一样；并且要求你解释的时候；你的大脑会把这样的东西当做 <code>攻击</code>；你会变得愤怒。</p>
<p>如果你想要成功；<code>你需要克制这一点</code>。 这样的人你也可以观察一下；身边到处都是。你也可以反思一下；你自己是不是这样的人。（怎么判断自己有这种倾向在后面会说到）</p>
<h5 id="障碍二；思维障碍；理解你的思维盲点障碍"><a href="#障碍二；思维障碍；理解你的思维盲点障碍" class="headerlink" title="障碍二；思维障碍；理解你的思维盲点障碍"></a>障碍二；思维障碍；理解你的思维盲点障碍</h5><p>人很难理解自己看不到的东西；《需求》 这本书里也有说到 <code>塞缪尔思反射</code> 。<br>如果你一心只想告诉对方自己的认为正确的想法；你就是 <code>一个头脑封闭的人</code></p>
<p>这样的话；当其他人给你展示各种可能性威胁和批评的时候；你可能会看不见。也无法领会。</p>
<h4 id="3-2-奉行头脑极度开放；不仅仅是“承认自己可能错了”"><a href="#3-2-奉行头脑极度开放；不仅仅是“承认自己可能错了”" class="headerlink" title="3.2 奉行头脑极度开放；不仅仅是“承认自己可能错了”"></a>3.2 奉行头脑极度开放；不仅仅是“承认自己可能错了”</h4><p>如果你知道自己有盲点；你就能找到一种解决办法。<br>头脑开放不仅仅是“承认自己可能错了”；但是依旧坚持自己的观点。这样作用不大。</p>
<h5 id="a-诚恳的想想自己也许并不知道最好的解决办法是什么；能不能妥善处理“不知道”很重要"><a href="#a-诚恳的想想自己也许并不知道最好的解决办法是什么；能不能妥善处理“不知道”很重要" class="headerlink" title="a. 诚恳的想想自己也许并不知道最好的解决办法是什么；能不能妥善处理“不知道”很重要"></a>a. 诚恳的想想自己也许并不知道最好的解决办法是什么；能不能妥善处理“不知道”很重要</h5><p>很多糟糕的决定是因为他们相信自己是对的。而头脑极度开放的人知道；找到问题的答案很重要。</p>
<h5 id="b-决策有两个步骤：-1-分析所有相关信息；2-决策"><a href="#b-决策有两个步骤：-1-分析所有相关信息；2-决策" class="headerlink" title="b. 决策有两个步骤： 1 分析所有相关信息；2 决策"></a>b. 决策有两个步骤： 1 分析所有相关信息；2 决策</h5><p>听听其他人的观点并加以思考；不会削弱你独立思考；自主决策的自由。只会帮你拥有更广的角度</p>
<h5 id="c-不要担心你的形象；只担心如何实现目标"><a href="#c-不要担心你的形象；只担心如何实现目标" class="headerlink" title="c. 不要担心你的形象；只担心如何实现目标"></a>c. 不要担心你的形象；只担心如何实现目标</h5><p>做出优秀决策的人；很少坚信自己已经掌握了最好的答案；承认自己有<code>缺点</code> 和 <code>盲点</code> ；并试图了解更多；客服缺陷和盲点。 </p>
<h5 id="d-不吸收；-产出也不大好。"><a href="#d-不吸收；-产出也不大好。" class="headerlink" title="d 不吸收； 产出也不大好。"></a>d 不<code>吸收</code>； <code>产出</code>也不大好。</h5><h5 id="e-从他人的角度；设身处地；才能评估另一种观点的价值"><a href="#e-从他人的角度；设身处地；才能评估另一种观点的价值" class="headerlink" title="e 从他人的角度；设身处地；才能评估另一种观点的价值"></a>e 从他人的角度；设身处地；才能评估另一种观点的价值</h5><p>高度接受自己错了的可能性；鼓励别人告诉自己错在哪里</p>
<h5 id="f-记住；你是在寻找最好的答案；不是自己能得出最好的答案"><a href="#f-记住；你是在寻找最好的答案；不是自己能得出最好的答案" class="headerlink" title="f 记住；你是在寻找最好的答案；不是自己能得出最好的答案"></a>f 记住；你是在寻找最好的答案；不是自己能得出最好的答案</h5><p>知道自己不知道；无比重要。 自问一下；<code>我是不是只是从自己的角度看问题</code></p>
<h5 id="g-搞清楚你是在争论还是在试图理解一个问题；根据可信度；想想哪种更加合理"><a href="#g-搞清楚你是在争论还是在试图理解一个问题；根据可信度；想想哪种更加合理" class="headerlink" title="g 搞清楚你是在争论还是在试图理解一个问题；根据可信度；想想哪种更加合理"></a>g 搞清楚你是在争论还是在试图理解一个问题；根据可信度；想想哪种更加合理</h5><p><code>可信度</code> 有两个特征；</p>
<ul>
<li>反复的在相关领域成功找到答案（<code>至少三次</code>；<code>拥有硬履历</code>）</li>
<li>再被责问的情况下能对自己的观点做出很好的解释</li>
</ul>
<h4 id="3-3-领会并感激：深思熟虑的意见分歧"><a href="#3-3-领会并感激：深思熟虑的意见分歧" class="headerlink" title="3.3 领会并感激：深思熟虑的意见分歧"></a>3.3 领会并感激：深思熟虑的意见分歧</h4><p>沟通方式要让对方觉得：<code>你是试图在理解</code><br>你需要提问；而不是做出陈述；心平气和的进行讨论，并鼓励对方也这么做。</p>
<p>（某些时候）<code>人们在产生分歧时变得愤怒是毫无意义的</code><br>当讨论陷入僵局；最没效果的就是；你试图在脑子中将所有的事情都弄得清楚。</p>
<h4 id="3-4-和可信的；愿意表达分歧的人一起审视你的观点"><a href="#3-4-和可信的；愿意表达分歧的人一起审视你的观点" class="headerlink" title="3.4 和可信的；愿意表达分歧的人一起审视你的观点"></a>3.4 和可信的；愿意表达分歧的人一起审视你的观点</h4><p>既单独询问专家；也鼓励专家在我面前展现意见分歧。</p>
<ul>
<li>为最坏的做准备。使其看起来不那么糟糕。</li>
</ul>
<h4 id="3-5-（重要）识别你头脑封闭的迹象"><a href="#3-5-（重要）识别你头脑封闭的迹象" class="headerlink" title="3.5 （重要）识别你头脑封闭的迹象"></a>3.5 （重要）识别你头脑封闭的迹象</h4><h5 id="a-封闭的人：不喜欢看到自己的观点被挑战"><a href="#a-封闭的人：不喜欢看到自己的观点被挑战" class="headerlink" title="a 封闭的人：不喜欢看到自己的观点被挑战"></a>a 封闭的人：不喜欢看到自己的观点被挑战</h5><p><code>不开放</code>：会因为无法说服他人而沮丧；而不是好奇对方为何看法不同。<br><code>开放</code>： 更想了解为什么会有分歧；明白自己可能是错的</p>
<h5 id="b-封闭的人：喜欢做陈述而不是提问"><a href="#b-封闭的人：喜欢做陈述而不是提问" class="headerlink" title="b 封闭的人：喜欢做陈述而不是提问"></a>b 封闭的人：喜欢做陈述而不是提问</h5><p>开放的人；可信度很高的人；经常会提出很多问题。并真诚的相信自己可能是错的</p>
<h5 id="c-封闭的人-更关心自己是否被理解；而不是理解他人"><a href="#c-封闭的人-更关心自己是否被理解；而不是理解他人" class="headerlink" title="c 封闭的人:  更关心自己是否被理解；而不是理解他人"></a>c 封闭的人:  更关心自己是否被理解；而不是理解他人</h5><p>封闭的人： 通常担心自己没有被理解<br>开放的人：觉得有必要从他人的视角看问题。</p>
<h5 id="d-封闭的人：“我可能错了。。。但这是我的观点”"><a href="#d-封闭的人：“我可能错了。。。但这是我的观点”" class="headerlink" title="d 封闭的人：“我可能错了。。。但这是我的观点”"></a>d 封闭的人：“我可能错了。。。但这是我的观点”</h5><p>这是一个敷衍的回答；人们借此来固守自己的观点<br>最好提出一个问题；而不是做出一个<code>断言</code></p>
<h5 id="e-封闭的人-：-封闭的人，阻挠别人的发言"><a href="#e-封闭的人-：-封闭的人，阻挠别人的发言" class="headerlink" title="e 封闭的人 ： 封闭的人，阻挠别人的发言"></a>e 封闭的人 ： 封闭的人，阻挠别人的发言</h5><p>开放的人更喜欢倾听发言；鼓励表达</p>
<h5 id="f-封闭的人-很难同事拥有两种想法"><a href="#f-封闭的人-很难同事拥有两种想法" class="headerlink" title="f 封闭的人 : 很难同事拥有两种想法"></a>f 封闭的人 : 很难同事拥有两种想法</h5><p>同时持有两种想法；并且能保持独立思考。</p>
<h5 id="g-封闭的人-：-缺乏谦逊"><a href="#g-封闭的人-：-缺乏谦逊" class="headerlink" title="g 封闭的人 ： 缺乏谦逊"></a>g 封闭的人 ： 缺乏谦逊</h5><p>开放的人： 时刻担忧自己可能是错误的。</p>
<h4 id="3-6-如何做到头脑开放？"><a href="#3-6-如何做到头脑开放？" class="headerlink" title="3.6 如何做到头脑开放？"></a>3.6 如何做到头脑开放？</h4><ul>
<li>利用自己的痛苦进行高质量的思考</li>
<li>一旦觉得愤怒；冷静下来；以深思熟虑的方式看待眼前问题</li>
<li>一定要客观；愿意倾听</li>
<li>重视证据</li>
<li>冥想</li>
</ul>
<h3 id="4-理解人与人大大不相同"><a href="#4-理解人与人大大不相同" class="headerlink" title="4 理解人与人大大不相同"></a>4 理解人与人大大不相同</h3><ul>
<li>要理解：左脑思考偏逻辑；右脑思考偏情感。</li>
<li>要理解：最长发生的斗争就是意识与潜意识；情绪和思考的斗争。</li>
</ul>
<p>如果你意识不到你的潜意识的存在；你的行为就会像西奥迪尼在《影响力》中做的那个比喻一样；是一个带着按钮的录音机；一按就播放。<br>比如；听到别人反对时候的被侵犯感。</p>
<ul>
<li>要知道：我们可以改变；通过习惯。</li>
</ul>
<h3 id="5-如何做出正确的决策"><a href="#5-如何做出正确的决策" class="headerlink" title="5 如何做出正确的决策"></a>5 如何做出正确的决策</h3><h4 id="好决策最大的敌人是坏情绪"><a href="#好决策最大的敌人是坏情绪" class="headerlink" title="好决策最大的敌人是坏情绪"></a>好决策最大的敌人是坏情绪</h4><p>如果你被情绪绑架；你讲不可能作出好的决策。作出决策时候必须用逻辑；理性；事实。</p>
<p>正如荣格所说：“如果你不知道潜意识的存在；否则潜意识就会主导你的人生；而你；称之为命运”</p>
<h4 id="先了解；后决策"><a href="#先了解；后决策" class="headerlink" title="先了解；后决策"></a>先了解；后决策</h4><p>1 <code>是什么</code> ：先了解决策的基础知识；既包括“是什么”；也包括宏观的<code>因果关系</code></p>
<p>“习惯性的问自己；我在了解相关情况吗？我已经掌握了决策的所有知识了么？”</p>
<p>为了了解：</p>
<ul>
<li>要知道<code>应该问什么人</code><ul>
<li>不要高估自己的可信度</li>
<li>不要不区分别人的可信度（在相同领域有过3次以上成功经验的硬简历）</li>
</ul>
</li>
<li>区分事实和观点；<code>不要听到什么信什么</code>；别人说的和做的很可能不一样。</li>
<li>80/20原则：你从20%的信息获得80%的价值；明白关键性的20%是什么</li>
<li>不要完美主义；完美主义的边际效用是 <code>递减的</code></li>
</ul>
<p>2 <code>怎么做</code> ：权衡结果；考虑结果；后续的结果；后续的后续的结果</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><code>骗你的，没有惊喜</code>；《原则》说了；别什么都信 23333。</p>
<p>整本书上半部分的重点很清晰：</p>
<p>1 正视现实；有方法的（5步流程）追求你想要的东西。<br>2 通过头脑开放；认识自己的障碍；理解人的大不相同；感谢深思熟虑的意见分歧；从失败中吸取教训。<br>3 不断成长和进化；作出更好的决策；成为更好的自己。</p>
<p>说起来简单；然而知易行难。但即使如此；知道总是改变的第一步。</p>
<p>这本书最大的作用；是让我开始反思自己去年一整年的想法；做事的方法。几乎都是情绪控制着我。大错特错。</p>
<p>感谢原则。保持头脑开放；继续前行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这本原则最近非常火；据说创投圈的人都在读。我在得到app上听过万维钢老师的解读；也写过一些笔记。但是总觉得东西理我自己很远。于是我买回来自己再阅读一次。&lt;/p&gt;
&lt;p&gt;在看书这件事儿上；我能看实体书还是愿意看实体书；一个是因为有读书的感觉；一个是不容易分心（因为我注意力冗余分散）；第三读书笔记记录方便。写下来比打出来记忆更加深刻。最后一个是回顾的时候很方便；你要找自己划线做特殊标记的地方太容易了~ &lt;/p&gt;
&lt;p&gt;所以我之前的策略是电子买一本；实体书买一本；但是。。现在电子书的价格节节攀升。。还是只看实体书好了&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《需求》读书笔记：创造需求的6个关键</title>
    <link href="http://yoursite.com/2018/01/25/%E3%80%8A%E9%9C%80%E6%B1%82%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%88%9B%E9%80%A0%E9%9C%80%E6%B1%82%E7%9A%846%E4%B8%AD%E9%AD%94%E5%8A%9B/"/>
    <id>http://yoursite.com/2018/01/25/《需求》读书笔记：创造需求的6中魔力/</id>
    <published>2018-01-25T14:47:19.000Z</published>
    <updated>2018-04-05T11:50:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一本讲需求创造者的书。书名叫 <code>Demand</code> ； 和我们常常说的 <code>Requirement</code> 是不同的，前者更加偏向于人们内心的渴求。而不是明确的索求。</p>
<p>创造需求的大师；就是可以想群众之想。 通过观察用户的麻烦地图，创造有魔力的产品；提供用户之前不存在的需求；并且不断精进，解决用户的烦恼。</p>
<p>但是书并不是一本创造需求的指导手册。他是通过一些原创的案例的分析；将创造需求的可行的以及需要注意的方向进行总结，变成6个关键点。阅读这些案例与总结；可以为我们提供一定的借鉴意义。但绝不要希望可以按照书中的内容就可以知道现实中的产品如何商业化。</p>
<a id="more"></a>
<h2 id="创造需求；首先要做的是理解人"><a href="#创造需求；首先要做的是理解人" class="headerlink" title="创造需求；首先要做的是理解人"></a>创造需求；首先要做的是理解人</h2><p>真正创造需求的大师，会把所有的精力都投入到对 “人” 了解中。</p>
<ul>
<li>一个人；一个问题；一个点子</li>
</ul>
<p>我们都不了解自己的需求的时候，<code>需求创造者</code> 就已经看透了我们的内心，他们创造出我们无法抗拒的产品</p>
<ul>
<li>从情绪中看需求</li>
</ul>
<p>看出我们 <code>不可理喻，满腔热情，焦虑苦恼，捉摸不定</code>；我们到底需要什么，讨厌什么呢，什么样的东西能够令我们无法抗拒</p>
<ul>
<li>从麻烦中看需求</li>
</ul>
<p><code>我们真正想要的东西，和我们购买的东西之间，总有一道鸿沟</code>； 这就是创造新需求的机会。<code>他们认识到，人们实际购买行为和心理需求之间差异巨大</code></p>
<p>哈斯汀斯因为还录像带迟了要交罚款感到痛苦，发现了其中的麻烦，并解决。最终创造了奈飞。</p>
<p>诺基亚的1100 洞察了渔民的需求而大卖。</p>
<p>所以，优秀的需求创造者都知道以下6个关键点。同时知道如何传递这些能力给到<code>团队里的其他人</code></p>
<h2 id="6个关键点"><a href="#6个关键点" class="headerlink" title="6个关键点"></a>6个关键点</h2><p>这6个关键点，越到值得说道的地方越少，重复性的内容与无用的描述月来越多。只用看标题；就可以大体上知道这一章的主要到底是什么。这样书来作者的总结能力还是很强的</p>
<p>可以说；这本书的核心是案例。脱离的案例；理论就毫无意义。可是这也是一个悖论；你的案例是来说明的你理论；但是否也可以说案例是经过挑选而展现在你的眼前的；为了证明你所说的话是正确的。</p>
<p>我也无法证实我的想法；因为特例总是存在的</p>
<h3 id="关键1-：魔力：创造无法割舍的情感共鸣"><a href="#关键1-：魔力：创造无法割舍的情感共鸣" class="headerlink" title="关键1 ：魔力：创造无法割舍的情感共鸣"></a>关键1 ：魔力：创造无法割舍的情感共鸣</h3><p><code>魔力M = 卓越功能F X 情感诉求</code> </p>
<p><strong>案例：</strong>  <code>zipcar</code>；<code>魏格曼超市</code><br><strong>卷首语：</strong></p>
<ul>
<li>赢家需要创造情感共鸣；并把握市场方向</li>
<li>需求没有必然可言；提供用户不具备的选择</li>
</ul>
<h4 id="zipcar-密度产生魔力"><a href="#zipcar-密度产生魔力" class="headerlink" title="zipcar : 密度产生魔力"></a>zipcar : 密度产生魔力</h4><p>zipcar 初始做共享汽车；理想丰满；上线后市场几乎毫无反应。尽管他拥有很好的理念；卓越的功能，但并不能形成魔力产品。因为当时车辆的距离注册的会员很远；用户用车很不方便。所以用户没有使用的动力。</p>
<p>公司立足的<code>鸿沟</code>是 ： 一遍是客户购买汽车的<code>费用和麻烦</code> ； 一边是 <code>说走就走的自由</code></p>
<p>找出现有产品的缺陷并没有用，需要有足够的魅力激发客户的激情；吸引用户的关注。</p>
<p>需求的关键，通常是不起眼的小事。 <code>他走向成功的点是密度</code> 。 在典型用户分布区域，在用车高分期进行高密度投放。同时做好营销宣传与细节的掌控，（因为需求很脆弱）可以唤醒用户的心理需求：不被一辆机械绑架的自由。 需求从来没有必然可言。zipcar 创造并满足了这一需求。</p>
<h4 id="魏格曼超市；以减少麻烦为目的；关注用户的情感诉求；提供用户不具备的选择"><a href="#魏格曼超市；以减少麻烦为目的；关注用户的情感诉求；提供用户不具备的选择" class="headerlink" title="魏格曼超市；以减少麻烦为目的；关注用户的情感诉求；提供用户不具备的选择"></a>魏格曼超市；以减少麻烦为目的；关注用户的情感诉求；提供用户不具备的选择</h4><p>“关注行业新趋势；赶在其前面；敢于提供当时不具备的选择”</p>
<p>形成魔力的6大行为方式；需求创造者需要：</p>
<ul>
<li>努力减少消除产品和服务中的不便等各种问题</li>
</ul>
<p>魏格曼超市形成了自己的魔力；他们提供各种不具备的选择：深夜营业的药房；“没有糖果” 的收银台；儿童房间等等。</p>
<ul>
<li>知道如何调动客户情感上的兴奋度</li>
</ul>
<p>邀请大厨；退出廉价方便的主菜；提供菜单等等。帮助用户更加愉悦的购物</p>
<ul>
<li>为每一位员工赋予创造需求的力量</li>
</ul>
<p>给员工实现自己的创造需求的能力；这样员工才会主动帮助公司做的更好；<br>比如下雨天；给客户提供撑伞到车内的服务。</p>
<ul>
<li>敢于认真听取顾客的意见</li>
<li>需要孜孜不倦的实验</li>
<li>保护自身的特性<br><code>把事情作对；比做快重要</code></li>
</ul>
<h3 id="关键2-：麻烦地图：解决用户没告诉你的困扰"><a href="#关键2-：麻烦地图：解决用户没告诉你的困扰" class="headerlink" title="关键2 ：麻烦地图：解决用户没告诉你的困扰"></a>关键2 ：麻烦地图：解决用户没告诉你的困扰</h3><p>可以在头脑中绘制麻烦地图；每一个引起失望的结果；都是一个个麻烦点。</p>
<p>“每个没有必要存在的步骤；都是摩擦点；每个摩擦点代表一个需求创造的机会”<br>“需求；是以解决顾客问题为中心的”</p>
<ul>
<li>苹果：一键世界的先锋</li>
</ul>
<p>化摩擦为动力；苹果下载一首歌的点击次数是5次，而其他品牌要18 -35次。<br>“想到李明远对百度音乐的定义： 搜得到；能下载”</p>
<p>绘制麻烦地图的过程中； 你需要想用户的心理活动是什么样的；他们希望从人生中获得什么？如何满足？<br>什么样的麻烦让人用户气愤而无奈；是否存在一些；用户没发现但是我们可以解决</p>
<p>一键世界三大维度： 1 外观设计（奈非改了150版本信封的设计）；2 用户体验（每次微调；减少用户的麻烦）； 3 商业系统</p>
<ul>
<li>CareCore: 协作式医疗的典范</li>
</ul>
<p>减少麻烦；而不是减少成本。CareCore为用户提供个性化的医疗服务；费用虽然高；但是麻烦却很少；很专业。强调沟通；从用户出发。真正延长用户的寿命。</p>
<p>去倾听用户的声音；他们不会说出真实的动机和欲望；“比如买奔驰想让隔壁邻居看着眼红”</p>
<p>“你只要去看，就能观察到很多情况”</p>
<p>corecare 为病人提供免费交通的事情，大多数人都想不到</p>
<h3 id="关键3-：背景因素：那些看似与产品无关的，却决定产品的命运"><a href="#关键3-：背景因素：那些看似与产品无关的，却决定产品的命运" class="headerlink" title="关键3 ：背景因素：那些看似与产品无关的，却决定产品的命运"></a>关键3 ：背景因素：那些看似与产品无关的，却决定产品的命运</h3><p>决定一款产品成功与否力量；常常在你看不见的地方。背景因素就是如此。它构成的基础设施与消费需求之间是相辅相成的。</p>
<p>案例：kindle的成功和Librie的失败。</p>
<p>索尼的电子墨水阅读器比kindle要早出好多年，质量和设计也都不差；却没有取得成功的关键原因是可阅读的书籍的不足。因为出版商觉得这会影响他们自己的收入，不愿提供给到索尼优质的电子书的资源。  浮田嘉孝（索尼CD机的设计师，索尼最富设计天赋的人之一）的失败就是没有观察到这些背景因素对产品成败的影响</p>
<p>kindle则不同；发布的当日就有88000本图书可以下载，比索尼要多的多。</p>
<p>贝索斯说，当自己不知道要怎么做的时候，总是问问自己：“怎么样做对用户更好？” 他也确实这么做了。<br>例如：你再次购买一件你曾经买过的书以及CD的时候，下单的时候会弹出提示框来让你确认。</p>
<h3 id="关键4-：激发力：让潜在的需求变成真正的需求"><a href="#关键4-：激发力：让潜在的需求变成真正的需求" class="headerlink" title="关键4 ：激发力：让潜在的需求变成真正的需求"></a>关键4 ：激发力：让潜在的需求变成真正的需求</h3><p>人的行为很大程度上被自己的各种情绪；偏好所左右；需求像发动机；在激发力的驱使下，一拧就着。</p>
<p>激发力可以让冷淡的骑墙派变得热情；并心甘情愿的变成用户</p>
<p>案例：奈飞；配送速度就是激发力<br>它在增长的阶段发现了湾区的注册数字与人数都高于其他地区；讨论需求没有结果；于是，哈斯汀斯调研发现；只有一个地方不同就是 <code>配送速度</code>；因为奈飞的配送中心就在湾区；</p>
<p><strong>高效便捷的第二天就送达的服务；就是用户兴奋的关键点</strong></p>
<p>后来奈用建立配送中心的地方；注册用户数就会立刻翻倍。</p>
<h3 id="关键5-：精进曲线：缓慢改进就等于平庸"><a href="#关键5-：精进曲线：缓慢改进就等于平庸" class="headerlink" title="关键5 ：精进曲线：缓慢改进就等于平庸"></a>关键5 ：精进曲线：缓慢改进就等于平庸</h3><p>快速迭代；甩开竞争者；才能成为最后的赢家<br>案例懒得写了。。</p>
<h3 id="关键6：去平均好：你不能讨好所有人，一次只满足一类客户"><a href="#关键6：去平均好：你不能讨好所有人，一次只满足一类客户" class="headerlink" title="关键6：去平均好：你不能讨好所有人，一次只满足一类客户"></a>关键6：去平均好：你不能讨好所有人，一次只满足一类客户</h3><p>设计满足所有人的产品；永远是浪费钱和时间。<br>案例懒得写了。。</p>
<h2 id="产品发布：避免阿克琉斯之踵"><a href="#产品发布：避免阿克琉斯之踵" class="headerlink" title="产品发布：避免阿克琉斯之踵"></a>产品发布：避免阿克琉斯之踵</h2><p>全书我觉得最值得读两遍的一整节；虽然读下来很有一种心理学与行为经济学的混合。（如果你读过思考快与慢，就不用读第二遍了。）但是一切需求；最终都要回归到人本身。所以更好的了解我们，了解群体，总是有好处的。</p>
<h3 id="用数据说话"><a href="#用数据说话" class="headerlink" title="用数据说话"></a>用数据说话</h3><p> 做一个现实的人。</p>
<p>决定产品发布成败的是人的思维方式。正确的思维方式是用数据说话；俗话说眼见为实；但是 <code>塞默尔斯反射</code> 却直接指出人性弱点：仅仅凭借数据并不能改变现状；很可能没有人会相信你说的话。（只有我信以为实，才能看得见）；<code>强烈的信念和客观数据之间的竞赛；数据永远是输家</code></p>
<p>想起三本书：《影响力》；告诉我们如何去影响别人的六大武器。如果塞默尔斯知道，也不会英年早逝。《思考快与慢》《原则》一个告诉我们人们思考问题的误区与人性；一个告诉我们要保持极为开放的头脑；时刻反思；我怎么知道我是正确的呢？ 以防止我们陷入同样的陷阱中。</p>
<h3 id="做事前检查"><a href="#做事前检查" class="headerlink" title="做事前检查"></a>做事前检查</h3><p>预期性后见之明： 沃顿商学院的米切尔与康奈尔大雪的拉索以及科罗拉多大学的彭宁顿研究发现；想象某个事件已经发生会让你 预见结果、分析能力提升30%</p>
<p>《能量之源》的作者盖里·克莱恩人文： 事前分析能让人们表达心中焦虑；如果没有这样的机会；人们倾向于隐藏；担心表现出来之后会显得自己不忠实；或者打击团队信心。</p>
<p>想象灾难发生；问问自己为什么失败了，将所有可能的失败列出来；尽你所能去避免这些失败。</p>
<h2 id="一个案例值得说的思维方式转变的案例：监管局不是敌人；而是重要客户"><a href="#一个案例值得说的思维方式转变的案例：监管局不是敌人；而是重要客户" class="headerlink" title="一个案例值得说的思维方式转变的案例：监管局不是敌人；而是重要客户"></a>一个案例值得说的思维方式转变的案例：监管局不是敌人；而是重要客户</h2><p>著名制药公司默克公司采取不同的态度对待FDA； 将他看成客户；</p>
<p>“这位重要的客户在做决策的时候，需要哪些信息” 而尽力去提供；而不是“怎么不惹麻烦而绕开监管局”</p>
<p>如此依赖，他们的审批就比其他的公司快很多</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一本讲需求创造者的书。书名叫 &lt;code&gt;Demand&lt;/code&gt; ； 和我们常常说的 &lt;code&gt;Requirement&lt;/code&gt; 是不同的，前者更加偏向于人们内心的渴求。而不是明确的索求。&lt;/p&gt;
&lt;p&gt;创造需求的大师；就是可以想群众之想。 通过观察用户的麻烦地图，创造有魔力的产品；提供用户之前不存在的需求；并且不断精进，解决用户的烦恼。&lt;/p&gt;
&lt;p&gt;但是书并不是一本创造需求的指导手册。他是通过一些原创的案例的分析；将创造需求的可行的以及需要注意的方向进行总结，变成6个关键点。阅读这些案例与总结；可以为我们提供一定的借鉴意义。但绝不要希望可以按照书中的内容就可以知道现实中的产品如何商业化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="产品经理" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>kotlin学习2 kotlin的编译与反编译以及与java的关系</title>
    <link href="http://yoursite.com/2017/10/14/kotlin%E5%AD%A6%E4%B9%A02-kotlin%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E4%B8%8Ejava%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2017/10/14/kotlin学习2-kotlin的编译与反编译以及与java的关系/</id>
    <published>2017-10-14T09:09:00.000Z</published>
    <updated>2017-10-14T09:10:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要描述 <code>kotlin</code> 的简单编译与反编译的流程。以及与 <code>java</code> 的关系。<br>之前说到 <code>kotlin</code> 是一个静态的代码语言。他也是需要编译的。需要编译就有编译器；而他和<code>java</code>又是可以相互调用的。所以隐隐约约感觉应该编译出来的东西和应该也和<code>java</code> 相关；下面就来看一下。</p>
<a id="more"></a>
<h2 id="下载安装编译器"><a href="#下载安装编译器" class="headerlink" title="下载安装编译器"></a>下载安装编译器</h2><p>方式在官网上都有；我这里选择的是下载压缩包；你通过<code>sdkman</code>；<code>homebrew</code>等安装当然都是 ok 的。官网链接 <a href="http://kotlinlang.org/docs/tutorials/command-line.html" target="_blank" rel="external">点我大帅比</a>。</p>
<p>下载完之后，解压，配置好路径；如下：<br><img src="http://static.zybuluo.com/zhumin1990719/dj4fmo9zzefbculdu4hrb2r2/image_1bsd0v6gh19mv4sf1bqqg3r11onm.png" alt="image_1bsd0v6gh19mv4sf1bqqg3r11onm.png-50.1kB"><br>退出；<code>source</code> 一下你的<code>bashrc</code>或者<code>zshrc</code> 文件；而后验证一下<br><img src="http://static.zybuluo.com/zhumin1990719/hcz8al62f1g3vre9bgt9jp4l/image_1bsd10p1o1c7r1u3r1nfot7bjp13.png" alt="image_1bsd10p1o1c7r1u3r1nfot7bjp13.png-24.7kB"></p>
<p>如此一来，你的编译器就安装好了。下面就是测试。</p>
<h2 id="编译与运行kotlin文件"><a href="#编译与运行kotlin文件" class="headerlink" title="编译与运行kotlin文件"></a>编译与运行kotlin文件</h2><p>首先；<code>vim</code> 编写一个简单的 <code>hello world</code> 文件 <code>HelloKotlin.kt</code>；</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    println(<span class="string">"Hello World"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二：编译与运行；<br>与 <code>java</code> 类似；<code>kotlinc HelloKotlin.kt</code> 编译； 运行 <code>kotlin HelloKotlinKt</code> 执行；如下图。<br><img src="http://static.zybuluo.com/zhumin1990719/3ey110j8y4kmrd929wsiicij/image_1bsd1do35ukb1rkq2ig1405gns1g.png" alt="image_1bsd1do35ukb1rkq2ig1405gns1g.png-28.6kB"></p>
<blockquote>
<p>这里需要注意的是；编译的时候产生的文件如下：<br><img src="http://static.zybuluo.com/zhumin1990719/b5b3drbmzxpa23iwu0ggjlqc/image_1bsd1fvvejdba7u9k18p31dd22d.png" alt="image_1bsd1fvvejdba7u9k18p31dd22d.png-31kB"><br>一个 <code>class</code> 文件；以及一个配置文件的文件夹。<br>这个 <code>class</code> 文件就是我们执行的文件；而编译器在文件末尾加上了 <code>Kt</code> 两个字母用于标记这个<code>Kotlin</code> 的编译文件。</p>
</blockquote>
<h2 id="反编译-class-文件"><a href="#反编译-class-文件" class="headerlink" title="反编译 class 文件"></a>反编译 class 文件</h2><p>既然是 <code>class</code> 文件；可以和<code>java</code>相互执行；<code>javap</code> 反编译一下看看 <code>class</code> 文件的结构。因为<code>kotlin</code> 文件中；我们是没有指定类的；那在<code>class</code> 文件中，一定是会生成类的；否则就和 <code>java</code> 的基本逻辑产生了冲突。我们看一下：<br><img src="http://static.zybuluo.com/zhumin1990719/kjorjwhsgfv2wjhcfec969en/image_1bsd1opuf1l6s1eoj5971t1p1kls3q.png" alt="image_1bsd1opuf1l6s1eoj5971t1p1kls3q.png-35.2kB"></p>
<p>可以反编译的更加彻底一点看下方法内部实现；命令是 <code>javap -c</code><br><img src="http://static.zybuluo.com/zhumin1990719/au3sbrpaw3rsyxbhf2tjyo14/image_1bsd1rjub1docjujtrk8ee1ur047.png" alt="image_1bsd1rjub1docjujtrk8ee1ur047.png-109.6kB"><br>可以看到；调用的都是 <code>java</code> 内部的方法。</p>
<h2 id="打包成jar"><a href="#打包成jar" class="headerlink" title="打包成jar"></a>打包成jar</h2><p>既然是在 <code>jvm</code> 上运行；一定是可以打成 <code>jar</code> 来执行的；<code>kotlinc</code> 提供了支持。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kotlinc HelloKotlin.kt -include-runtime -d HelloKotlin.jar</div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>-include-runtime</code> 是将 <code>kotlin</code> 运行时所需要的包都包含进去的参数。</p>
</blockquote>
<p>而后就可以用 <code>java -jar</code> 来执行。得到一样的结果<br><img src="http://static.zybuluo.com/zhumin1990719/ktu7pxd1ue4p8p4vsei7lqls/image_1bsd239gj1t1911rq1lcnv4l10684k.png" alt="image_1bsd239gj1t1911rq1lcnv4l10684k.png-23.2kB"></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>以上说了如何编译和反编译<code>kotlin</code> 以及如何打成 <code>jar</code> 包运行。当然了一般情况下我们用不到这么麻烦，<code>intellij</code> 提供了很好的支持，但这有助于帮助我们理解 <code>kotlin</code> 与 <code>java</code> 的关系。也有注意我们更好的学习 <code>kotlin</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要描述 &lt;code&gt;kotlin&lt;/code&gt; 的简单编译与反编译的流程。以及与 &lt;code&gt;java&lt;/code&gt; 的关系。&lt;br&gt;之前说到 &lt;code&gt;kotlin&lt;/code&gt; 是一个静态的代码语言。他也是需要编译的。需要编译就有编译器；而他和&lt;code&gt;java&lt;/code&gt;又是可以相互调用的。所以隐隐约约感觉应该编译出来的东西和应该也和&lt;code&gt;java&lt;/code&gt; 相关；下面就来看一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>kotlin学习1 为何学习kotlin</title>
    <link href="http://yoursite.com/2017/10/14/kotlin%E5%AD%A6%E4%B9%A01-%E4%B8%BA%E4%BD%95%E5%AD%A6%E4%B9%A0kotlin/"/>
    <id>http://yoursite.com/2017/10/14/kotlin学习1-为何学习kotlin/</id>
    <published>2017-10-14T07:42:07.000Z</published>
    <updated>2017-10-14T08:27:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-为何使用kotlin"><a href="#1-为何使用kotlin" class="headerlink" title="1 为何使用kotlin"></a>1 为何使用kotlin</h2><ul>
<li>这是一门强势技术</li>
</ul>
<p>语言那么多；不可能什么语言都学习。学习的一定是要有支撑有前景的语言。比如苹果的<code>swift</code>；即使是有呢么多问题；但是由于有苹果的背书</p>
<a id="more"></a>
<ul>
<li>他可以和java进行相互的调用</li>
<li>他解决了java无法通过迭代解决的问题</li>
<li>已经成为安卓的官方支持语言，发展前景很好</li>
<li>spring5 也提供了对kotlin的原生支持</li>
<li>官方文档齐全好用</li>
</ul>
<blockquote>
<p><a href="http://kotlinlang.org/docs/reference/basic-syntax.html" target="_blank" rel="external">http://kotlinlang.org/docs/reference/basic-syntax.html</a><br>可执行</p>
</blockquote>
<h3 id="1-2-kotlin-的特点"><a href="#1-2-kotlin-的特点" class="headerlink" title="1.2 kotlin 的特点"></a>1.2 kotlin 的特点</h3><p><img src="http://static.zybuluo.com/zhumin1990719/5raonicmc2dqbskdf001hafg/image_1bs6sjqm91tu3k8fu8a1l4ok8a9.png" alt="image_1bs6sjqm91tu3k8fu8a1l4ok8a9.png-80.9kB"></p>
<ul>
<li><p>简洁；一行代码解决所有 <code>getter</code> 和 <code>setter</code>; <code>it</code> 语法糖等等<br><img src="http://static.zybuluo.com/zhumin1990719/8xq7h590sr000r5ze0snl7u2/image_1bs6tdkff1ce325evtb1pia16aom.png" alt="image_1bs6tdkff1ce325evtb1pia16aom.png-134.7kB"></p>
</li>
<li><p>安全；使用 <code>optional</code> 避免NPE</p>
</li>
<li>相互操作；兼容所有jvm 和 Android的第三方库</li>
<li>良好的工具支持</li>
</ul>
<h2 id="2-简单代码示例"><a href="#2-简单代码示例" class="headerlink" title="2 简单代码示例"></a>2 简单代码示例</h2><p>通过 intellij；新建一个 <code>kotlin</code> 的项目；新建一个 <code>kotlin</code> 文件；</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/0g1fq8rd1lj6784rr4ptupgt/image_1bs6tp5vvc47ho929omcq1p9213.png" alt="image_1bs6tp5vvc47ho929omcq1p9213.png-59.8kB"></p>
<p>官网上有清晰的教程： <a href="http://kotlinlang.org/docs/tutorials/getting-started.html" target="_blank" rel="external">http://kotlinlang.org/docs/tutorials/getting-started.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.zhumin.kotlin.demo</div><div class="line"></div><div class="line">import java.util.function.Consumer</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line"></div><div class="line">    print(&quot;hello world&quot;)</div><div class="line"></div><div class="line">    val list : List&lt;String&gt; = listOf(&quot;hello&quot;, &quot;world&quot;, &quot;hello world&quot;)</div><div class="line"></div><div class="line">    // 遍历</div><div class="line">    for(str in list) &#123;</div><div class="line">        println(str)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    println(&quot;--------------------&quot;)</div><div class="line"></div><div class="line">    list.forEach (Consumer &#123;println(it)&#125;)</div><div class="line"></div><div class="line">    println(&quot;--------------------&quot;)</div><div class="line"></div><div class="line">    list.forEach(System.out::println)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到引入的是java中的包；对consumer的用法和java8也几乎是一模一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-为何使用kotlin&quot;&gt;&lt;a href=&quot;#1-为何使用kotlin&quot; class=&quot;headerlink&quot; title=&quot;1 为何使用kotlin&quot;&gt;&lt;/a&gt;1 为何使用kotlin&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这是一门强势技术&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语言那么多；不可能什么语言都学习。学习的一定是要有支撑有前景的语言。比如苹果的&lt;code&gt;swift&lt;/code&gt;；即使是有呢么多问题；但是由于有苹果的背书&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Netty 对 WebSocket的简单实现与剖析</title>
    <link href="http://yoursite.com/2017/06/07/Netty-%E5%AF%B9-WebSocket%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%89%96%E6%9E%90/"/>
    <id>http://yoursite.com/2017/06/07/Netty-对-WebSocket的简单实现与剖析/</id>
    <published>2017-06-07T10:42:07.000Z</published>
    <updated>2017-10-14T08:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要描述 <code>netty</code> 对 <code>WebSocket</code> 的支持。并编写一个简单 <code>demo</code>; 对 <code>WebSocket</code> 的内容做了简单剖析。</p>
<p>通过文章会了解为何 <code>WebSocket</code> 是 <code>HTTP</code> 协议升级而来； <code>netty</code> 是如何实现对他的支持等。</p>
<a id="more"></a>
<h2 id="WebSocket-的由来"><a href="#WebSocket-的由来" class="headerlink" title="WebSocket 的由来"></a>WebSocket 的由来</h2><h3 id="HTTP-协议的问题"><a href="#HTTP-协议的问题" class="headerlink" title="HTTP 协议的问题"></a>HTTP 协议的问题</h3><p><code>HTTP</code> 协议无状态，为了保持状态，引出了 <code>session</code> &amp; <code>cookies</code>等技术。</p>
<p><code>HTTP</code> 是基于 <code>请求</code> 和 <code>响应</code> 的，请求一定是客户端发出的。（1.1 还有 <code>keepAlive</code>, 持续连接，在一定时间可以进行连接的复用。）</p>
<p>导致的问题， 服务器无法推送数据。所以早期有客户端轮训技术。<br>会导致资源和网络带宽的浪费。因为 <code>Header</code> 数据每次都要构建。</p>
<h3 id="WebSocket-可以做到什么？"><a href="#WebSocket-可以做到什么？" class="headerlink" title="WebSocket 可以做到什么？"></a>WebSocket 可以做到什么？</h3><p><code>WebSocket</code> 来自 <code>Html5</code>; 所以是 <code>HTTP</code> 协议的一个升级版本</p>
<ul>
<li>协议可以建立浏览器和服务器之间的长连接。</li>
<li>可以实现服务端的push</li>
<li>只需要在一开始建立连接的时候构建 <code>Header</code>；其他时间都不需要再有 <code>Header</code> 信息</li>
</ul>
<blockquote>
<p>因为是基于 HTTP 的，所以建立连接的时候，发的请求是一个标准的 http  请求。只不过是在 <code>Header</code> 中添加了信息。</p>
</blockquote>
<p>虽然是基于 <code>Http</code> 的，但是不仅仅在 <code>浏览器上使用</code><br>也可以通过第三方的工具包在 <code>app</code> 端使用</p>
<h2 id="netty-对-webSocket-的简单实现"><a href="#netty-对-webSocket-的简单实现" class="headerlink" title="netty 对 webSocket 的简单实现"></a>netty 对 webSocket 的简单实现</h2><p>netty 功能众多，可以实现对 <code>HTTP</code> 的支持，可以实现高性能异步 <code>RPC</code> 的功能。同样，他也支持对 <code>WebSocket</code> 的支持。</p>
<p>虽然用过 <code>netty</code> 的人都说 <code>netty</code> 复杂，但是他无论简单和复杂的应用，写起来都是样的复杂，这样一来平均一下，只要你了解了规则，还是比较简单的2333</p>
<h3 id="netty-实现-websocket-服务端"><a href="#netty-实现-websocket-服务端" class="headerlink" title="netty 实现 websocket 服务端"></a>netty 实现 websocket 服务端</h3><p>三个步骤</p>
<ul>
<li>Server</li>
<li>Initializer</li>
<li>Handler</li>
</ul>
<h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>因为你无论写什么 <code>Server</code> 都基本是这个套路：贴代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个示例主要用来阐述</div><div class="line"> * netty 对于 WebSocket 连接的支持</div><div class="line"> * 以及如何写一个简单的WebSocket demo</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)</div><div class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line">                    .childHandler(<span class="keyword">new</span> WebSocketChannelInitializer());</div><div class="line"></div><div class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8899</span>)).sync();</div><div class="line">            channelFuture.channel().closeFuture().sync();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            bossGroup.shutdownGracefully();</div><div class="line">            workerGroup.shutdownGracefully();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里简单解释下为什么有连个 group; 其实一个也没有问题。如果你才会用两个 group；那么 <code>bossGroup</code> 负责接收请求；而 <code>workerGroup</code> 负责处理请求</p>
</blockquote>
<h4 id="Initializer"><a href="#Initializer" class="headerlink" title="Initializer"></a>Initializer</h4><p><code>netty</code> 的各种复杂功能都是由各个 <code>handler</code> 实现的，实现 <code>WebSocket</code> 也是如此。没啥好说的，贴代码，看注释。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketChannelInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ChannelPipeline pipeline = ch.pipeline();</div><div class="line"></div><div class="line">        <span class="comment">// 因为是基于HTTP 协议之上的，所以需要使用到 HTTP 的编解码技术</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</div><div class="line">        <span class="comment">// 按照块来写数据 handler</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> ChunkedWriteHandler());</div><div class="line">        <span class="comment">// http request 和 response 的一个聚合类</span></div><div class="line">        <span class="comment">// netty 会对http 请求做分段的处理；所以在第一个 http 的示例中，有些会调用多次</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</div><div class="line"></div><div class="line">        <span class="comment">// web socket netty 的特殊支持</span></div><div class="line">        <span class="comment">// 其中 "ws" 是指的是 websocket 协议路径</span></div><div class="line">        <span class="comment">// 通常形式   ws://localhost:8899/ws</span></div><div class="line">        <span class="comment">// 8899/ws 后面的 ws 就是我传入的 /ws 路径。</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">"/ws"</span>));</div><div class="line">        <span class="comment">// 插入自定义的 TextWebSocketFrameHandler</span></div><div class="line">        pipeline.addLast(<span class="keyword">new</span> TextWebSocketFrameHandler());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="TextWebSocketFrameHandler"><a href="#TextWebSocketFrameHandler" class="headerlink" title="TextWebSocketFrameHandler"></a>TextWebSocketFrameHandler</h4><p><code>WebSocket</code> 协议的传输是是以 <code>Frame</code> 作为单位的。这里我们处理的是 <code>Text</code> 这种类型的 <code>Frame</code>。<br>传统，贴代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextWebSocketFrameHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"接受到消息："</span> + msg.text());</div><div class="line">        <span class="comment">// 这里我们接受客户端传来的消息，返回我们当前时间</span></div><div class="line">        ctx.writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">"服务器时间："</span> + LocalTime.now()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"连接建立 : "</span> + ctx.channel().id().asLongText());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"连接断开 : "</span> + ctx.channel().id().asLongText());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"出异常"</span>);</div><div class="line">        ctx.close();</div><div class="line">        cause.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Frame</code> 一共有六种，我们可以从类的继承上看<br><img src="http://static.zybuluo.com/zhumin1990719/vhfib8y17vai9qufzhdar6lk/image_1bi10abjtij3k1fol91c5dkrq9.png" alt="image_1bi10abjtij3k1fol91c5dkrq9.png-138.7kB"><br>六种分别有不同的用途，从字面上都比较容易理解<br>至于为什么是六种？ 那是因为 <code>WebSocket</code> 协议就是这么规定的。</p>
</blockquote>
<h3 id="简单的网页客户端"><a href="#简单的网页客户端" class="headerlink" title="简单的网页客户端"></a>简单的网页客户端</h3><p>为了方便，我们就只用简单的 <code>JS</code> 来进行 <code>WebSocket</code> 的调用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">    var socket;</div><div class="line">    // 判断浏览器是不是支持</div><div class="line">    if(window.WebSocket) &#123;</div><div class="line">        socket = new WebSocket("ws://localhost:8899/ws")</div><div class="line">        socket.onmessage = function (event) &#123;</div><div class="line">            var ta = document.getElementById("responseText");</div><div class="line">            ta.value = ta.value + "\n" + event.data</div><div class="line">        &#125;</div><div class="line">        socket.onopen = function (event) &#123;</div><div class="line">            var ta = document.getElementById("responseText");</div><div class="line">            ta.value = "连接开启"</div><div class="line">        &#125;</div><div class="line">        socket.onclose = function (event) &#123;</div><div class="line">            var ta = document.getElementById("responseText");</div><div class="line">            ta.value = "连接关闭"</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        alert("浏览器不支持 WebSocket")</div><div class="line">    &#125;</div><div class="line">    // 发送消息</div><div class="line">    function send(message) &#123;</div><div class="line">        if(!window.WebSocket) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(socket.readyState == WebSocket.OPEN) &#123;</div><div class="line">            socket.send(message)</div><div class="line">        &#125; else &#123;</div><div class="line">            alert("连接尚未开启")</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;form onsubmit="return false;"&gt;</div><div class="line">    &lt;textarea name="message" style="width: 400px; height: 200px"&gt;&lt;/textarea&gt;</div><div class="line">    &lt;input type="button" value="发送数据" onclick="send(this.form.message.value)"/&gt;</div><div class="line">    &lt;h3&gt;服务端输出：&lt;/h3&gt;</div><div class="line">    &lt;textarea id="responseText" style="width: 400px; height: 200px"&gt;&lt;/textarea&gt;</div><div class="line">    &lt;input type="button" value="清空数据" onclick="javascript: document.getElementById('responseText').value=''"/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li><p>启动服务器：<br><img src="http://static.zybuluo.com/zhumin1990719/zx0v9dsjaum7lajszic0e65y/image_1bi10qil21u2ul2hhck541m1jm.png" alt="image_1bi10qil21u2ul2hhck541m1jm.png-89.1kB"></p>
</li>
<li><p>启动客户端</p>
</li>
</ul>
<p>简单的做发你可以在 <code>IntelliJ</code> 中直接运行 <code>html</code> 他会帮你起一个服务。或者你可以用 <code>Python</code> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m SimpleHTTPServer 8080</div></pre></td></tr></table></figure>
<p>我采用第一种：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/7n4gc92bqydxrl621vo7bsae/image_1bi1122017ar1ans1bm8fr71nm513.png" alt="image_1bi1122017ar1ans1bm8fr71nm513.png-64.4kB"><br>客户端显示连接已经建立</p>
<p>此时，你可以在服务器端看到我们要打出的信息<br><img src="http://static.zybuluo.com/zhumin1990719/gp12rirel4wu1dphfwbdn4e9/image_1bi11329c1gjgn4t1rnjvii1t7o1g.png" alt="image_1bi11329c1gjgn4t1rnjvii1t7o1g.png-41.2kB"></p>
<p>然后你可以通过客户端给服务器发送消息：比如我发送</p>
<blockquote>
<p>敏哥好帅<br>还用你所？</p>
</blockquote>
<p>服务端会收到：<br><img src="http://static.zybuluo.com/zhumin1990719/7s4ne8auqwdfjwf5ao0f5hgf/image_1bi116pi91bq35iqpn4150u1t9h1t.png" alt="image_1bi116pi91bq35iqpn4150u1t9h1t.png-41.9kB"></p>
<p>客户端也会收到服务端的时间：<br><img src="http://static.zybuluo.com/zhumin1990719/a0ftuajhha27h8d5npao2mz4/image_1bi117a54qu0k151sfo98a1q6t2a.png" alt="image_1bi117a54qu0k151sfo98a1q6t2a.png-17.4kB"></p>
<p>至此，我们可以的这个例子就成功运行了，你停止服务器会看到客户端输出 <code>连接关闭</code>； 你关闭客户端，会看见服务端输出 <code>连接断开</code>。</p>
<h3 id="更近一步，基于-frame-基于-http"><a href="#更近一步，基于-frame-基于-http" class="headerlink" title="更近一步，基于 frame ? 基于 http ?"></a>更近一步，基于 frame ? 基于 http ?</h3><h4 id="基于-frame-的信息传递"><a href="#基于-frame-的信息传递" class="headerlink" title="基于 frame 的信息传递"></a>基于 frame 的信息传递</h4><p>刚刚说到，<code>WebSocket</code> 在建立长连接后，不需要在传递头信息。我们可以代开 <code>Chrome</code> 的控制台看一下：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/6xc9j5iqby6fbn3oj37sb32k/image_1bi11g7qkkrtt5ud4sop536d2n.png" alt="image_1bi11g7qkkrtt5ud4sop536d2n.png-149.2kB"></p>
<p>我们能看到的是 <code>ws</code> 的连接的信息里有个 <code>Frames</code> 的标签，你传输的信息都在这里。</p>
<h4 id="WebSocket-连接是基于-HTTP-升级的？"><a href="#WebSocket-连接是基于-HTTP-升级的？" class="headerlink" title="WebSocket 连接是基于 HTTP 升级的？"></a>WebSocket 连接是基于 HTTP 升级的？</h4><p>我们可以刷新一下你的客户端的网页，观察下 network 的输出：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/sxu6eoau4d10t21cy45v5ijr/image_1bi11n5ke12tr19kve631ot01p6a34.png" alt="image_1bi11n5ke12tr19kve631ot01p6a34.png-153kB"><br>注意看出了 <code>js</code> 之外的连个请求：第一个就是基本的 <code>http</code> 请求，状态的 <code>304</code></p>
<p><img src="http://static.zybuluo.com/zhumin1990719/c3lmwkxat1yv6xxvwexfggq7/image_1bi11pgoo1kdfao6mi3r8e1i6p3h.png" alt="image_1bi11pgoo1kdfao6mi3r8e1i6p3h.png-135.4kB"></p>
<p>重点在看一下下面的 <code>ws</code> , 他是一个 <code>WebSocket</code> 请求：<br><img src="http://static.zybuluo.com/zhumin1990719/t8ga6azf75757rytx4xcba7d/image_1bi11rlob15li1k8r1ars5pt1mb33u.png" alt="image_1bi11rlob15li1k8r1ars5pt1mb33u.png-166.7kB"></p>
<p><code>request</code> 中还有一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Upgrade:websocket</div></pre></td></tr></table></figure></p>
<p>的内容，就是它将协议由 <code>http</code> 协议升级成为了 <code>websocket</code> 协议。<br>所以就是这么回事</p>
<p>所以，<code>websocket</code> 需要浏览器的支持。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li><code>jdk8</code></li>
<li><code>netty 4.1.10.Final</code></li>
<li><code>gradle</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要描述 &lt;code&gt;netty&lt;/code&gt; 对 &lt;code&gt;WebSocket&lt;/code&gt; 的支持。并编写一个简单 &lt;code&gt;demo&lt;/code&gt;; 对 &lt;code&gt;WebSocket&lt;/code&gt; 的内容做了简单剖析。&lt;/p&gt;
&lt;p&gt;通过文章会了解为何 &lt;code&gt;WebSocket&lt;/code&gt; 是 &lt;code&gt;HTTP&lt;/code&gt; 协议升级而来； &lt;code&gt;netty&lt;/code&gt; 是如何实现对他的支持等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="netty" scheme="http://yoursite.com/tags/netty/"/>
    
      <category term="websocket" scheme="http://yoursite.com/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>老妈的生活哲学</title>
    <link href="http://yoursite.com/2017/05/07/%E6%9C%B1%E8%80%81%E5%B8%88%E4%B8%8E%E8%80%81%E5%A6%88%E7%9A%84%E7%94%9F%E6%B4%BB%E7%BB%86%E8%8A%82/"/>
    <id>http://yoursite.com/2017/05/07/朱老师与老妈的生活细节/</id>
    <published>2017-05-07T05:28:51.000Z</published>
    <updated>2017-05-07T05:35:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近家里人感冒的多，姐姐的双胞胎，小的那个被我们带到舅舅家。</p>
<p>中午，我去我妈那里;</p>
<p><strong><em>我</em></strong>：老妈，今晚舅妈有事儿，我带小宝贝，你给我送点饭。</p>
<p><strong><em>老妈</em></strong>：你中午剩的饭你热热就好啦。</p>
<p><strong><em>我</em></strong> ： 。。。那我叫外卖。。</p>
<p><strong><em>老妈</em></strong> ： 那我也去吃 😌</p>
<p>– The End –</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近家里人感冒的多，姐姐的双胞胎，小的那个被我们带到舅舅家。&lt;/p&gt;
&lt;p&gt;中午，我去我妈那里;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;我&lt;/em&gt;&lt;/strong&gt;：老妈，今晚舅妈有事儿，我带小宝贝，你给我送点饭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;老妈&lt;/em&gt;&lt;/
    
    </summary>
    
    
      <category term="生活细节" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E7%BB%86%E8%8A%82/"/>
    
  </entry>
  
  <entry>
    <title>Linux 上搭建 Anaconda, 远程访问 juypter</title>
    <link href="http://yoursite.com/2017/05/05/Linux-%E4%B8%8A%E6%90%AD%E5%BB%BA-Anaconda-%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE-juypter/"/>
    <id>http://yoursite.com/2017/05/05/Linux-上搭建-Anaconda-远程访问-juypter/</id>
    <published>2017-05-05T09:10:35.000Z</published>
    <updated>2017-05-05T09:15:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是-Anaconda"><a href="#1-什么是-Anaconda" class="headerlink" title="1 什么是 Anaconda"></a>1 什么是 Anaconda</h3><p>Anaconda 能让你轻松安装在数据科学工作中经常使用的包。你还将使用它创建虚拟环境，以便更轻松地处理多个项目。Anaconda 简化了我的工作流程，并且解决了我在处理包和多个 Python 版本时遇到的大量问题。</p>
<a id="more"></a>
<p>Anaconda 实际上是一个软件发行版，它附带了 conda、Python 和 150 多个科学包及其依赖项。应用程序 conda 是包和环境管理器。Anaconda 的下载文件比较大（约 500 MB），因为它附带了 Python 中最常用的数据科学包。如果只需要某些包，或者需要节省带宽或存储空间，也可以使用 Miniconda 这个较小的发行版（仅包含 conda 和 Python）。你仍可以使用 conda 来安装任何可用的包，它只是没有附带这些包而已。</p>
<p>除了管理包之外，conda 还是虚拟环境管理器。它类似于另外两个很流行的环境管理器，即 virtualenv 和 pyenv</p>
<p>环境能让你分隔你要用于不同项目的包。你常常要使用依赖于某个库的不同版本的代码。例如，你的代码可能使用了 Numpy 中的新功能，或者使用了已删除的旧功能。实际上，不可能同时安装两个 Numpy 版本。你要做的应该是，为每个 Numpy 版本创建一个环境，然后在适用于项目的环境中工作。</p>
<p>在应对 Python 2 和 Python 3 时，此问题也会常常发生。你可能会使用在 Python 3 中不能运行的旧代码，以及在 Python 2 中不能运行的新代码。同时安装两个版本可能会造成许多混乱和错误。而创建独立的环境会好很多。</p>
<p>也可以将环境中的包的列表导出为文件，然后将该文件与代码包括在一起。这能让其他人轻松加载代码的所有依赖项。pip 提供了类似的功能，即 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip freeze &gt; requirements.txt。</div></pre></td></tr></table></figure>
<h3 id="2-为什么使用-conda-而不是-virtualenv"><a href="#2-为什么使用-conda-而不是-virtualenv" class="headerlink" title="2 为什么使用 conda 而不是 virtualenv?"></a>2 为什么使用 conda 而不是 virtualenv?</h3><p><img src="http://static.zybuluo.com/zhumin1990719/cgmj2er08c6xivvx1wmlni09/14937979458924.jpg" alt="14937979458924.jpg-832.6kB"></p>
<h3 id="3-安装过程"><a href="#3-安装过程" class="headerlink" title="3 安装过程"></a>3 安装过程</h3><h4 id="1-下载-，上传到机器"><a href="#1-下载-，上传到机器" class="headerlink" title="1 下载 ，上传到机器"></a>1 下载 ，上传到机器</h4><p>你也可以在机器 <code>wget</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://repo.continuum.io/archive/Anaconda2-4.3.1-Linux-x86_64.sh</div></pre></td></tr></table></figure>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh Anaconda2-4.3.1-Linux-x86_64.sh</div></pre></td></tr></table></figure>
<p>选择安装目录。为了节约 根目录空间，安装在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 目录事先必须不存在</div><div class="line">/data/min.zhu/anaconda2</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/zhumin1990719/trullxxzkf24s8z8xbhppybo/14937997286423.jpg" alt="14937997286423.jpg-166kB"></p>
<p>下面</p>
<p>source 一下 <code>.bashrc</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure>
<h4 id="3-设置国内Anaconda源"><a href="#3-设置国内Anaconda源" class="headerlink" title="3 设置国内Anaconda源"></a>3 设置国内Anaconda源</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加Anaconda的TUNA镜像</span></div><div class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</div><div class="line"><span class="comment"># TUNA的help中镜像地址加有引号，需要去掉# 设置搜索时显示通道地址</span></div><div class="line">conda config --set show_channel_urls yes</div></pre></td></tr></table></figure>
<h4 id="4-安装需要的环境"><a href="#4-安装需要的环境" class="headerlink" title="4 安装需要的环境"></a>4 安装需要的环境</h4><p>比如安装 3.5 的python</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create -n lr3 python=3.5</div></pre></td></tr></table></figure>
<p>激活</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source activate lr3</div></pre></td></tr></table></figure>
<p>之后进入虚拟环境</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/us41d1smtqaxgfxt558kbeyn/14927645672574.jpg" alt="14927645672574.jpg-153.7kB"></p>
<p>可以在通过 <code>conda</code> 进行包的管理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda install xxx</div></pre></td></tr></table></figure>
<h4 id="5-修改-pip-源为阿里源"><a href="#5-修改-pip-源为阿里源" class="headerlink" title="5 修改 pip 源为阿里源"></a>5 修改 pip 源为阿里源</h4><p>因为有些包点评直接就没有 比如 <code>tflearn</code> 和 <code>tensorflow</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim ~/.pip/pip.conf</div><div class="line">trusted-host=mirrors.aliyun.com</div><div class="line">index-url=http://mirrors.aliyun.com/pypi/simple/</div></pre></td></tr></table></figure>
<h4 id="6-远程juypter-访问"><a href="#6-远程juypter-访问" class="headerlink" title="6 远程juypter 访问"></a>6 远程juypter 访问</h4><p>首先，不建议使用root , 当你使用 root 的时候，需要使用如下方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook --allow-root</div></pre></td></tr></table></figure>
<p>第二，远程服务器访问需要做一些配置</p>
<p>可以参考如下文章</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://blog.leanote.com/post/jevonswang/远程访问jupyter-notebook</div></pre></td></tr></table></figure>
<p>进行配置</p>
<h3 id="4-管理环境"><a href="#4-管理环境" class="headerlink" title="4 管理环境"></a>4 管理环境</h3><p>如果你安装了多个环境，但是不记得名字，或者想修改的话，通过 <code>conda-env</code> 这个命令就可以看到你所有的环境了。 可以看到附带所有操作<br><img src="http://static.zybuluo.com/zhumin1990719/87mdmv1tpyp79dnmy8mdzhye/14931020058855.jpg" alt="14931020058855.jpg-188.6kB"></p>
<p>比如 <code>conda-env list</code> 就是查看所有命令的格式</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-什么是-Anaconda&quot;&gt;&lt;a href=&quot;#1-什么是-Anaconda&quot; class=&quot;headerlink&quot; title=&quot;1 什么是 Anaconda&quot;&gt;&lt;/a&gt;1 什么是 Anaconda&lt;/h3&gt;&lt;p&gt;Anaconda 能让你轻松安装在数据科学工作中经常使用的包。你还将使用它创建虚拟环境，以便更轻松地处理多个项目。Anaconda 简化了我的工作流程，并且解决了我在处理包和多个 Python 版本时遇到的大量问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="conda" scheme="http://yoursite.com/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.x 如何升级 glibc 2.17</title>
    <link href="http://yoursite.com/2017/05/05/CentOS-6-x-%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7-glibc-2-17/"/>
    <id>http://yoursite.com/2017/05/05/CentOS-6-x-如何升级-glibc-2-17/</id>
    <published>2017-05-05T08:55:00.000Z</published>
    <updated>2017-05-05T10:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>本文描述如何在 <code>CentOS 6.x</code> 升级蛋疼的 <code>glibc 2.17</code>.</p>
<p>学习机器的内容，需要用到 <code>tensorFlow</code>, 在自己 <code>Mac</code> 上跑太心疼了。 于是尝试在公司的测试机上跑。然而我搭建好 <code>conda</code>, <code>jupyter notebook</code> , 引入 <code>tf</code> 的时候报错。<br>（关于如何 安装科学计算环境，以及远程访问 <code>jupyter notebook</code>, 请看下一篇文章）</p>
<p>如下<br><img src="http://static.zybuluo.com/zhumin1990719/1qx1afr47y8ok3gyzwlqobeu/image_1bfbrng2h1mgr110uuqj1l0239n9.png" alt="image_1bfbrng2h1mgr110uuqj1l0239n9.png-26.6kB"></p>
<a id="more"></a>
<p>在一看机器上的情况 最高只有 2.15<br><img src="http://static.zybuluo.com/zhumin1990719/iey92s8tqlehk14a5dddq5lo/image_1bfbrqvjh3eg1qjl1g0i1d1r3kvm.png" alt="image_1bfbrqvjh3eg1qjl1g0i1d1r3kvm.png-55.9kB"></p>
<p>其实已经是运维升级过了的，默认只到 12。主要还是我们的系统版本太低。</p>
<blockquote>
<p>CentOS 7.X，GLIBC 已经到 <code>2.17</code>，GCC 也是 <code>4.8.5</code><br>但是对于公司来说，稳定是第一位的。所以。。。</p>
</blockquote>
<h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><p>两种方法，一种源码编译，一种是用 rpm 来安装，之前看到这篇文章<a href="http://blog.ttionya.com/article-1559.html" target="_blank" rel="external">点这里</a>，其实说的还蛮好的，但是只是升级到 <code>2.15</code>， 而最新的 <code>tf 1.1</code> 版本，需要 <code>2.17</code> 的版本。</p>
<p>其实问题最大的就是找不到给 <code>CentOS 6.x</code> 用的 <code>2.17</code> 的 <code>rpm</code> 包，直到今日，我搜到了有人昨天发布一段脚本，才算找到了解决方法<br>，直接给链接 <a href="https://gist.github.com/harv/f86690fcad94f655906ee9e37c85b174" target="_blank" rel="external">感激万分的点这里</a></p>
<p>你不愿点看，我就写下来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"></div><div class="line"># update glibc to 2.17 for CentOS 6</div><div class="line"></div><div class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-2.17-55.el6.x86_64.rpm</div><div class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-common-2.17-55.el6.x86_64.rpm</div><div class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-devel-2.17-55.el6.x86_64.rpm</div><div class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-headers-2.17-55.el6.x86_64.rpm</div><div class="line"></div><div class="line">sudo rpm -Uvh glibc-2.17-55.el6.x86_64.rpm \</div><div class="line">glibc-common-2.17-55.el6.x86_64.rpm \</div><div class="line">glibc-devel-2.17-55.el6.x86_64.rpm \</div><div class="line">glibc-headers-2.17-55.el6.x86_64.rpm</div></pre></td></tr></table></figure>
<p>其实就是下载资源，然后用 <code>rpm</code> 安装。</p>
<h2 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h2><p>当你执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh glibc-2.17-55.el6.x86_64.rpm \ </div><div class="line">glibc-common-2.17-55.el6.x86_64.rpm \ </div><div class="line">glibc-devel-2.17-55.el6.x86_64.rpm \ </div><div class="line">glibc-headers-2.17-55.el6.x86_64.rpm</div></pre></td></tr></table></figure>
<p>的时候会报错</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/qbu7fz3fl6784ng3k9nv7dkm/image_1bfbsmbs2h3m1o5t163o1luhkhe13.png" alt="image_1bfbsmbs2h3m1o5t163o1luhkhe13.png-84.4kB"></p>
<p>解决方案：<br>命令结尾加上参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--force --nodeps</div></pre></td></tr></table></figure>
<p>原因可以看这篇文章 <a href="http://blog.csdn.net/wulantian/article/details/8804696" target="_blank" rel="external">点这里</a>，造成这个问题的主要原因是套件被重複 (强制) 安装了两次以上. 可以用上面的命令进行依赖忽略，也可以卸载。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>搜索的关键词真的很重要，谷歌很重要，英语很重要。</li>
<li>运气很重要(这个问题折腾我两个礼拜)</li>
<li>别用百度搜技术问题。</li>
</ul>
<h2 id="还有，如果你手动编译安装glibc。。。。"><a href="#还有，如果你手动编译安装glibc。。。。" class="headerlink" title="还有，如果你手动编译安装glibc。。。。"></a>还有，如果你手动编译安装glibc。。。。</h2><p>万一你安装失败就会导致系统各种命令无法执行。。千万别退出。。你一旦退出，就无法登陆了，只能用光盘恢复系统了。。</p>
<p>但是这篇文章里的方法，可以试一试 <a href="https://cnodejs.org/topic/56dc21f1502596633dc2c3dc" target="_blank" rel="external">解决方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;本文描述如何在 &lt;code&gt;CentOS 6.x&lt;/code&gt; 升级蛋疼的 &lt;code&gt;glibc 2.17&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;学习机器的内容，需要用到 &lt;code&gt;tensorFlow&lt;/code&gt;, 在自己 &lt;code&gt;Mac&lt;/code&gt; 上跑太心疼了。 于是尝试在公司的测试机上跑。然而我搭建好 &lt;code&gt;conda&lt;/code&gt;, &lt;code&gt;jupyter notebook&lt;/code&gt; , 引入 &lt;code&gt;tf&lt;/code&gt; 的时候报错。&lt;br&gt;（关于如何 安装科学计算环境，以及远程访问 &lt;code&gt;jupyter notebook&lt;/code&gt;, 请看下一篇文章）&lt;/p&gt;
&lt;p&gt;如下&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/1qx1afr47y8ok3gyzwlqobeu/image_1bfbrng2h1mgr110uuqj1l0239n9.png&quot; alt=&quot;image_1bfbrng2h1mgr110uuqj1l0239n9.png-26.6kB&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>jdk8 一个颠覆了面向对象认知的例子</title>
    <link href="http://yoursite.com/2017/05/03/jdk8-%E4%B8%80%E4%B8%AA%E9%A2%A0%E8%A6%86%E4%BA%86%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%A4%E7%9F%A5%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2017/05/03/jdk8-一个颠覆了面向对象认知的例子/</id>
    <published>2017-05-03T15:27:20.000Z</published>
    <updated>2017-05-03T15:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1 起源"></a>1 起源</h2><p>如果你看了上一篇文章关于 <code>Spliterator</code> 分割迭代器，最后一部分说到了图中的两个强制转换逻辑的不合理之处。</p>
<ul>
<li>第一处，我传入的是一个 <code>Consumer</code> 接口，但是判断的情况却是判断 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">action <span class="keyword">instanceof</span>  IntConsumer</div></pre></td></tr></table></figure>
<p>而 IntConsumer 和 Consumer 是没有继承关系的平行函数式接口。这样的转换为何会成功？</p>
<ul>
<li>第二处，当第一个判断条件不满足的是时候，使用（IntConsumer）强转 <code>lambda</code> 表达式，这样为何能成功被需要传入 <code>IntConsumer</code> 函数所接受呢？</li>
</ul>
<p>如下图：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/b5fvbgzis7apng5pcmv4rxfj/image_1bf48rn8nbi1lrs1hgq1f72ass1t.png" alt="image_1bf48rn8nbi1lrs1hgq1f72ass1t.png-236.6kB"></p>
<a id="more"></a>
<h2 id="2-尝试解释看看喽"><a href="#2-尝试解释看看喽" class="headerlink" title="2 尝试解释看看喽"></a>2 尝试解释看看喽</h2><h3 id="先看第二处：lambda表达式也可以强转？"><a href="#先看第二处：lambda表达式也可以强转？" class="headerlink" title="先看第二处：lambda表达式也可以强转？"></a>先看第二处：lambda表达式也可以强转？</h3><p>我们先写一个类似的例子，有一个需要传入 <code>Consumer</code> 的方法，我们尝试传入一个 <code>IntConsumer</code> 会发生什么情况。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Integer&gt; consumer)</span> </span>&#123;</div><div class="line">        System.out.println(consumer <span class="keyword">instanceof</span> IntConsumer);</div><div class="line">        consumer.accept(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ConsumerTest consumerTest = <span class="keyword">new</span> ConsumerTest();</div><div class="line"></div><div class="line">        Consumer&lt;Integer&gt; consumer = i -&gt; System.out.println(i);</div><div class="line">        IntConsumer intConsumer = i -&gt; System.out.println(i);</div><div class="line"></div><div class="line">        consumerTest.test(consumer);  <span class="comment">// 面向对象的方式</span></div><div class="line">        consumerTest.test(consumer::accept); <span class="comment">// 函数式的方式</span></div><div class="line">        consumerTest.test(intConsumer::accept); <span class="comment">// 函数式的方式</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子的输出结果是：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/twikzu01ww4e7t9u8x63tw9h/image_1bf77758l13l11agu1ekeshv1134l.png" alt="image_1bf77758l13l11agu1ekeshv1134l.png-28kB"></p>
<p>我们发现这三种传入方式都是可以的，第一第二种没什么好说的，因为 <code>Test</code> 方法就是需要传入一个 <code>Consumer</code>， 无论你使用原来传递对象的方式，还是通过方法引用的方法，都是没有问题，可以被执行。</p>
<p>问题在于，第三种方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">consumerTest.test(intConsumer::accept); <span class="comment">// 函数式的方式</span></div></pre></td></tr></table></figure>
<p>当你按住 command 把鼠标放在双冒号的时候 出现的如下：<br><img src="http://static.zybuluo.com/zhumin1990719/kk9ld6ktzbhctlv3xitujalv/image_1bf7diai619ibfi64uk13hp1viv1s.png" alt="image_1bf7diai619ibfi64uk13hp1viv1s.png-121.5kB"></p>
<p>当你按住 command 把鼠标放在的 <code>accept</code> 时候 出现的如下：<br><img src="http://static.zybuluo.com/zhumin1990719/wne2ek9nxhs90tx5zygzc7cc/image_1bf7dhepa1cpp7gi28b1r7v1m3r1f.png" alt="image_1bf7dhepa1cpp7gi28b1r7v1m3r1f.png-155.1kB"></p>
<p>双冒号代表是的当前 <code>lambda</code> 表达式的类型。因为你看我初始化两个consumer的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Consumer&lt;Integer&gt; consumer = i -&gt; System.out.println(i);</div><div class="line">IntConsumer intConsumer = i -&gt; System.out.println(i);</div></pre></td></tr></table></figure>
<p>我后面的表达式是一模一样的。但是却可以赋予两个不同的类型。<br>所以，重点来了</p>
<blockquote>
<p>重点是 lambda 表达式的类型，<code>是要靠上下文进行推断的</code>。</p>
</blockquote>
<p>这个是和传统面向的编程不一样的地方。需要注意。<br>刚刚上面的第三种调用的方式，就是如此，编译器推断出，你这个 <code>lambda</code> 表达式 <code>intConsumer::accept</code> 肯定是 <code>Consumer&lt;T super Integer&gt;</code> 类型的。所以不报错而这个时候如果你前面加一个强制转换，就像文章一开始的那张图的第二个强转逻辑一样，也是可以的。不过，略显多余就是了。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/s65e3diseksbvgh87sgxu6t5/image_1bf7e1upp1aa69mamubh2krap29.png" alt="image_1bf7e1upp1aa69mamubh2krap29.png-57.5kB"></p>
<h3 id="在看第一处"><a href="#在看第一处" class="headerlink" title="在看第一处"></a>在看第一处</h3><p>那么什么情况下，才会出现第一种情况，传入的是 <code>Consumer</code> ，但却同时是 <code>instanceof IntConsumer</code> 呢？</p>
<p>对了！（对什么对，你又没想到）就是这样，你同时继承者两个接口就可以了呀！</p>
<p>上代码！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by charleszhu on 2017/5/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</div><div class="line">    <span class="comment">// 要求传入 Consumer</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInt</span><span class="params">(Consumer&lt;Integer&gt; consumer)</span> </span>&#123;</div><div class="line">        <span class="comment">// 判断是否为 IntConsumer</span></div><div class="line">        System.out.println(consumer <span class="keyword">instanceof</span> IntConsumer);</div><div class="line">        consumer.accept(<span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        ConsumerTest consumerTest = <span class="keyword">new</span> ConsumerTest();</div><div class="line"></div><div class="line">        consumerTest.testInt(<span class="keyword">new</span> MyConsumer2&lt;&gt;());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 同时实现两个方法</div><div class="line"> * <span class="doctag">@param</span> &lt;Integer&gt;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyConsumer2</span>&lt;<span class="title">Integer</span>&gt; <span class="keyword">implements</span> <span class="title">IntConsumer</span>, <span class="title">Consumer</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        System.out.println(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer t)</span> </span>&#123;</div><div class="line">        System.out.println(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行一下结果：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/sfq22rxzqdmtkaqpnlpiqeko/image_1bf7ehq7bgaj1qrg8k61eiq1e1b2m.png" alt="image_1bf7ehq7bgaj1qrg8k61eiq1e1b2m.png-28.5kB"></p>
<p>就可以发现，这个时候就和开头的那个例子中的，第一处转换： 需要传入的是 <code>Consumer</code>, 但是也是 <code>IntConsumer</code> 的实例，就会进入第一个判断了</p>
<p>至此两个强转就解释完毕了！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个例子想给大家说的就是函数式接口的很传统的命令式编程还是有一定差别的。尤其是 <code>lambda</code> 表达式的类型是要靠上下文推断的这一点，需要好好的理解~</p>
<p>只有慢慢理解这些，才能真正理解函数式编程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-起源&quot;&gt;&lt;a href=&quot;#1-起源&quot; class=&quot;headerlink&quot; title=&quot;1 起源&quot;&gt;&lt;/a&gt;1 起源&lt;/h2&gt;&lt;p&gt;如果你看了上一篇文章关于 &lt;code&gt;Spliterator&lt;/code&gt; 分割迭代器，最后一部分说到了图中的两个强制转换逻辑的不合理之处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一处，我传入的是一个 &lt;code&gt;Consumer&lt;/code&gt; 接口，但是判断的情况却是判断 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;action &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt;  IntConsumer&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而 IntConsumer 和 Consumer 是没有继承关系的平行函数式接口。这样的转换为何会成功？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二处，当第一个判断条件不满足的是时候，使用（IntConsumer）强转 &lt;code&gt;lambda&lt;/code&gt; 表达式，这样为何能成功被需要传入 &lt;code&gt;IntConsumer&lt;/code&gt; 函数所接受呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/b5fvbgzis7apng5pcmv4rxfj/image_1bf48rn8nbi1lrs1hgq1f72ass1t.png&quot; alt=&quot;image_1bf48rn8nbi1lrs1hgq1f72ass1t.png-236.6kB&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk8 Stream 解析2 - Spliterator分割迭代器</title>
    <link href="http://yoursite.com/2017/05/02/jdk8-Stream-%E8%A7%A3%E6%9E%902-Spliterator%E5%88%86%E5%89%B2%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://yoursite.com/2017/05/02/jdk8-Stream-解析2-Spliterator分割迭代器/</id>
    <published>2017-05-02T09:48:43.000Z</published>
    <updated>2017-05-02T09:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>说完<code>Stream</code> 的一些源码解析。我们看下我们的 <code>Stream</code> 是如何产生的。我们最为常见的流的产生方式是 <code>collection.stream()</code>, 你点开<code>Stream()</code>方法, 他是通过 <code>Collection</code> 这个上层接口两个java8 新增特性 <code>default method</code> 进行实现。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/x7mirnxozw9czo58sgxezv03/image_1bf3u1l911o5rf825gv39aqe9.png" alt="image_1bf3u1l911o5rf825gv39aqe9.png-41.3kB"></p>
<p>这就牵扯到一个关键要点 <code>Spliterator</code> ：分割迭代器。</p>
<p>本文主要描述 <code>Spliterator</code> 的作用，大部分来源于你不愿意读的 <code>JavaDoc</code>。</p>
<p><code>Spliterator</code> 是 <code>jdk8</code> 非常重要的概念。里面的细节很值得学习玩味。</p>
<a id="more"></a>
<h2 id="Spliterator-冗长的JavaDoc-说了什么？"><a href="#Spliterator-冗长的JavaDoc-说了什么？" class="headerlink" title="Spliterator 冗长的JavaDoc 说了什么？"></a>Spliterator 冗长的JavaDoc 说了什么？</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p><code>Spliterator</code> 是一个对源（数组，集合，io流等等）中元素进行遍历和分区的类。</p>
<p>可以通过 <code>tryAdvance()</code> 方法逐个遍历，也可以按照 <code>forEachRemaining()</code> 方法进行按 <em>bulk</em> 逐块的遍历。（内部调用的还是<em>tryAdvance</em>）</p>
<p><code>Spliterator</code> 有类似 <code>Collector</code> 中的 <code>characteristics</code> , 但都是由十六进制来表示的。</p>
<blockquote>
<ul>
<li>SIZED :表示大小固定, Collection常用</li>
<li>DISTINCT : 去重, Set常用</li>
<li>SORTED : 有顺序的 SortedSet 会用<br>等等</li>
</ul>
</blockquote>
<h3 id="原生类型的特化版本"><a href="#原生类型的特化版本" class="headerlink" title="原生类型的特化版本"></a>原生类型的特化版本</h3><p>特化分割迭代器也被提供，和Stream类似。减少装箱和拆箱的操作<br><img src="http://static.zybuluo.com/zhumin1990719/fdux697e4pizzdyhgfsb51lx/image_1bf3vbfdl10r5vl7ef8t47kium.png" alt="image_1bf3vbfdl10r5vl7ef8t47kium.png-128.9kB"></p>
<h3 id="比迭代器Iterator-更加高效的遍历元素的方式"><a href="#比迭代器Iterator-更加高效的遍历元素的方式" class="headerlink" title="比迭代器Iterator 更加高效的遍历元素的方式"></a>比迭代器Iterator 更加高效的遍历元素的方式</h3><p>提供更加高效的方法，进行数据的迭代。<br><code>Iterator</code> 的使用需要调用两个组合方法 <code>hasNext()</code> 以及 <code>next()</code> ，同事在多线程访问的情况下还会出现竞争，你需要去同步。<br>而分割迭代器 <code>Spliterator</code> 使用函数式编程的方式，只用一个方法就可以做到这个两个函数动作。就避免了竞争 ，就是 <code>tryAdvance()</code> 方法。后面会介绍</p>
<h2 id="Spliterator的接口方法"><a href="#Spliterator的接口方法" class="headerlink" title="Spliterator的接口方法"></a>Spliterator的接口方法</h2><h3 id="tryAdvance"><a href="#tryAdvance" class="headerlink" title="tryAdvance()"></a>tryAdvance()</h3><p>同时做了  <code>hasNext()</code> 以及 <code>next()</code> 的工作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 对给定的元素进行判断，如果满足条件就会执行 Action</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="forEachRemaining"><a href="#forEachRemaining" class="headerlink" title="forEachRemaining()"></a>forEachRemaining()</h3><p>是一个<code>默认方法</code>，对余下的元素进行操作，直到元素全部被遍历完<br>一般情况下回直接调用上面的<code>tryAdvance()</code> 方法，但是也可以更具需要进行重写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 对余下的元素进行操作，直到元素全部被遍历完</div><div class="line">* 如果源是有序的，遍历也是有序的</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</div><div class="line">        <span class="keyword">do</span> &#123; &#125; <span class="keyword">while</span> (tryAdvance(action));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里有一点很值得注意，方法体中的 <code>do {}</code> 是空的，这个是因为 <code>tryAdvance()</code> 方法本身就完成了两个操作 <code>hasNext()</code> 以及 <code>next()</code>，所以方法体中不需要有任何操作了。这个是 函数式编程带来的好处。以及与命令式编程的区别。</p>
</blockquote>
<h3 id="trySplit"><a href="#trySplit" class="headerlink" title="trySplit()"></a>trySplit()</h3><p>尝试切分源来的 <code>Spliterator</code>， 返回的是（注意！！！）返回的是 <strong><code>分割出来的那一部分</code></strong> 数据，原有的数据集将不在包含这部分数据集合。两者 <code>没有交集</code>。剩下的可以继续分割，也许不可以继续分割了</p>
<blockquote>
<p>举个例子，我原来有 100个元素，我通过 <code>trySplit</code> 切分出 <code>30</code> 个，作为一个新的 <code>分割迭代器</code> 返回，原有的，就还剩下 <code>70</code> 个。</p>
</blockquote>
<ul>
<li>如果是原有数据集合是 <code>ORDERD</code> 的，分出来的也是有序的。</li>
<li>除非元素数量是无穷的，否则，最后一定会出现不能在分割的情况，这种情况下，返回的结果是 <code>null</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Spliterator&lt;T&gt; <span class="title">trySplit</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="estimateSize"><a href="#estimateSize" class="headerlink" title="estimateSize()"></a>estimateSize()</h3><p>估算集合剩余给<code>forEachRemaining</code>大小，不一定精确。<br>但是如果这个 <code>Spliterator</code> 是 <code>SIZED</code>，没有被遍历或者 split， 或是 <code>SUBSIZED</code>的，没有被遍历，那么他这个值一定是准确的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>还有个与之相关的默认方法，就是利用这个特性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">long</span> <span class="title">getExactSizeIfKnown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (characteristics() &amp; SIZED) == <span class="number">0</span> ? -<span class="number">1L</span> : estimateSize();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="characteristics"><a href="#characteristics" class="headerlink" title="characteristics()"></a>characteristics()</h3><p>表示集合的特性，一共8个。</p>
<ul>
<li>分割之前，返回的结果都是一致的</li>
</ul>
<blockquote>
<p>如果返回结果不一致，则操作是不受保证的</p>
</blockquote>
<ul>
<li>而分割之后，不保证一致</li>
</ul>
<p>有一个默认方法用于判断 <code>Spliterator</code> 是否包含这个特性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">hasCharacteristics</span><span class="params">(<span class="keyword">int</span> characteristics)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (characteristics() &amp; characteristics) == characteristics;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="getComparator"><a href="#getComparator" class="headerlink" title="getComparator"></a>getComparator</h3><p>如果源是<code>SORTED</code> 类型的，且有比较器 <code>Comparator</code> 的话，则返回这个 <code>Comparator</code>，如果是<code>SORTED</code> 类型的，但是没有比较器，则返回 <code>null</code> , 除此之外，都抛出异常</p>
<p>接口的默认方法里，就是抛出了异常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">default Comparator&lt;? super T&gt; getComparator() &#123;</div><div class="line">        throw new IllegalStateException();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="Spliterator的8个Characteristics-特性"><a href="#Spliterator的8个Characteristics-特性" class="headerlink" title="Spliterator的8个Characteristics 特性"></a>Spliterator的8个Characteristics 特性</h2><h3 id="ORDERED"><a href="#ORDERED" class="headerlink" title="ORDERED"></a>ORDERED</h3><p>源的元素有序，<code>tryAdvance</code> ，<code>forEachRemaining</code>和 <code>trySplit</code> 都会保证有序的进行元素的处理</p>
<ul>
<li>需要注意 <code>hashSet</code> 这类 <code>Collection</code> 是不保证有序的</li>
<li>有<code>ORDERED</code> 特性的数据，在并发计算的时候客户端也要做顺序限制的保证</li>
</ul>
<h3 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h3><p>太简单，唯一性。 类似 <code>Set</code> 这样的传入集合会拥有这样的特性</p>
<h3 id="SORTED"><a href="#SORTED" class="headerlink" title="SORTED"></a>SORTED</h3><p>有这种特性的 <code>Spliterator</code> ，有一个特定的顺序。或者是所有元素都是可比较的，或者是有特定的比较器。</p>
<ul>
<li>有 <code>SORTED</code> 一定会有 <code>ORDERED</code></li>
</ul>
<h3 id="SIZED"><a href="#SIZED" class="headerlink" title="SIZED"></a>SIZED</h3><p>有这种属性的 <code>Spliterator</code> 在遍历和分割之前，<code>estimateSize()</code> 返回的大小是固定的，并且是准确的。</p>
<h3 id="NONNULL"><a href="#NONNULL" class="headerlink" title="NONNULL"></a>NONNULL</h3><p>不为 <code>NULL</code>, 大部分并发的集合，队列，Map 都可能会有这样的特性。</p>
<h3 id="IMMUTABLE"><a href="#IMMUTABLE" class="headerlink" title="IMMUTABLE"></a>IMMUTABLE</h3><p>不可变的。元素遍历期间不可以被 添加，替换，删除（cannot be added, replaced, or removed）<br>否则，应该抛出异常。</p>
<h3 id="CONCURRENT"><a href="#CONCURRENT" class="headerlink" title="CONCURRENT"></a>CONCURRENT</h3><p>支持并发操作的。 </p>
<ul>
<li>顶层的 <code>Spliterator</code> 不可以 <code>CONCURRENT</code> 与 <code>SIZED</code>。 这两者是相互冲突的。</li>
<li>但是分割之后的 <code>Spliterator</code> ， 可能是 <code>SIZED</code>， 顶层不能决定底层</li>
</ul>
<h3 id="SUBSIZED"><a href="#SUBSIZED" class="headerlink" title="SUBSIZED"></a>SUBSIZED</h3><p>从<code>trySplit()</code>被分割后的所有分割迭代器都是 <code>SIZED</code> 以及 <code>SUBSIZED</code> 的。<br>如果分割后，没有按照要求返回<code>SIZED</code> 以及 <code>SUBSIZED</code> 属性，那么操作是不被保证的，也就是结果不可预测。</p>
<blockquote>
<p>这个属性和 <code>SIZED</code> 的区别就是， <code>SIZED</code> 不保证 <code>SUBSIZED</code>。而 <code>SUBSIZED</code> 会要求保证 <code>SIZED</code></p>
</blockquote>
<h2 id="内部特化而做的函数式接口-OfPrimitive"><a href="#内部特化而做的函数式接口-OfPrimitive" class="headerlink" title="内部特化而做的函数式接口 (OfPrimitive)"></a>内部特化而做的函数式接口 (OfPrimitive)</h2><p>除了上面的函数，以及特性，<code>Spliterator</code> 迭代器中，还有几个定义在内部的接口。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/ai9cdxr36s7o0zv3bdb67d1r/image_1bf4821k2kft1nsq13981l5j1h1d13.png" alt="image_1bf4821k2kft1nsq13981l5j1h1d13.png-207.1kB"></p>
<p><code>OfPrimitive</code> 重载了（overloads）了 <code>Spliterator</code> 的方法。用于实现特化的分割迭代器。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/gj8uepdtipdysdlreaypan5n/image_1bf487rnqvk11cpuoeve911ss81g.png" alt="image_1bf487rnqvk11cpuoeve911ss81g.png-41.2kB"></p>
<blockquote>
<p><strong>overloads</strong>：返回类型名称一致，参数不一致。<br>注意与 <code>override</code> 的区别</p>
</blockquote>
<h3 id="一个颠覆面向对象编程常识的现象"><a href="#一个颠覆面向对象编程常识的现象" class="headerlink" title="一个颠覆面向对象编程常识的现象"></a>一个颠覆面向对象编程常识的现象</h3><p>请大家看图<br><img src="http://static.zybuluo.com/zhumin1990719/tr2zzp41rvb62w9t2xo1lb38/image_1bf48rn8nbi1lrs1hgq1f72ass1t.png" alt="image_1bf48rn8nbi1lrs1hgq1f72ass1t.png-236.6kB"></p>
<p>这两次类型转换奇怪的地方是：</p>
<p><code>IntConsumer</code> 与 <code>Consumer</code> 两个接口，没有继承关系，两个接口是平行的。 这样的转换，在之前是不可能成功的。 简直是颠覆认知啊！</p>
<blockquote>
<p>我悄悄说啊（并没有。。你也基本不会关心不是么。。）</p>
</blockquote>
<p>但是在函数式编程中能转换成功呢？ 你可以等我下一篇文章~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;说完&lt;code&gt;Stream&lt;/code&gt; 的一些源码解析。我们看下我们的 &lt;code&gt;Stream&lt;/code&gt; 是如何产生的。我们最为常见的流的产生方式是 &lt;code&gt;collection.stream()&lt;/code&gt;, 你点开&lt;code&gt;Stream()&lt;/code&gt;方法, 他是通过 &lt;code&gt;Collection&lt;/code&gt; 这个上层接口两个java8 新增特性 &lt;code&gt;default method&lt;/code&gt; 进行实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/x7mirnxozw9czo58sgxezv03/image_1bf3u1l911o5rf825gv39aqe9.png&quot; alt=&quot;image_1bf3u1l911o5rf825gv39aqe9.png-41.3kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就牵扯到一个关键要点 &lt;code&gt;Spliterator&lt;/code&gt; ：分割迭代器。&lt;/p&gt;
&lt;p&gt;本文主要描述 &lt;code&gt;Spliterator&lt;/code&gt; 的作用，大部分来源于你不愿意读的 &lt;code&gt;JavaDoc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spliterator&lt;/code&gt; 是 &lt;code&gt;jdk8&lt;/code&gt; 非常重要的概念。里面的细节很值得学习玩味。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk8 Stream &amp; BaseStream 源码难点浅析1</title>
    <link href="http://yoursite.com/2017/05/02/jdk8-Stream-BaseStream-%E6%BA%90%E7%A0%81%E9%9A%BE%E7%82%B9%E6%B5%85%E6%9E%901/"/>
    <id>http://yoursite.com/2017/05/02/jdk8-Stream-BaseStream-源码难点浅析1/</id>
    <published>2017-05-02T04:15:00.000Z</published>
    <updated>2017-05-02T04:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>简要介绍 <code>Stream</code> 的 javadoc，与集合的关系以及区别，一些重要的注意事项</li>
<li>难懂的 <code>Stream</code> 类的声明，介绍比较难懂的 <code>onClose()</code> 方法的调用</li>
</ul>
<a id="more"></a>
<h2 id="Stream的javadoc"><a href="#Stream的javadoc" class="headerlink" title="Stream的javadoc"></a>Stream的javadoc</h2><h3 id="Stream-的作用与特化版本"><a href="#Stream-的作用与特化版本" class="headerlink" title="Stream 的作用与特化版本"></a>Stream 的作用与特化版本</h3><p>Stream 是对一个序列做 <code>串行</code> 或者 <code>并行</code> 聚合操作。他继承自 <code>Stream</code><br>Stream 同时还有几个特化的版本 ，<code>IntStream</code> , <code>LongStream</code>, <code>DoubleStream</code>. 他们为了减少流操作的时候一些不必要的装箱和拆箱的操作。</p>
<blockquote>
<p>需要注意的是，以上四个 <code>Stream</code> 是平行关系，他们都是继承自 <code>BaseStream</code></p>
</blockquote>
<p>举个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 将集合 widgets 中的元素中红色的元素的重量求和</div><div class="line">* 第一步 filter() 过滤红色</div><div class="line">* 第二步 mapToInt() 拿出所有的Red的重量，生成一个 IntStream</div><div class="line">* 第三步 sum() 求和，并返回</div><div class="line">*/</div><div class="line"><span class="keyword">int</span> sum = widgets.stream()</div><div class="line">                      .filter(w -&gt; w.getColor() == RED)</div><div class="line">                      .mapToInt(w -&gt; w.getWeight())</div><div class="line">                      .sum();</div></pre></td></tr></table></figure>
<h3 id="Stream-的组成与特点"><a href="#Stream-的组成与特点" class="headerlink" title="Stream 的组成与特点"></a>Stream 的组成与特点</h3><p>要想实现计算，所有操作，都会被放入一个 <code>pipeline</code> 当中（类似liunx）中的操作。</p>
<p>而一个流管道（pipeline）包含：</p>
<blockquote>
<ul>
<li>source(源)： 数组，集合，迭代器，I/O 操作等等</li>
<li>0个或者多个中间操作： 将一个流转成另外一个流</li>
<li>1个终止操作 : 产生一个结果(比如上面的例子中的求和) or 或者修改传入对象的属性。</li>
</ul>
</blockquote>
<p>流是Lazy的懒惰的！！ 你不加 <code>终止操作</code> 流的操作，就不会被执行。<br>如上面的例子，没有最后的 <code>Sum()</code> 函数，前面的操作是不会被执行的。</p>
<h3 id="集合和Stream-的区别"><a href="#集合和Stream-的区别" class="headerlink" title="集合和Stream 的区别"></a>集合和Stream 的区别</h3><p>集合： 注重存储，主要考虑元素的访问与管理<br>Stream ：注重计算，主要考虑以一种<code>描述性</code> 的语言来对源进行一系列的操作，并将操作聚合起来。</p>
<h3 id="流的注意事项"><a href="#流的注意事项" class="headerlink" title="流的注意事项"></a>流的注意事项</h3><p>1 流中的操作，都应是函数式接口（lambda表达式或者方法引用）<br>2 流不能被重用，每个流只能应用一次。想再次操作你需要重新生成一个流</p>
<p>3 流虽然实现了 <code>AutoCloseable</code> 接口，但是几乎所有的流都是不用关闭的，因为他的源大部分情况下都是集合，而集合是不用关闭的。</p>
<blockquote>
<p>除非源是一个 <code>I/O Channel</code>。 比如 Files.lines() 方法。<br>如果是这样，Stream 就可以申明在 <code>try-with-resources block</code> 中。<br>关于这个 <code>j7</code> 新接口的使用，可以看我之前的一篇关于 <code>AutoCloseable</code> 的介绍 <a href="http://movingon.cn/2017/05/02/jdk1-7%E6%96%B0%E5%A2%9E%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E6%8E%A5%E5%8F%A3AutoCloseable/" target="_blank" rel="external">jdk1.7新增自动关闭接口AutoCloseable</a></p>
</blockquote>
<p>多说一句，<code>Files.lines()</code> 是 j8 中新增的方法，有点类似 <code>python</code> 中 <code>readlines()</code> 方法。很好用。</p>
<h2 id="Stream-amp-BaseStream-解析"><a href="#Stream-amp-BaseStream-解析" class="headerlink" title="Stream &amp; BaseStream 解析"></a>Stream &amp; BaseStream 解析</h2><h3 id="看不懂的声明"><a href="#看不懂的声明" class="headerlink" title="看不懂的声明"></a>看不懂的声明</h3><p>我们可以看一下 <code>Stream</code> 以及 <code>BaseStream</code> 的类的声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//Stream</div><div class="line">public interface Stream&lt;T&gt; extends BaseStream&lt;T, Stream&lt;T&gt;&gt; </div><div class="line">//BaseStream</div><div class="line">public interface BaseStream&lt;T, S extends BaseStream&lt;T, S&gt;&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>BaseStream</code> 中，第二个泛型是 <code>S extends BaseStream&lt;T, S&gt;</code> ，而 <code>Stream</code> 中，第二个泛型是 <code>Stream&lt;T&gt;</code>， 正好是满足 <code>extends BaseStream&lt;T, S&gt;</code> 的条件的，所以可以这么写。</p>
</blockquote>
<p>两个泛型有没有感觉有点晕。其实比较好理解。</p>
<ul>
<li><code>T</code> 这个泛型很好理解，就是流中元素的类型</li>
<li><code>S</code> ？</li>
</ul>
<p>如果你看过javadoc的描述，流的所有中间操作，都会返回一个流，而这个<code>S</code> 就代表着中间操作返回的流的类型。<br>比如我们看一下这个在 <code>Stream</code> 中的方法（其他方法与其一致）</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/m1x94rwz2ygkwzgfwbap4prp/image_1bf3j7bv61mi710k61td11d8l5o79.png" alt="image_1bf3j7bv61mi710k61td11d8l5o79.png-124.2kB"></p>
<h3 id="难懂的-onClose-方法"><a href="#难懂的-onClose-方法" class="headerlink" title="难懂的 onClose() 方法"></a>难懂的 onClose() 方法</h3><p>上面我们知道 <code>BaseStream</code> 实现了 <code>AutoCloseable</code> 接口，也就是 <code>Close()</code> 方法可以得到调用。但是 <code>BaseStream</code> 中，给我们提供了要给<code>OnClose()</code> 方法。我们看下截图</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/p8cudj4reir8u8t9eenmtrct/image_1bf3kmgk61641d2k1euk992t28m.png" alt="image_1bf3kmgk61641d2k1euk992t28m.png-165.3kB"></p>
<p>这个方法，就是当 <code>Close()</code> 方法被调用的时候 <code>onClose()</code>会被调用。但是有几个注意的点</p>
<blockquote>
<ul>
<li><code>onColse()</code> 方法也返回一个流，也就是说可以多次调用。</li>
<li>如果你写了多个<code>onClose()</code> 方法，它会按照顺序调用。</li>
<li>前一个 <code>onClose()</code> 方法除了异常不影响后续 <code>onClose</code> 方法的使用</li>
<li>如果多个 <code>onClose()</code> 方法都抛出异常，只展示第一个异常的堆栈，而其他异常会被压缩，只展示部分信息</li>
</ul>
</blockquote>
<p>上代码！！！！！！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by charleszhu on 2017/5/2.</div><div class="line"> */</div><div class="line">public class StreamTestOnCloseTest &#123;</div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        List&lt;String&gt; testString = Arrays.asList(&quot;min&quot;, &quot;ge&quot;, &quot;da&quot;, &quot;shuaibi&quot;);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 两次关闭</div><div class="line">         * 两次异常</div><div class="line">         * 预期：两次关闭输出依次打出；两次关闭异常只打印一次堆栈，另外一次只展示</div><div class="line">         */</div><div class="line">        try(Stream&lt;String&gt; stream = testString.stream()) &#123;</div><div class="line">            stream.onClose(() -&gt;&#123;</div><div class="line">                System.out.println(&quot;closing 1&quot;); //</div><div class="line">                throw new NullPointerException(&quot;exception 1&quot;);</div><div class="line">            &#125;).onClose(() -&gt; &#123;</div><div class="line">                System.out.println(&quot;closing 2&quot;);</div><div class="line">                throw new NullPointerException(&quot;exception 2&quot;);</div><div class="line">            &#125;).forEach(System.out::println);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下图：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/qzz76okwh4vyzc62m1u0ibuj/image_1bf3lgle8tfjq0nqm2jjd17hk13.png" alt="image_1bf3lgle8tfjq0nqm2jjd17hk13.png-149.2kB"></p>
<p>你们明白了吧（我是天才）</p>
<h3 id="好懂的其他方法"><a href="#好懂的其他方法" class="headerlink" title="好懂的其他方法"></a>好懂的其他方法</h3><p><code>BaseStream</code> 中有的一些其他方法，除了<strong><em>分割迭代器</em></strong>(后面会单独说，因为太重要)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Spliterator&lt;T&gt; spliterator();</div></pre></td></tr></table></figure>
<p>其他都比较好懂。值得一说的是以下两个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">S sequential(); // 返回串行流</div><div class="line">S parallel(); // 返回并行流</div></pre></td></tr></table></figure>
<p>你可以看到他们都返回流对象，也就是可以继续调用 <code>sequential</code> 或者 <code>parallel</code> 方法。但是！！！</p>
<blockquote>
<p>无论你中间怎么调用 ，比如 sequential.parallel.parallel.sequential…. </p>
<p><strong>只以最后一个为最终流的类型！！！</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简要介绍 &lt;code&gt;Stream&lt;/code&gt; 的 javadoc，与集合的关系以及区别，一些重要的注意事项&lt;/li&gt;
&lt;li&gt;难懂的 &lt;code&gt;Stream&lt;/code&gt; 类的声明，介绍比较难懂的 &lt;code&gt;onClose()&lt;/code&gt; 方法的调用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk1.7新增自动关闭接口AutoCloseable</title>
    <link href="http://yoursite.com/2017/05/02/jdk1-7%E6%96%B0%E5%A2%9E%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E6%8E%A5%E5%8F%A3AutoCloseable/"/>
    <id>http://yoursite.com/2017/05/02/jdk1-7新增自动关闭接口AutoCloseable/</id>
    <published>2017-05-02T01:13:09.000Z</published>
    <updated>2017-05-02T09:54:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-AutoCloseable-接口"><a href="#1-AutoCloseable-接口" class="headerlink" title="1 AutoCloseable 接口"></a>1 AutoCloseable 接口</h3><p>这是JDK1.7 的新增语法。帮助你自动关闭一些资源。可能你还不知道这个接口<br><img src="http://static.zybuluo.com/zhumin1990719/rydvwpav6zkm6jhel6244jxl/image_1bf3bdg6r6da1bha17s9cm81bej13.png" alt="image_1bf3bdg6r6da1bha17s9cm81bej13.png-90.6kB"></p>
<a id="more"></a>
<p>这个接口好就好在，只有一个方法，名叫 <code>close()</code>, 而这正好有是我们各个资源关闭的方法名，所以使用起来相当方便，因为名称一样，代码兼容。</p>
<p>JDK8 中就在很多地方应用了这个接口，比如 <code>Stream</code> 继承了 <code>BaseStream</code>，而 <code>BaseStream</code> 则继承了 <code>AutoCloseable</code> 这个接口。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/tmv8f7uvw289fjrfibxcr77y/image_1bf3avqeh1sjr8061aa9kr1bpc9.png" alt="image_1bf3avqeh1sjr8061aa9kr1bpc9.png-45.6kB"></p>
<p>这个接口的说明很清楚，当你在使用 <code>try-with-resources block</code> 这种语法调用来进行资源获取的时候，在 <code>block</code> 退出之后自动关闭</p>
<blockquote>
<p> <code>try-with-resources block</code>  代码块，就是将资源的声明，放在 <code>try</code> 里面； 可以看后面的代码示例</p>
</blockquote>
<p>你不用像之前写 <code>finally{}</code> 代码那样的进行关闭。就不会有资源未被释放的问题。</p>
<h3 id="2-测试代码"><a href="#2-测试代码" class="headerlink" title="2 测试代码"></a>2 测试代码</h3><p>简单测试代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by charleszhu on 2017/5/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCloseAbleTest</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSth</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"doStm"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Close() 看到没，我被吊了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * try-with-resources 语法块</div><div class="line">         */</div><div class="line">        <span class="keyword">try</span>(AutoCloseAbleTest autoCloseAbleTest = <span class="keyword">new</span> AutoCloseAbleTest()) &#123;</div><div class="line">            autoCloseAbleTest.doSth();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行一下，结果如下：<br><img src="http://static.zybuluo.com/zhumin1990719/c709aferpg4yr5myxks8txnu/image_1bf3bcj84433l37sm41vrf10dhm.png" alt="image_1bf3bcj84433l37sm41vrf10dhm.png-120.6kB"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-AutoCloseable-接口&quot;&gt;&lt;a href=&quot;#1-AutoCloseable-接口&quot; class=&quot;headerlink&quot; title=&quot;1 AutoCloseable 接口&quot;&gt;&lt;/a&gt;1 AutoCloseable 接口&lt;/h3&gt;&lt;p&gt;这是JDK1.7 的新增语法。帮助你自动关闭一些资源。可能你还不知道这个接口&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/zhumin1990719/rydvwpav6zkm6jhel6244jxl/image_1bf3bdg6r6da1bha17s9cm81bej13.png&quot; alt=&quot;image_1bf3bdg6r6da1bha17s9cm81bej13.png-90.6kB&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>老版本MacBookPro (厚的) 格式化, U盘安装 MacOS Sierra</title>
    <link href="http://yoursite.com/2017/05/01/%E8%80%81%E7%89%88%E6%9C%ACMacBookPro-%E5%8E%9A%E7%9A%84-%E6%A0%BC%E5%BC%8F%E5%8C%96-U%E7%9B%98%E5%AE%89%E8%A3%85-MacOS-Sierra/"/>
    <id>http://yoursite.com/2017/05/01/老版本MacBookPro-厚的-格式化-U盘安装-MacOS-Sierra/</id>
    <published>2017-05-01T15:12:25.000Z</published>
    <updated>2017-05-02T00:51:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>主要写的点是：U 盘安装盘的制作，以及，为什么会有 </p>
<ul>
<li>can’t be verified</li>
<li>已损坏，重新下载</li>
</ul>
<p>这些问题，即使你是从 app store 中下载的完整版本。</p>
<a id="more"></a>
<p>前两天，我一个朋友拿了一台很老的 <code>MacBook pro</code> , 说他不小心格式化了硬盘，要我重装系统。。</p>
<p>电脑图如下。。<br><img src="http://static.zybuluo.com/zhumin1990719/ky6nya8775sxhivrqgdiqq7c/image_1bf10mmqp1ifr1lgpklstgs1h9o9.png" alt="image_1bf10mmqp1ifr1lgpklstgs1h9o9.png-308.8kB"></p>
<p>有点洁癖的我看到了想说说，要不你砸了吧（当然我没说。。）<br>但是碍于面子（毕竟我是程序员，外界都说是搞电脑的，约等于 修电脑的，近似于你是修电脑的，也就是说电脑相关的你全都会，不会就是大傻逼）。。</p>
<blockquote>
<p>我当然是很愤怒的，之所以没有发作是因为他是我老师。。</p>
</blockquote>
<h2 id="如何制作安装盘"><a href="#如何制作安装盘" class="headerlink" title="如何制作安装盘"></a>如何制作安装盘</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>你需要一下物品：</p>
<blockquote>
<ul>
<li>一个只要8G的U盘</li>
<li>一台工作良好的 macbook pro</li>
<li>良好的网络</li>
<li>我（你没戏了）</li>
</ul>
</blockquote>
<p>言归正传：</p>
<h3 id="步骤一-：-在App-Store-中下载最新的-macos"><a href="#步骤一-：-在App-Store-中下载最新的-macos" class="headerlink" title="步骤一 ： 在App Store 中下载最新的 macos"></a>步骤一 ： 在App Store 中下载最新的 macos</h3><p>连接如下 <a href="https://itunes.apple.com/cn/app/macos-sierra/id1127487414?mt=12" target="_blank" rel="external">下载地址</a><br>她会跳转到 app store. 点击下载即可。它会弹出提示让你更新啥的，不用管它，直接下载</p>
<p>下载好了之后，你在你的 <code>应用程序</code> 文件夹，你就可以看到这个了</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/y0agrs81opqu504ydcxb59nl/image_1bf1226d41kb315mb1ja21bi6fkbm.png" alt="image_1bf1226d41kb315mb1ja21bi6fkbm.png-253.8kB"></p>
<p>至此，你的第一任务完成。</p>
<h3 id="步骤二-：用磁盘工具格式化你的U盘"><a href="#步骤二-：用磁盘工具格式化你的U盘" class="headerlink" title="步骤二 ：用磁盘工具格式化你的U盘"></a>步骤二 ：用磁盘工具格式化你的U盘</h3><p>打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将U盘命名为<br>「Sierra」。(注意：这个盘符名称将会与后面的命令一一对应，如果你改了这盘符的名字，必须保证后面的命令里的名称也要一致。)</p>
<blockquote>
<p>如果不成功，你就多试几次</p>
</blockquote>
<h3 id="步骤三-：-制作安装盘"><a href="#步骤三-：-制作安装盘" class="headerlink" title="步骤三 ： 制作安装盘"></a>步骤三 ： 制作安装盘</h3><p>打开你的终端，输入如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /Applications/Install\ macOS\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\ macOS\ Sierra.app --nointeraction</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意空格前面需要有 <code>\</code> 进行转义</p>
</blockquote>
<p><img src="http://static.zybuluo.com/zhumin1990719/wx8yijvchu5smsimltbdgl9p/image_1bf28fv4l1uph1cvgv581u0uecs13.png" alt="image_1bf28fv4l1uph1cvgv581u0uecs13.png-51.3kB"></p>
<p>耐心得到 <code>done</code>,  你就可以拿着 U 盘去安装了</p>
<h2 id="无法验证？or-已经损坏？"><a href="#无法验证？or-已经损坏？" class="headerlink" title="无法验证？or 已经损坏？"></a>无法验证？or 已经损坏？</h2><p>重装的步骤简单，插入u盘，开机按住 <code>option</code>, 选择u 盘的安装盘。接下来选择安装就可以了。</p>
<p>但是，大部分情况下，都会遇到类似</p>
<blockquote>
<p> This copy of the Install OS X El Capitan application can’t be verified. It may have been corrupted or tampered with during downloading</p>
</blockquote>
<p><img src="http://static.zybuluo.com/zhumin1990719/v32y8u4lwltu78uco91rnee0/image_1bf28oaj5122pbej121d1nfgq831g.png" alt="image_1bf28oaj5122pbej121d1nfgq831g.png-57.5kB"></p>
<p>或者，直接告诉你损坏了，让你再去下载完整版本。</p>
<p>导致这个的原因是，当你决定将一台mac格式化后，在重装系统的时候，系统的时间已经被改变了。这个时候安装程序就会爆出各种错误。你可以通过 终端输入 date 进行查看，时间应该变成了 2001 年。</p>
<p>这个时候， 你只要通过 <code>date</code> 命令重置时间，就可以解决这个问题。<br>他的参数如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">date MMDDHHmmYY replacing the letters as follows.</div><div class="line">MM - 2 digit month  01 - 12</div><div class="line">DD - 2 digit date   01 - 31</div><div class="line">HH - 2 digit hour   01 - 24</div><div class="line">mm - 2 digit minute 01 - 59</div><div class="line">YY - 2 digit year   &gt; 15</div></pre></td></tr></table></figure>
<p>你将时间设置成，你要安装的系统发布之后的一个时间后，退出终端，再次点击操作，就不会有问题。</p>
<p>你也可以看做这个视频 <a href="https://www.youtube.com/watch?v=LRPiynS15_U" target="_blank" rel="external">土逼视频</a> ，需要翻墙。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;主要写的点是：U 盘安装盘的制作，以及，为什么会有 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can’t be verified&lt;/li&gt;
&lt;li&gt;已损坏，重新下载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题，即使你是从 app store 中下载的完整版本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>jdk8-32-groupingBy 源码分析</title>
    <link href="http://yoursite.com/2017/04/30/jdk8-32-groupingBy-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/04/30/jdk8-32-groupingBy-源码分析/</id>
    <published>2017-04-30T08:58:34.000Z</published>
    <updated>2017-04-30T09:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>jdk8 集合的工厂类 <code>Collectors</code> 提供了两个很好用的静态函数。</p>
<ul>
<li>groupingBy</li>
<li>partitioningBy</li>
</ul>
<a id="more"></a>
<p><code>groupingBy</code> 实现类似 Mysql 中分分组功能。返回一个 Map; 而 <code>partitioningBy</code>可以看做是 <code>groupingBy</code> 的特殊形式。我们后面会接着介绍。 使用的是比如统计每个城市人的“姓”，可以这么写</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map&lt;City, Set&lt;String&gt;&gt; namesByCity = people.stream().collect(groupingBy(Person::getCity,                                            mapping(Person::getLastName, toSet())));</div></pre></td></tr></table></figure>
<p>那么，他到底如何利用 <code>Collector</code> 的各个接口来实现的呢？下面我们将深入 JDK 的 <code>Collectors</code> 的源码中，分析一下他是如何工作的。 </p>
<h2 id="groupingBy"><a href="#groupingBy" class="headerlink" title="groupingBy"></a>groupingBy</h2><h3 id="1-第一个重载方法-要简单就别那么多要求，给你个List不错了"><a href="#1-第一个重载方法-要简单就别那么多要求，给你个List不错了" class="headerlink" title="1 第一个重载方法, 要简单就别那么多要求，给你个List不错了"></a>1 第一个重载方法, 要简单就别那么多要求，给你个List不错了</h3><p>分组 <code>groupingBy</code> 有三个重载方法。一个比一复杂。</p>
<p>先看最简单的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input elements</div><div class="line">     * <span class="doctag">@param</span> &lt;K&gt; the type of the keys</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; Collector&lt;T, ?, Map&lt;K, List&lt;T&gt;&gt;&gt;</div><div class="line">    groupingBy(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; classifier) &#123;</div><div class="line">        <span class="keyword">return</span> groupingBy(classifier, toList());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里 <code>T</code> 是输入集合的元素类型， <code>K</code> 是最后产生的 Map 的主键key 的类型。</p>
<p>函数需要传入一个 <code>Function</code> 的函数式接口，<code>Function</code> 的中作就是分类器，比如传入的类型是<code>T</code> 是一个 <code>Person</code>类型 ， 通过 <code>apply()</code> 方法，返回 <code>Person</code> 的属性 <code>name</code>；因为我们要按照 <code>name</code> 来分组。</p>
<p>所以，如果 <code>name</code> 的类型是 <code>String</code> ； 那么 <code>K</code> 就是 <code>String</code></p>
<p>故而，这个 <code>groupingBy(function)</code> 的功能就很清晰了，就是通过 <code>function</code> 对传入的 <code>T</code> 类型进行分类。然后调用 <code>toList()</code> 方法，也就是说每个分类的<code>Person</code> 会放进一个 <code>List&lt;Person&gt;</code> 中</p>
<p>最终返回的类型就是 <code>Map&lt;String, List&lt;Person&gt;&gt;</code>.</p>
<p>而如果你不想返回的是一个<code>List</code> , 希望是一个 <code>Set</code>. 你就要使用第二个重载方法~ 他允许你定义最后的输出函数。</p>
<h3 id="2-第二个重载方法：我要输出Set"><a href="#2-第二个重载方法：我要输出Set" class="headerlink" title="2 第二个重载方法：我要输出Set"></a>2 第二个重载方法：我要输出Set</h3><p>看一下函数的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt; the type of the input elements</div><div class="line">     * <span class="doctag">@param</span> &lt;K&gt; the type of the keys</div><div class="line">     * <span class="doctag">@param</span> &lt;A&gt; the intermediate accumulation type of the downstream collector</div><div class="line">     * <span class="doctag">@param</span> &lt;D&gt; the result type of the downstream reduction</div><div class="line">     * <span class="doctag">@param</span> classifier a classifier function mapping input elements to keys</div><div class="line">     * <span class="doctag">@param</span> downstream a &#123;<span class="doctag">@code</span> Collector&#125; implementing the downstream reduction</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, A, D&gt;</div><div class="line">    Collector&lt;T, ?, Map&lt;K, D&gt;&gt; groupingBy(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; classifier,</div><div class="line">                                          Collector&lt;? <span class="keyword">super</span> T, A, D&gt; downstream) &#123;</div><div class="line">        <span class="keyword">return</span> groupingBy(classifier, HashMap::<span class="keyword">new</span>, downstream);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个函数，明显比上一个要复杂，可以看到，多了一个 <code>Collector</code> 的 <code>downstream</code> , 可以自定义输出的集合。上面那个简单版本的函数是是写死的 <code>List</code></p>
<p>这个函数有四个泛型。</p>
<ul>
<li><code>T</code> 原始元素类型，比如我们这是 <code>Person</code></li>
<li><code>K</code> 返回 Map 的 key, 即最终返回的Map 的建的类型。如果你想按照人的名字分类，那T就是 <code>String</code>, 如果按照年龄分类，那就是 <code>Interger</code></li>
<li><code>A</code> 是 downstream 的 accumulation 的中间结果类型</li>
<li><code>D</code> 是最终输出 Map 的 Value 的类型。比如 <code>List</code> 或者 <code>Set</code> </li>
</ul>
<p>这个方法会调用第三个重载函数，比第二个函数，多了中间的 <code>HashMap::new</code>； 这个是最终返回的 Map 的类型，这里写死的是 HashMap, 如果你想用其他类型，就需要使用最终的也是最复杂的第三个重载函数。</p>
<p>越是你用起来简单的函数，背后的实现就越来越复杂。</p>
<h3 id="3-第三个重载方法-能看懂就随便你怎么玩"><a href="#3-第三个重载方法-能看懂就随便你怎么玩" class="headerlink" title="3 第三个重载方法: 能看懂就随便你怎么玩"></a>3 第三个重载方法: 能看懂就随便你怎么玩</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@param</span> &lt;T&gt; the type of the input elements</div><div class="line">* <span class="doctag">@param</span> &lt;K&gt; the type of the keys</div><div class="line">* <span class="doctag">@param</span> &lt;A&gt; the intermediate accumulation type of the downstream collector</div><div class="line">* <span class="doctag">@param</span> &lt;D&gt; the result type of the downstream reduction</div><div class="line">* <span class="doctag">@param</span> &lt;M&gt; the type of the resulting &#123;<span class="doctag">@code</span> Map&#125;</div><div class="line">* <span class="doctag">@param</span> classifier a classifier function mapping input elements to keys</div><div class="line">* <span class="doctag">@param</span> downstream a &#123;<span class="doctag">@code</span> Collector&#125; implementing the downstream reduction</div><div class="line">* <span class="doctag">@param</span> mapFactory a function which, when called, produces a new empty</div><div class="line">*                   &#123;<span class="doctag">@code</span> Map&#125; of the desired type</div><div class="line">*/</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, D, A, M extends Map&lt;K, D&gt;&gt;</div><div class="line">    Collector&lt;T, ?, M&gt; groupingBy(Function&lt;? <span class="keyword">super</span> T, ? extends K&gt; classifier,</div><div class="line">                                  Supplier&lt;M&gt; mapFactory,</div><div class="line">                                  Collector&lt;? <span class="keyword">super</span> T, A, D&gt; downstream) &#123;</div><div class="line">        Supplier&lt;A&gt; downstreamSupplier = downstream.supplier();</div><div class="line">        BiConsumer&lt;A, ? <span class="keyword">super</span> T&gt; downstreamAccumulator = downstream.accumulator();</div><div class="line">        BiConsumer&lt;Map&lt;K, A&gt;, T&gt; accumulator = (m, t) -&gt; &#123;</div><div class="line">            K key = Objects.requireNonNull(classifier.apply(t), <span class="string">"element cannot be mapped to a null key"</span>);</div><div class="line">            A container = m.computeIfAbsent(key, k -&gt; downstreamSupplier.get());</div><div class="line">            downstreamAccumulator.accept(container, t);</div><div class="line">        &#125;;</div><div class="line">        BinaryOperator&lt;Map&lt;K, A&gt;&gt; merger = Collectors.&lt;K, A, Map&lt;K, A&gt;&gt;mapMerger(downstream.combiner());</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        Supplier&lt;Map&lt;K, A&gt;&gt; mangledFactory = (Supplier&lt;Map&lt;K, A&gt;&gt;) mapFactory;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (downstream.characteristics().contains(Collector.Characteristics.IDENTITY_FINISH)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CollectorImpl&lt;&gt;(mangledFactory, accumulator, merger, CH_ID);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            Function&lt;A, A&gt; downstreamFinisher = (Function&lt;A, A&gt;) downstream.finisher();</div><div class="line">            Function&lt;Map&lt;K, A&gt;, M&gt; finisher = intermediate -&gt; &#123;</div><div class="line">                intermediate.replaceAll((k, v) -&gt; downstreamFinisher.apply(v));</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                M castResult = (M) intermediate;</div><div class="line">                <span class="keyword">return</span> castResult;</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CollectorImpl&lt;&gt;(mangledFactory, accumulator, merger, finisher, CH_NOID);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个函数有5个泛型，除去上面说的 <code>T</code>，<code>K</code>，<code>A</code>，<code>D</code><br>多了一个 mapFactory 的 Supplier() , 用于得到最终返回的 Map 的类型，第二个重载函数写死的 HashMap，这就可以进行自定义。</p>
<p>这个函数有连个值得注意的点：</p>
<ul>
<li>所有的Collectors 中函数，如果函数内部还要做集合处理的，都是使用 <code>downstream</code> 这种模式，利用 <code>downstream</code> 的各种已有的的 <code>Supplier</code> <code>Accumulator</code>等，修改来实现自己的功能。比如在 <code>groupingBy</code> 这个函数，一开始就获取了 <code>downstream</code> 的各个组件，组合成自己需要的收集器，进而用于完成分类的行为。（你还可以去看一看 <code>collectingAndThen()</code> 这个函数）</li>
</ul>
<p><img src="http://static.zybuluo.com/zhumin1990719/r9lzmhqejhu4poxfa65jrwg0/image_1be34fqkpdosrnqo8317uhcnc9.png" alt="image_1be34fqkpdosrnqo8317uhcnc9.png-228kB"></p>
<ul>
<li><code>groupingBy</code> 函数中有有两处强制类型转换。这里其实很难理解，为何可以直接成功的转换呢？</li>
</ul>
<p>第一处<br><img src="http://static.zybuluo.com/zhumin1990719/9aw6m36vtunxhzintfqzhw8x/image_1be351ek7187m19721kb3vijudj13.png" alt="image_1be351ek7187m19721kb3vijudj13.png-186.2kB"></p>
<p>第二处<br><img src="http://static.zybuluo.com/zhumin1990719/lqq4sk8y37vbchc9m7ajs0cn/image_1be353p451uuhvefd57r2u16ad1g.png" alt="image_1be353p451uuhvefd57r2u16ad1g.png-161.3kB"></p>
<p>两处其实都是将最终结果泛型 <code>D</code> 转成 中间结果 <code>A</code>。<br>对于第一处， mapFactory 是作为一个 <code>Supplier</code> 出现，而他的目的是提供中间结果类型，而他上面的 <code>accumulator</code> 的中间结果类型，就是<strong>K,A</strong>， 所以这样的强转是一定可以成功的</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/sqtr5d56vcc4y5qtm6yhv271/image_1be35m758itj1grmlc71nu81rrm1t.png" alt="image_1be35m758itj1grmlc71nu81rrm1t.png-139.5kB"></p>
<p>第二处也是一样的，因为全称都使用了 <code>A</code>，其实 <code>A</code> 和 <code>D</code> 在这里，是等价的。所以转换都可以成功。</p>
<p>你去可以从这么一个角度思考问题：</p>
<blockquote>
<p>你最终需要生成 <code>D</code> 类型，为何中间要给自己生成一个不一样的 <code>A</code> 类型添堵呢？ 你 4 不 4 sa？</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jdk8 集合的工厂类 &lt;code&gt;Collectors&lt;/code&gt; 提供了两个很好用的静态函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;groupingBy&lt;/li&gt;
&lt;li&gt;partitioningBy&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk8-31-工厂方法收集器Collectors的中的常用函数</title>
    <link href="http://yoursite.com/2017/04/13/jdk8-31-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%94%B6%E9%9B%86%E5%99%A8Collectors%E7%9A%84%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/04/13/jdk8-31-工厂方法收集器Collectors的中的常用函数/</id>
    <published>2017-04-13T13:28:28.000Z</published>
    <updated>2017-04-14T07:07:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-collectorImpl"><a href="#1-collectorImpl" class="headerlink" title="1   collectorImpl"></a>1   collectorImpl</h3><ul>
<li><code>Collectors</code> 中的 的基础 <code>collectorImpl</code> 两个构造方法一个有 <code>finisher()</code>, 一个没有。这个很容易理解，一个需要转换中间结果，一个中间结果和最终结果一致，所以不需要使用 <code>finisher()</code> 方法</li>
</ul>
<a id="more"></a>
<h3 id="2-两种实现方式"><a href="#2-两种实现方式" class="headerlink" title="2  两种实现方式"></a>2  两种实现方式</h3><p>对于工厂类 两种实现方式</p>
<ol>
<li><code>CollectorImpl</code> 来实现。</li>
<li><code>reduceing</code> 来实现， 而 <code>reducing</code> 方法归根还是用的是 <code>CollectorImpl</code> 方法来实现</li>
</ol>
<h3 id="3-常见函数"><a href="#3-常见函数" class="headerlink" title="3  常见函数"></a>3  常见函数</h3><h4 id="1）-toList-amp-toCollection"><a href="#1）-toList-amp-toCollection" class="headerlink" title="1）  toList() &amp; toCollection"></a>1）  <code>toList()</code> &amp; <code>toCollection</code></h4><ul>
<li><p>两个最常用的方法 <code>toList()</code> &amp; <code>toCollection</code><br><img src="http://ooapi4q4v.bkt.clouddn.com/14918251558881.jpg" alt=""></p>
</li>
<li><p><code>toSet()</code> 方法是也是 <code>toCollection</code> 的特化。</p>
</li>
</ul>
<h4 id="2）-joining"><a href="#2）-joining" class="headerlink" title="2）  joining()"></a>2）  <code>joining()</code></h4><ul>
<li><code>joining</code> 三种重载方法</li>
</ul>
<h4 id="3）-mapping"><a href="#3）-mapping" class="headerlink" title="3）  mapping()"></a>3）  <code>mapping()</code></h4><ul>
<li><code>mapping()</code> 将输入元素转换成输出元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Map&lt;City, Set&lt;String&gt;&gt; lastNamesByCity= people.stream().collect(groupingBy(</div><div class="line">Person::getCity,</div><div class="line">mapping(Person::getLastName, toSet()) <span class="comment">// Mapping , 将Person 转换成String , 提供给下游 Collector 使用</span></div><div class="line">));</div></pre></td></tr></table></figure>
<h4 id="4）-collectingAndThen"><a href="#4）-collectingAndThen" class="headerlink" title="4）  collectingAndThen()"></a>4）  <code>collectingAndThen()</code></h4><ul>
<li><p><code>collectingAndThen(Collector&lt;T,A,R&gt; downstream, Function&lt;R,RR&gt; finisher)</code>  先过完上层收集器 <code>downstream</code> ，在进行一次 <code>finisher()</code> 转换结果</p>
<p> 比如说，你在 <code>toList()</code> 之后，想将它转换成一个 <code>immutableList()</code> 就可以如下使用</p>
</li>
</ul>
<pre><code class="java">List&lt;String&gt; people = people.stream().collect(collectingAndThen(toList(), Collections::unmodifiableList));
</code></pre>
<p>实现其实很有意思<br><img src="http://ooapi4q4v.bkt.clouddn.com/14918263223655.jpg" alt=""></p>
<h4 id="5）-counting-minBy-maxBy"><a href="#5）-counting-minBy-maxBy" class="headerlink" title="5）  counting() , minBy() , maxBy()"></a>5）  <code>counting()</code> , <code>minBy()</code> , <code>maxBy()</code></h4><ul>
<li><code>counting()</code> , <code>minBy()</code> , <code>maxBy()</code> 用 <code>reducing()</code> 实现, <code>reducing()</code> 又是基于 <code>CollectorImpl</code> 实现</li>
</ul>
<h4 id="6）-summingInt-averagingInt-averagingDouble"><a href="#6）-summingInt-averagingInt-averagingDouble" class="headerlink" title="6）  summingInt() , averagingInt() , averagingDouble()"></a>6）  <code>summingInt()</code> , <code>averagingInt()</code> , <code>averagingDouble()</code></h4><ul>
<li><code>summingInt()</code> 对每一个元素使用 <code>toIntFunction</code> 在累加，实现很有意思</li>
</ul>
<p><img src="http://ooapi4q4v.bkt.clouddn.com/14918267966242.jpg" alt=""></p>
<p><code>Supplier()</code> 采用生成了一个 长度为1 的 <code>int</code> 数组，而不是直接使用的整形数字？<br>因为数字是一个 <code>值</code>， 值是无法传递的，而数组是一个 <code>引用</code>， 引用是可以传递的。</p>
<ul>
<li><code>averagingInt()</code> 求平均值</li>
</ul>
<p><img src="http://ooapi4q4v.bkt.clouddn.com/14918270760778.jpg" alt=""></p>
<ul>
<li>对于<code>averagingDouble()</code> 的实现可以再去看一下，他的初始数组长度为4，他们视为浮点数计算的补偿产生的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-collectorImpl&quot;&gt;&lt;a href=&quot;#1-collectorImpl&quot; class=&quot;headerlink&quot; title=&quot;1   collectorImpl&quot;&gt;&lt;/a&gt;1   collectorImpl&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Collectors&lt;/code&gt; 中的 的基础 &lt;code&gt;collectorImpl&lt;/code&gt; 两个构造方法一个有 &lt;code&gt;finisher()&lt;/code&gt;, 一个没有。这个很容易理解，一个需要转换中间结果，一个中间结果和最终结果一致，所以不需要使用 &lt;code&gt;finisher()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk8-28-30-自定义收集器&amp;坑</title>
    <link href="http://yoursite.com/2017/04/12/jdk8-28-30-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%94%B6%E9%9B%86%E5%99%A8-%E5%9D%91/"/>
    <id>http://yoursite.com/2017/04/12/jdk8-28-30-自定义收集器-坑/</id>
    <published>2017-04-12T00:32:03.000Z</published>
    <updated>2017-05-02T01:57:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>收集器中有很5个抽象方法，每个抽象方法都有自己特殊的作用，如果说我们要自己实现要给收集器的话，我们就需要分别实现下面五个方法。</p>
<a id="more"></a>
<h3 id="1-简单自定义一个收集器"><a href="#1-简单自定义一个收集器" class="headerlink" title="1 简单自定义一个收集器"></a>1 简单自定义一个收集器</h3><p>这个收集器的目的是将一个 <code>list</code> 转换成一个 <code>set</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySetCollector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">Set</span>&lt;<span class="title">T</span>&gt;, <span class="title">Set</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Supplier&lt;Set&lt;T&gt;&gt; supplier() &#123;</div><div class="line">        System.out.println(<span class="string">"supplier invoked!!!"</span>);</div><div class="line">        <span class="keyword">return</span> HashSet::<span class="keyword">new</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BiConsumer&lt;Set&lt;T&gt;, T&gt; accumulator() &#123;</div><div class="line">	    System.out.println(<span class="string">"accumulator invoked!!!"</span>);</div><div class="line">        <span class="keyword">return</span> Set&lt;T&gt;::add;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 并行性流才会调用，将两个分段的集合</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BinaryOperator&lt;Set&lt;T&gt;&gt; combiner() &#123;</div><div class="line">        System.out.println(<span class="string">"combiner invoked!!!"</span>);</div><div class="line">        <span class="keyword">return</span> (t1, t2) -&gt; &#123;</div><div class="line">            t1.addAll(t2);</div><div class="line">            <span class="keyword">return</span> t1;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Function&lt;Set&lt;T&gt;, Set&lt;T&gt;&gt; finisher() &#123;</div><div class="line">        System.out.println(<span class="string">"finisher invoked!!!"</span>);</div><div class="line">        <span class="keyword">return</span> Function.identity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 描述这个集合的特性</div><div class="line">     * IDENTITY_FINISH 表示结果容器和中间容器是一致的，这个时候 JDK 会在返回的时候自动帮助我们做类型转换。而不用再去调用 finisher</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"characteristics invoked!!!"</span>);</div><div class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.of(IDENTITY_FINISH,UNORDERED));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">"hello"</span> , <span class="string">"world"</span>, <span class="string">"welcome"</span>, <span class="string">"hello"</span>);</div><div class="line"></div><div class="line">        Set&lt;String&gt; stringSet = words.stream().collect(<span class="keyword">new</span> MySetCollector&lt;&gt;());</div><div class="line">        System.out.println(stringSet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类里，我们分别实现了5个方法。 其中比较重要的两个方式 <code>finisher</code> 和 <code>characteristics</code>  方法</p>
<p>这俩方法是相互影响的。首先看 <code>characteristics</code>  方法，这个方法要求返回一个 <code>Characteristics</code> 枚举类型对的 <code>Set</code>。而  <code>Characteristics</code> 一共有三个枚举值。分别有不同的含义。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 当我们采用并行流的时候，同时设置了  CONCURRENT 作为这个流的特性</div><div class="line">   * 那么，操作的是同一个集合，而不是多个</div><div class="line">   * 同样的道理，我们采用了并行流的方式，但是没有这个特性，我们就会生成多个</div><div class="line">   * 集合</div><div class="line">   */</div><div class="line">  CONCURRENT,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   *  代表集合是否是有序的</div><div class="line">   */</div><div class="line">  UNORDERED,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 表示 finisher function 可以被省略，因为中间结果和最后的返回的结果的类型是一致的。</div><div class="line">   * 所以当我们设置了这个属性之后，我们就必须了解到， 最后的返回的类型，可以由中间结果类型进行强制的返回。</div><div class="line">   */</div><div class="line">  IDENTITY_FINISH</div></pre></td></tr></table></figure>
<p>上面的例子中，我们为我们自己的 <code>collector</code> 设置了两个属性， <code>IDENTITY_FINISH</code> &amp; <code>UNORDERED</code> ; 意思就是这个收集器收集的元素是无序的。 而同时，返回的类型和中间结果类型是可以完全强制转换的（如果不可以，则会报错，下面会说到）；而 <code>finisher()</code>  函数是不会被执行的，即使你在函数内部直接抛出一个异常都没有问题，因为根本不会执行。<br>执行结果我们可以看一下：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/0cl0ol9dyihk63ocsh0qzjgi/14914603137015.jpg" alt="14914603137015.jpg-102.1kB"></p>
<p>这里需要注意两点：</p>
<ol>
<li>虽然 <code>combiner()</code> 函数被调用了，但是只是返回了一个 <code>BinaryOperator</code> 而已，而这个 <code>BinaryOperator</code> 并不会被调用。</li>
<li><code>finisher()</code> 函数并没有被调用，原因上面已经说过</li>
<li><code>characteristics()</code> 函数被调用了两次，分别代表不同的意思</li>
</ol>
<p>对于第3点，我们跟进 <code>collector()</code> 源代码里看一下, 便会有答案。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/nnftv5zwqcgildzp8ddyd1x3/14914608156971.jpg" alt="14914608156971.jpg-302.5kB"></p>
<p>图中书说法其实不准确，其实是 <code>evaluate</code> 方法中的 <code>ReduceOps.makeRef(collector)</code> 中，会逐个调用相关方法， 包括 <code>characteristics()</code> 方法。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/gj3bj52qxy1im34hvvznjt5s/14914612652241.jpg" alt="14914612652241.jpg-351.7kB"></p>
<p>所以 <code>characteristics()</code> 被调用了两次，第一次用于判断 <strong>是否是无序集合</strong> ；第二次用于判断 <strong>是否需要执行 finisher 用于中间结果和最终结果的类型转换</strong></p>
<h3 id="2-当中间结果与返回结果不一致"><a href="#2-当中间结果与返回结果不一致" class="headerlink" title="2 当中间结果与返回结果不一致"></a>2 当中间结果与返回结果不一致</h3><p>看下面这个改造的自定义收集器，中间结果是个 <code>set</code> 而返回的是个 <code>map</code>，也就是中间结果和最终最终结果是不一致的。这个时候，<code>finisher</code> 函数就会排上用场了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySetCollector2</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">Set</span>&lt;<span class="title">T</span>&gt;, <span class="title">Map</span>&lt;<span class="title">T</span>,<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Supplier&lt;Set&lt;T&gt;&gt; supplier() &#123;</div><div class="line">        System.out.println(<span class="string">"supplier invoked!!!!!"</span>);</div><div class="line">        <span class="keyword">return</span> HashSet::<span class="keyword">new</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BiConsumer&lt;Set&lt;T&gt;, T&gt; accumulator() &#123;</div><div class="line">        System.out.println(<span class="string">"accumulator invoked!!!!!"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> (set, item) -&gt; &#123;</div><div class="line">            System.out.println(set);</div><div class="line">            System.out.println(<span class="string">"threadName: "</span> + Thread.currentThread().getName());</div><div class="line">            set.add(item);</div><div class="line">        &#125;;</div><div class="line"><span class="comment">//        return Set&lt;T&gt;::add;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> BinaryOperator&lt;Set&lt;T&gt;&gt; combiner() &#123;</div><div class="line">        System.out.println(<span class="string">"combiner invoked!!!!!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (set1, set2) -&gt; &#123;</div><div class="line">            set1.addAll(set2);</div><div class="line">            <span class="keyword">return</span> set1;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Function&lt;Set&lt;T&gt;, Map&lt;T, T&gt;&gt; finisher() &#123;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"finisher invoked!!!!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> set -&gt; &#123;</div><div class="line">            Map&lt;T, T&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            set.stream().forEach(item -&gt; map.put(item, item));</div><div class="line">            <span class="keyword">return</span> map;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当有 Characteristics.CONCURRENT 意味着如果有并发，则是多个线程操作一个集合。</div><div class="line">     * 这个时候 accumulator 如果有 遍历操作，就有可能会抛出  ConcurrentModificationException</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"characteristics invoked!!!!"</span>);</div><div class="line">        <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.of(Characteristics.UNORDERED, Characteristics.CONCURRENT));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i ++) &#123;</div><div class="line">            List&lt;String&gt; words = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"word"</span>, <span class="string">"helloword"</span>, <span class="string">"hello"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>);</div><div class="line">            Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">            set.addAll(words);</div><div class="line"></div><div class="line">            Map&lt;String, String&gt; map = set.parallelStream().collect(<span class="keyword">new</span> MySetCollector2&lt;&gt;());</div><div class="line">            System.out.println(map);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里由于我输出与中间结果类型并不一致，所以如果我在 <code>characteristics()</code> 方法中，依旧使用  <code>IDENTITY_FINISH</code> ，也就是进行类型强转，则必然报错，类型转换异常。大家可以自己试一下。</p>
<h3 id="3-并发与并行的区别-并行时候的一些坑"><a href="#3-并发与并行的区别-并行时候的一些坑" class="headerlink" title="3 并发与并行的区别-并行时候的一些坑"></a>3 并发与并行的区别-并行时候的一些坑</h3><p>这里，有另外一个很要命的坑。</p>
<blockquote>
<p>在说这个概念之前，先说一下收集器中 <code>parallel</code> 和 <code>concurrent</code> 的区别</p>
<ul>
<li><code>parallel</code> 是<strong>并行</strong>，会将产生多个集合，多个线程操作，最后合并，也就是会调用 <code>combiner()</code> 方法</li>
</ul>
<ul>
<li><code>concurrent</code> 是<strong>并发</strong>， 是多个线程对同一个集合进行操作，首先 <code>combiner()</code> 函数不会被执行，而同时，如果你在 <code>accumulator()</code> 函数中进行累加操作，又进行遍历操作，就会抛出并发异常。</li>
</ul>
</blockquote>
<p>用例子说话，首先我们必须采用 <code>并行流</code> ， 在 <code>accumulator()</code> 函数中遍历 <code>set</code>, 同时将 <code>characteristics()</code> 函数中加入 <code>CONCURRENT</code> 这个属性，你执行100次，基本都会抛出异常</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/2bpiqnuxu4atmod39o4v090m/14914633115993.jpg" alt="14914633115993.jpg-397.3kB"></p>
<p>原因很简答也比较复杂： 程序采用了并行流 <code>set.parallelStream()</code>，同时设置了 <code>CONCURRENT</code> 属性；也就是说，多个线程操作同一个集合。</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/0cy0jahcni4gnhbb00qjiivv/14914634695900.jpg" alt="14914634695900.jpg-105.6kB"></p>
<p>而在 <code>accumulator()</code> 函数中同时遍历了集合，也修改了集合。由于是多线程操作，很大的概率就会发生你一边遍历集合，一遍修改，就会报错。顺被大家可看看 <code>ConcurrentModificationException</code> 的 <em>javadoc</em>. </p>
<p><img src="http://static.zybuluo.com/zhumin1990719/bgpyjod0lm1fm796tszkxw0c/14914635854475.jpg" alt="14914635854475.jpg-77.1kB"></p>
<p>而如果，你不添加 <code>CONCURRENT</code> 这个属性，就不会报错。因为会生成多个中间集合。这一点，我们可以改造 <code>supplier()</code> 方法，在其中答应一条语句，通过打印了几条语句，就可以看出产生了几个集合。</p>
<blockquote>
<p>当然了，如果你在  <code>accumulator()</code> 中不去有那个遍历的操作，也是即使你添加了 <code>CONCURRENT</code> 属性，也是不会报错的。因为你没有并发的即遍历又修改一个集合</p>
</blockquote>
<p><img src="http://static.zybuluo.com/zhumin1990719/n73a6j6hol02our7kigqyo1x/14914638813587.jpg" alt="14914638813587.jpg-75.7kB"></p>
<p>而一般产生多少集合，由产生多少个线程决定，而产生多少线程一般由机器经过 <code>超线程</code> 技术之后有多少个处理器而确定的。当然也是可以修改的，但是一般没有必要。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查看有多少处理器</span></div><div class="line">Runtime.getRuntime().availableProcessors();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收集器中有很5个抽象方法，每个抽象方法都有自己特殊的作用，如果说我们要自己实现要给收集器的话，我们就需要分别实现下面五个方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk8-2-流初步以及Function详解</title>
    <link href="http://yoursite.com/2017/02/14/jdk8-2-%E6%B5%81%E5%88%9D%E6%AD%A5%E4%BB%A5%E5%8F%8AFunction%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/02/14/jdk8-2-流初步以及Function详解/</id>
    <published>2017-02-14T06:56:17.000Z</published>
    <updated>2017-04-14T07:07:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-流初步"><a href="#一-流初步" class="headerlink" title="一 流初步"></a>一 流初步</h3><p>java 8提供一种更加方便的操作集合方式，即流~ <code>Stream</code><br>Stream的概念其实类似于 <em>liunx</em> 操作系统的中的 <code>PipeLine</code> 的概念，可以将数据传输；</p>
<a id="more"></a>
<p>流 分为两种：</p>
<ol>
<li>中间流：数据通过后还返回一个流，不是数据的终点</li>
<li>节点流：数据流入后不再返回流，操作结束，没有返回</li>
</ol>
<p>使用java8 中的 <code>List</code> 来写一个例子，这个例子是将集合中的所有元素，全部变为大写，而后将元素逐一输出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list1 = Arrays.asList(<span class="string">"min.zhu"</span>, <span class="string">"yi.yu"</span>, <span class="string">"nai.nai"</span>);</div><div class="line"><span class="comment">//        list1.stream().map(item -&gt; item.toUpperCase()).forEach(item -&gt; System.out.println(item));</span></div><div class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        </div><div class="line">        <span class="comment">// 流的操作方式 类似 linux 的管道功能</span></div><div class="line">        <span class="comment">// 流 分为： 中间流 和 节点流</span></div><div class="line">        <span class="comment">// map 称之为 映射 与 mapper-reducer 阶段的map 功能是一致的，给定一个值，返回会一个由于之映射的值</span></div><div class="line">        list1.stream().map(item -&gt; item.toUpperCase()).forEach(item -&gt; list2.add(item));</div><div class="line"></div><div class="line">        <span class="comment">// 函数引用的做法</span></div><div class="line">        <span class="comment">// String::toUpperCase 其实 和 item -&gt; item.toUpperCase()</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 一致，都是有输入有输出，而 toUpperCase 的输入，就是调用他的实例对象</div><div class="line">         * 因为一个类是无法调用他的实例方法的，一定是实例才可以调用实例方法</div><div class="line">         */</div><div class="line">        list1.stream().map(String::toUpperCase).forEach(System.out::println);</div><div class="line">        list1.stream().map(String::toUpperCase).forEach(list2::add);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>java8 的调用流的方式，是使用集合的 <code>stream()</code> 方法， 这个方法会返回一个流，之后就可以调用 <code>map()</code> 方法对 <code>list</code> 中的元素做一定的处理。 <code>map()</code> 函数，还是返回了一个流，这个流也有 <code>forEach</code> 方法，这个时候我们还可以调用 <code>forEach</code> 方法对流中的数据进行逐一的处理。</p>
<p>需要注意的是，<code>forEach</code> 函数中, 需要传递的函数的参数是一个 <code>Consumer</code> 的函数式接口，这个接口的抽象方法 <code>accpt()</code> 是没有返回值的，所以，他不在可以返回一个可以继续操作的流。</p>
<p>而我们在看看 <code>map</code> 方法中，需要传递的是一个我们没有见过的 <code>Function</code> 的函数式接口，这个函数式接口，有两个参数，一个是输入参数，一个是返回值。他的唯一的抽象方法中，是接受一个参数，返回一个值。具体见下图，唯一的方法是 <code>apply</code> 方法，它是有返回值的，这一点和现实中的函数很像</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/a0gnbt50hdkjtfdk2ug54yws/image_1b5ng26f4el33qb92s1itsgpl9.png" alt="image_1b5ng26f4el33qb92s1itsgpl9.png-43.2kB"></p>
<blockquote>
<p>我们之前说过，java8 中，新增了很多个函数式接口，分别用于不同的场景<br>如之前说的 <code>Consumer</code> 接口，他是没有返回值的一个场景，专用于处理数据<br>以及今天说的有返回值的 <code>Function</code> 接口</p>
</blockquote>
<p>那么这个 <code>Function</code> 的函数式接口，就是我们今天的重点。</p>
<h3 id="二-Functon-接口-以及-BiFunction简介"><a href="#二-Functon-接口-以及-BiFunction简介" class="headerlink" title="二 Functon 接口 以及 BiFunction简介"></a>二 Functon 接口 以及 BiFunction简介</h3><p>我们可以用一个例子来完整的说明问题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 函数式接口 Function 的经典案例</div><div class="line"> * jdk 8 新增很多 函数式接口</div><div class="line"> * 之前看的 forEach 方法中的 Consumer 接口 ，他的作用就是 对给定的参数进行一系列操作，不返回值</div><div class="line"> * 而现在的 以及 Test3 中流的 map 方法中 Function 接口 ，他唯一的操作 是apply , 他有返回值，一个value 一个 Return ，与现实当中数学的函数很类似</div><div class="line"> *</div><div class="line"> * jdk 8 中，接口中 除了可以有 default 方法以外， 还可以有一个 static 方法， static 方法可以有默认的实现</div><div class="line"> * 可以参考 Function 这个函数式接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        FunctionTest functionTest = <span class="keyword">new</span> FunctionTest();</div><div class="line"></div><div class="line">        <span class="comment">// 函数式接口，以及 lambda 表达式，让我们可以在函数操作的时候，传递函数，即传递行为</span></div><div class="line">        <span class="comment">// 而之前的编程方法，行为必须已经确定，而后进行调用</span></div><div class="line">        <span class="comment">// 故而 之前的编程方法称之为命令式编程，而后面的方法称之为 函数式编程</span></div><div class="line">        <span class="comment">// 而 可以传递，或者 返回函数的函数，称之为高阶函数（ js 中随处可见高阶函数</span></div><div class="line">        System.out.println(functionTest.compute(<span class="number">1</span>, item -&gt; <span class="number">2</span> * item));</div><div class="line"></div><div class="line">        <span class="comment">// 这种返回方式是 statement 方法</span></div><div class="line">        <span class="comment">// 上面那种方式是 expression 方式</span></div><div class="line">        <span class="comment">// 一个是一个标准的语句，而一个是一个表达式</span></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 表达式是不需要分好结尾的</div><div class="line">         * 而使用 标准语句，则必须要 ； 而且要 &#123;&#125;</div><div class="line">         */</div><div class="line">        System.out.println(functionTest.compute(<span class="number">1</span>, item -&gt; &#123;<span class="keyword">return</span>  <span class="number">2</span> * item;&#125;));</div><div class="line">        System.out.println(functionTest.compute(<span class="number">2</span>, item -&gt; item * item));</div><div class="line">        System.out.println(functionTest.convert(<span class="string">"hello"</span>, item -&gt; item + <span class="string">" world !!"</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> value, Function&lt;Integer, Integer&gt; function)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> function.apply(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String value , Function&lt;String, String&gt; function)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> function.apply(value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要去看代码的注释，上面写完了所有重点的内容，我们再去看看 <code>Function</code> 这个函数式接口的实现，我们知道，<code>java8</code> 允许接口有 <code>default</code> 方法，而 <code>Function</code> 接口中有两个默认方法：</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/o6nkgv0l1c4kjmaot2r0hd9u/image_1b5ngi5f21mha13p0uu4d06851m.png" alt="image_1b5ngi5f21mha13p0uu4d06851m.png-66.8kB"></p>
<p>利用这个两个方法，可以做函数的组合，用一个函数的输出，作为一个函数的输入。</p>
<ul>
<li><code>compose</code> 方法，是先执行 <code>before</code> 这个function, 在执行本身这个function；</li>
<li><code>andThen</code> 方法，则是先执行 <code>Function</code> 本体的 <code>apply</code> 方法，在执行传入的 <code>after</code> 的方法</li>
</ul>
<p>我们来写个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionTest2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        FunctionTest2 functionTest2 = <span class="keyword">new</span> FunctionTest2();</div><div class="line"></div><div class="line">        <span class="comment">// 12</span></div><div class="line">        System.out.println(functionTest2.compute(<span class="number">2</span>, item -&gt; item * <span class="number">3</span>, item -&gt; item * item));</div><div class="line">        <span class="comment">// 36</span></div><div class="line">        System.out.println(functionTest2.compute2(<span class="number">2</span>, item -&gt; item * <span class="number">3</span>, item -&gt; item * item));</div><div class="line">        <span class="comment">// 25</span></div><div class="line">        System.out.println(functionTest2.compute3(<span class="number">2</span>, <span class="number">3</span>, (a,b)-&gt; a+b , result -&gt; result * result));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute</span> <span class="params">(<span class="keyword">int</span> a, Function&lt;Integer, Integer&gt; function1, Function&lt;Integer, Integer&gt; function2)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * compose 就是 先执行 function2.apply</div><div class="line">         * 再将 function2.apply 的返回值，作为 function1 的输入</div><div class="line">         * 此时再执行 function1 apply</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> function1.compose(function2).apply(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute2</span> <span class="params">(<span class="keyword">int</span> a, Function&lt;Integer, Integer&gt; function1, Function&lt;Integer, Integer&gt; function2)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * compose 就是 先执行 function1.apply</div><div class="line">         * 再将 function1.apply 的返回值，作为 function2 的输入</div><div class="line">         * 此时再执行 function2 apply</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> function1.andThen(function2).apply(a);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 如果想做有两个参数的Function 就需要使用BiFunction</div><div class="line">     * 而 BiFunction 只有一个 andThen , andThen 的输入 是 Function，</div><div class="line">     * 因为是将 Apply 的结果返回，结果只有一个，所以 参数只能是 Function , 而不是 BiFunction</div><div class="line">     * 所以 BiFunction 方法不可能有 compose 方法</div><div class="line">     *</div><div class="line">     * 对应的  consumer 也有着 BiConsumer 同时，二者因为没有返回值，所以也只可能有 andThen 方法</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute3</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, BiFunction&lt;Integer, Integer, Integer&gt; biFunction, Function&lt;Integer, Integer&gt; function)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> biFunction.andThen(function).apply(a,b);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>compose</code> 和 <code>andThen</code> 的功能可以从例子中很好的看出来，例子中还有一个新的接口叫 <code>BiFunction</code>, 这个函数式接口是给定两个输入，返回一个输出，解决了有两个参数的函数的问题，对应的，其实 <code>Comsumer</code> 接口也还有一个对应的 <code>BiConsumer</code> 接口。</p>
<p>而当我们去观察这俩 <code>Bi</code> 的接口，都只有一个 <code>andThen</code> 的接口，为啥没有 <code>compose</code> 方法呢？<br>给读者自己思考吧~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-流初步&quot;&gt;&lt;a href=&quot;#一-流初步&quot; class=&quot;headerlink&quot; title=&quot;一 流初步&quot;&gt;&lt;/a&gt;一 流初步&lt;/h3&gt;&lt;p&gt;java 8提供一种更加方便的操作集合方式，即流~ &lt;code&gt;Stream&lt;/code&gt;&lt;br&gt;Stream的概念其实类似于 &lt;em&gt;liunx&lt;/em&gt; 操作系统的中的 &lt;code&gt;PipeLine&lt;/code&gt; 的概念，可以将数据传输；&lt;/p&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>jdk8-1.1-方法引用：lambda表达式的语法糖</title>
    <link href="http://yoursite.com/2017/02/12/jdk8-1-1-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%9Alambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <id>http://yoursite.com/2017/02/12/jdk8-1-1-方法引用：lambda表达式的语法糖/</id>
    <published>2017-02-12T07:31:46.000Z</published>
    <updated>2017-04-14T07:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>方法应用其实是 jdk 8 中的对于  <em>lambda</em> 表达式给予的一种 <strong>语法糖</strong></p>
</blockquote>
<p>而方法引用一共分为 4 种；</p>
<ul>
<li>1 <code>类名::静态方法名</code></li>
<li>2 <code>对象名::方法名</code></li>
<li>3 <code>类名::实例方法名</code></li>
<li>4 <code>构造方法引用::new</code></li>
</ul>
<a id="more"></a>
<p>我们有intellj 编写 lambda 表达式的时候，编译器总是标黄来告诉你，这里可以使用方法引用的方法来进行代码的简化</p>
<p><img src="http://static.zybuluo.com/zhumin1990719/6sl7hr28156h9kmv9jsmstb6/image_1b7k0qtepmls15v3rjv19691om39.png" alt="image_1b7k0qtepmls15v3rjv19691om39.png-86kB"></p>
<p>而方法引用，<strong><em>method reference</em></strong> 其实就是lambda表达式一种语法糖<br>但是 </p>
<blockquote>
<p><strong>不是所有的 lambda 表达式，都可以用方法引用的方式来编写</strong><br>复杂的 lambda 表达式还是需要老老实实写相关代码</p>
</blockquote>
<p>我们通过一个例子来分别讲解这四种方法引用的方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 第一种</span></div><div class="line"></div><div class="line">        Student student1 = <span class="keyword">new</span> Student(<span class="string">"zhumin1"</span>,<span class="number">10</span>);</div><div class="line">        Student student2 = <span class="keyword">new</span> Student(<span class="string">"zhumin2"</span>,<span class="number">20</span>);</div><div class="line">        Student student3 = <span class="keyword">new</span> Student(<span class="string">"zhumin3"</span>,<span class="number">40</span>);</div><div class="line">        Student student4 = <span class="keyword">new</span> Student(<span class="string">"zhumin4"</span>,<span class="number">80</span>);</div><div class="line"></div><div class="line">        List&lt;Student&gt; students = Arrays.asList(student1, student2, student3, student4);</div><div class="line"></div><div class="line">        <span class="comment">// jdk 1.8 的新方法  List 中新增加了 sort 方法</span></div><div class="line">        <span class="comment">// 传统的 lambda 表达式</span></div><div class="line">        students.sort((studentP1, studentP2) -&gt; Student.compareByScore(studentP1, studentP2));</div><div class="line">        <span class="comment">// 第一种方法引用的方式 类名::静态方法名</span></div><div class="line">        <span class="comment">// 不需要传参数，因为可以自动推断出 Student 类型</span></div><div class="line">        students.sort(Student::compareByScore);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 第二种 对象名称::方法名称</span></div><div class="line">        <span class="comment">// 其实和第一种很类似</span></div><div class="line">        StudentComparator studentComparator = <span class="keyword">new</span> StudentComparator();</div><div class="line"></div><div class="line">        students.sort((studentP1, studentP2) -&gt; studentComparator.comparator(studentP1, studentP2));</div><div class="line">        <span class="comment">// 对象名称::方法名称 (方法引用的第二种方式)</span></div><div class="line">        students.sort(studentComparator::comparator);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 第三种方法 类名::实例方法</span></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 比较难理解的的地方是，你会看到调用的函数，和 lambda 表达式需要的参数个数不一致， 会少一个</div><div class="line">         * 而且类名是没法调用方法名的</div><div class="line">         * 而理解方式是：调用方法的实例，就是传入lambda 表达式的第一个参数，而剩下所有参数，都作为 调用的实例方法 的参数</div><div class="line">         * 我们看下面的例子 ， Student 类调用的是其的实例方法 compare（Student） 只有一个参数</div><div class="line">         * 而 List 的默认方法需要的 Comparator 的函数式接口需要两个参数，看似对应不上，而且，类名也无法调用实例方法</div><div class="line">         * 实际是，传入的第一参数就是 comare（student）这个函数的调用者，而第二个参数以及后续所有的参数（如果有跟多也是一样），是作为实例方法的参数传入</div><div class="line">         * 所以少一个参数也没什么</div><div class="line">         * 而更为关键的是这个就是一个语法糖，为了简化代码而生。理解就好</div><div class="line">         * 如此一来； 这个第三种方式就很好理解了</div><div class="line">         *</div><div class="line">         * 类名::实例方法</div><div class="line">         * 即 lambda 表达式的第一参数就是 实例方法 的调用者，后续所有的参数就是 实例方法的传入参数</div><div class="line">         */</div><div class="line">        students.sort(Student::compare);</div><div class="line"></div><div class="line">        <span class="comment">// 再看一个例子</span></div><div class="line">        List&lt;String&gt; cities = Arrays.asList(<span class="string">"haha"</span>,<span class="string">"lala"</span>,<span class="string">"nihao"</span>,<span class="string">"memeda"</span>);</div><div class="line">        <span class="comment">// 对比二者</span></div><div class="line">        Collections.sort(cities, (city1, city2) -&gt; city1.compareToIgnoreCase(city2));</div><div class="line">        Collections.sort(cities, String::compareToIgnoreCase);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 对于第四种，构造方法引用，对于带参数和不带参数的都可以，编译器会自动的进行腿短</span></div><div class="line">        MethodRefrenceTest methodRefrenceTest = <span class="keyword">new</span> MethodRefrenceTest();</div><div class="line">        <span class="comment">// 点击 new 看看会跳到那个方法里去</span></div><div class="line">        methodRefrenceTest.getName(String::<span class="keyword">new</span>);</div><div class="line">        <span class="comment">// 点击 new 看看会跳到那个方法里去</span></div><div class="line">        methodRefrenceTest.getName2(<span class="string">"haa"</span>, String::<span class="keyword">new</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(Supplier&lt;String&gt; supplier)</span>  </span>&#123;</div><div class="line">        <span class="keyword">return</span> supplier.get() + <span class="string">"haha"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName2</span><span class="params">(String name, Function&lt;String ,String&gt; stringFunction)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stringFunction.apply(name);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;方法应用其实是 jdk 8 中的对于  &lt;em&gt;lambda&lt;/em&gt; 表达式给予的一种 &lt;strong&gt;语法糖&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而方法引用一共分为 4 种；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;code&gt;类名::静态方法名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;code&gt;对象名::方法名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;code&gt;类名::实例方法名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4 &lt;code&gt;构造方法引用::new&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="coding life" scheme="http://yoursite.com/tags/coding-life/"/>
    
      <category term="java8" scheme="http://yoursite.com/tags/java8/"/>
    
  </entry>
  
</feed>
